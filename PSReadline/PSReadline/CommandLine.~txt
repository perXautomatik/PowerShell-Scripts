choco feature enable -n allowGlobalConfirmation
choco install linkshellextension
npm install -g gistup
choco install npm
choco install -y --force nodejs
npm install -g gistup
nodejs npm install -g gistup
choco install nodejs.install
choco upgrade nodejs.install
nodejs npm install -g gistup
npm install -g gistup
choco install nodejs-lts
reboot
shutdown /r
npm install -g mkg
E:
ls
mkg .\installChoclatery.ps1
Set-ExecutionPolicy RemoteSigned
mkg .\installChoclatery.ps1
npm config get prefix
ls C:\Users\chris\AppData\Roaming\npm
cd C:\Users\chris\AppData\Roaming\npm && notepad mkg
cd C:\Users\chris\AppData\Roaming\npm & notepad mkg
cd C:\Users\chris\AppData\Roaming\npm 
notepad mkg
choco install mongodb-shell
ls C:\ProgramData\chocolatey\lib\mongodb-shell\tools
ls C:\ProgramData\chocolatey\lib\mongodb-shell\tools\bin
Install-Package MongoDB.Driver
Install-Package MongoDB.Driver.core
get-packagesource
Find-Package -Name MongoDB.Driver.core
Install-Package MongoDB.Driver.core
Install-Package C:\Users\chris\Downloads\MongoDB.Driver.Core.2.13.0-beta1.nupkg
Install-Package --help
<<<<<<< HEAD
echo "git add files from file" ; get-content 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content -Delimiter '\t' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; get-content -Delimiter '  ' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\s{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)(\s{2,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)([\s]{2,}|[\t\n]{1,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)([\s]{2,}|[\t\n]{1,})' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)([\s]{2,}|[\t\n]{1,})\r?\n' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '.{3}' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(.{3})' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(.*([\s]{2,}|[\t\n]{1,}))' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([^\t\n]{1,}([\s]{2,}|[\t\n]{1,}))' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt').Split('[\t\n]{1,}|[\s]{2,}')
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt').Split('  ')
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '[\t\n]{1,}|[\s]{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\[\t\n]{1,}|[\s]{2,}\'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '[\t\n]+|[\s]{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([\t\n]+|[\s]{2,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([\s]{2,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\s{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '[.][^.]{1,}\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '((?<=[.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=\.[^\.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s'
echo "Content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s'
echo "Git add content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "Git add content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,})\s' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,})\s'
echo "content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,7})\s'
=======
>>>>>>> MassiveConsole
Install-Package
Install-Package -h
Install-Package -help
Install-Package --h
putty
Start-Process putty -ArgumentList 'Saved Session Name', 'Tower'
Start-Process putty -ArgumentList 'Saved Session Name', '-name' 'Tower'
Start-Process putty -ArgumentList 'Saved Session Name', '-name', 'Tower'
Start-Process putty -ArgumentList '-name', 'Tower'
Start-Process putty -ArgumentList 'Tower'
[string]$scpPath = Find-PathToPuttyScpExecutable;
[string]$scpPath = Find-PathToPuttyExecutable;
[string]$scpPath = Find-PathTo;
Start-Process plink -ArgumentList 'Tower'
Start-Process plink -pw "p@ssword123" root@192.168.92.128 "df -h"
Start-Process plink -ArgumentList '-pw "p@ssword123" root@192.168.92.128 "df -h"'
Start-Process plink -ArgumentList '-pw "4832" root@tower "df -h"'
ls
pip install simplegist
python -m pip install --upgrade pip
notepad config.py
GHgist
python GHgist
SimpleGist
python SimpleGist
py -m pip install --user virtualenv
python -m pip install --user virtualenv
E:
mkdir pythonEnv
cd .\pythonEnv\
python -m venv env
.\env\Scripts\activate
pip install simplegist
notepad config.py
GHgist = Simplegist()
from simplegist import SimpleGist
ls
cd env
ls
notepad .\pyvenv.cfg
GHgist = Simplegist()
notepad config.py
notepad ./config.py
cd ..
notepad ./config.py
GHgist = Simplegist(username='perXautomatik',api_token='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')
GHgist = Simplegist(username='perXautomatik' , api_token='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')
GHgist = Simplegist(username='perXautomatik')
GHgist 
GHgist = Simplegist(username='perXautomatik' ; api_token='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')
GHgist = Simplegist(username='perXautomatik' api_token='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')
GHgist = Simplegist(username= 'perXautomatik' , api_token= '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')
GHgist = Simplegist(username ='perXautomatik' , api_token ='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')
GHgist = Simplegist('perXautomatik','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')
simplegist
simplegist import SimpleGist
notepad
notepad test.py
python test.py
notepad test.py
python test.py
notepad E:\pythonEnv\env\lib\site-packages\simplegist\__init__.py
ls E:\pythonEnv\env\lib\site-packages\simplegist\
cd E:\pythonEnv\env\lib\site-packages\simplegist\
notepad .\config.py
simplegist import SimpleGist
cd \
ls
cd pythonEnv
ls
python test.py
cd E:\pythonEnv\env\lib\site-packages\simplegist\
ls
notepad .\simplegist.py
notepad .\config.py
notepad .\__init__.py
python simplegist
python simplegist.py
import simplegist.py
notepad test.py
python test.py
notepad do.py
ls E:
cd E:
ls
cd \
ls
cd .\LinksToNas\
Everything.exe -create-file-list "myfilelist.efu" "E:\ToDatabase" -create-file-list-exclude-files "*.tmp"
".\Everything.exe" -create-file-list "myfilelist.efu" "E:\ToDatabase" -create-file-list-exclude-files "*.tmp"
".\everything.exe" -ArgumentList '-create-file-list "myfilelist.efu" "E:\toDatabase\" -create-file-list-exclude-files "*.tmp"'
Run-Process ".\everything.exe" -ArgumentList '-create-file-list "myfilelist.efu" "E:\toDatabase\" -create-file-list-exclude-files "*.tmp"'
& ".\everything.exe" -ArgumentList '-create-file-list "myfilelist.efu" "E:\toDatabase\" -create-file-list-exclude-files "*.tmp"'
& ".\everything.exe" '-create-file-list "myfilelist.efu" "E:\toDatabase\" -create-file-list-exclude-files "*.tmp"'
& ".\everything.exe '-create-file-list' 'myfilelist.efu' 'E:\toDatabase\'"
echoargs
Install-Module Pscx -Scope CurrentUser
Install-Module Pscx -Scope CurrentUser -AllowClobber
echoargs
echoargs ".\everything.exe '-create-file-list' 'myfilelist.efu' 'E:\toDatabase\'"
make-alias 
set-alias EchoArgs &'\E:\LinksToNas\EchoArgs.exe'
set-alias EchoArgs "&'\E:\LinksToNas\EchoArgs.exe'"
echoArgs
set-alias EchoArgs '.\E:\LinksToNas\EchoArgs.exe'
echoArgs
set-alias EchoArgs '. .\E:\LinksToNas\EchoArgs.exe'
echoArgs
import-Module &
Import-Module &
import-Module "&"
Import-Module EchoArgs
&'.\E:\LinksToNas\EchoArgs.exe'
\E:\LinksToNas\EchoArgs.exe
ls E:\LinksToNas\
&'E:\LinksToNas\EchoArgs.exe'
set alias EchoArgs &'E:\LinksToNas\EchoArgs.exe'
set alias EchoArgs "&'E:\LinksToNas\EchoArgs.exe'"
.\E:\LinksToNas\EchoArgs.exe
cd E:\LinksToNas\
.\EchoArgs.exe
.\EchoArgs.exe 'notepad -a'
set-alias everything 'E:\LinksToNas\Everything.exe'
everything
set-alias echoArgs 'E:\LinksToNas\EchoArgs.exe'
echoArgs
everything "'-create-file-list' 'myfilelist.efu' 'E:\toDatabase\'"
everything -create-file-list' 'myfilelist.efu' 'E:\toDatabase\
everything -argument-list  "-create-file-list' 'myfilelist.efu' 'E:\toDatabase\"
echoargs "everything -create-file-list' 'myfilelist.efu' 'E:\toDatabase\"
echoargs "-create-file-list' 'myfilelist.efu' 'E:\toDatabase\"
echoargs "everything '-create-file-list' 'myfilelist.efu' 'E:\toDatabase\"
echoargs "everything 'create-file-list' 'myfilelist.efu' 'E:\toDatabase\"
 "everything 'create-file-list' 'myfilelist.efu' 'E:\toDatabase\"
everything 'create-file-list' 'myfilelist.efu' 'E:\toDatabase\'
everything create-file-list 'myfilelist.efu' 'E:\toDatabase\'
everything
set-alias bcompare 'E:\LinksToNas\BCompare.exe'
set-alias nas \\192.168.0.30\
bcompare nas
set-alias nas '\\192.168.0.30\'
bcompare nas
set-alias nas '\\192.168.0.30\WindoowsShare'
bcompare nas
bcompare '\\192.168.0.30\WindoowsShare'
everythin
everything
E:
ls
cd .\LinksToNas\
ls
Everything.exe
.\Everything.exe
choco install logexpert
& bsarch
.\bsarch
.\C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe
.\"C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe"
"C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe"
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe"
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" meshes WMEMeshes -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" "E:\Vortex Mods\falloutnv\Weapon Mods Expanded v1_1_4-39651-1-1-4\meshes" WMEMeshes -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" "E:\Vortex Mods\falloutnv\Weapon Mods Expanded v1_1_4-39651-1-1-4\meshes" "C:\WMEMeshes.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" "E:\Vortex Mods\falloutnv\Weapon Mods Expanded v1_1_4-39651-1-1-4\" "C:\WMEMeshes.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" "E:\Vortex Mods\falloutnv\Weapon Mods Expanded v1_1_4-39651-1-1-4" "C:\WMEMeshes.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "E:\Vortex Mods\falloutnv\Weapon Mods Expanded v1_1_4-39651-1-1-4\meshes" WMEMeshes -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "E:\Vortex Mods\falloutnv\Weapon Mods Expanded v1_1_4-39651-1-1-4\textures" WMEtextures -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "E:\Vortex Mods\falloutnv\Weapon Mods Expanded v1_1_4-39651-1-1-4\textures" WMEtextures.bsa -fnv -z -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "E:\Vortex Mods\falloutnv\Weapon Mods Expanded v1_1_4-39651-1-1-4\meshes" WMEMeshes.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures\landscape" floraTextureLandscape.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" bnbArmourTextures.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "meshes" bnbArmourMeshes.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "meshes" fafnirUniqueTTwOverhaulMeshes.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" fafnirUniqueTTwOverhaulTextures.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" MojaveRaidersTextures.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" LodAdditionsTextures.bsa -z -fnv -share -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "meshes" LodAdditionsMeshes.bsa -z -fnv -share -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "BNB_Body-35047-1-0" BNB_Body-35047-1-0\bnbBody.bsa -z -fnv -share -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" HumpingTheMojaveSound.bsa  -fnv -share -mt 
py .\attemptFileRame.py
assoc .py=Python.File
ftype Python.File="C:\Path\to\pythonw.exe %1 %*"
."C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.1776.0_x64__qbz5n2kfra8p0\pythonw3.9.exe"
ftype Python.File="C:\Path\to\pythonw.exe %1 %*"
assoc .py=Python.File
."C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.1776.0_x64__qbz5n2kfra8p0\pythonw3.9.exe"
gc '.\NPCs wear NSNS adult v2.esp' | select -first 10 # head
gc '.\NPCs wear NSNS NV.esp' | select -first 10 # head
gc '.\cell.esp' | select -first 10 # head
gc '.\cell`[11`]`[10582`]27004458.esp' | select -first 10 # head
gc .\FormiD.esp | select -first 10 # head
gc .\FormiD.esp | select -first 1 # head
gc .\FormiD.esp | select -first 2 # head
gc .\FormiD.esp | select -first 3 # head
gc .\FormiD.esp | select -first 3 | split "DATMAST"
gc .\FormiD.esp | select -first 3 -split "DATMAST"
(gc .\FormiD.esp | select -first 3).split "DATMAST"
(gc .\FormiD.esp | select -first 3).split("DATMAST")
(gc .\FormiD.esp | select -first 3).split("esp").split("esm").split("DATMAST")
(gc .\FormiD.esp | select -first 3).split("esp").split("esm")
(gc .\FormiD.esp | select -first 3).tostring().split("esp").split("esm")
(gc .\FormiD.esp | select -first 3 -join).split("esp").split("esm")
(gc .\FormiD.esp | select -first 3).join.split("esp").split("esm")
(gc .\FormiD.esp | select -first 3) | join
(gc .\FormiD.esp | select -first 3) | Join-String
(gc .\FormiD.esp | select -first 3) | Join-Strin
Join-String (gc .\FormiD.esp | select -first 3) 
(gc .\FormiD.esp | select -first 3) | Join-String -Property Name -DoubleQuote -Separator ', '
version
get-version
get-vers
(gc .\FormiD.esp | select -first 3) | Join-String -Property Name -DoubleQuote -Separator ', '
$PSVersionTable
-join (gc .\FormiD.esp | select -first 3)
-join (gc .\FormiD.esp | select -first 3).split("esp")
-join (gc .\FormiD.esp | select -first 3).split(".")
-join (gc .\FormiD.esp | select -first 3) | split(".")
-join (gc .\FormiD.esp | select -first 3) | -split(".")
-join (gc .\FormiD.esp | select -first 3) | -split "."
-split (-join (gc .\FormiD.esp | select -first 3)) "."
(-join (gc .\FormiD.esp | select -first 3)).split(".")
(-join (gc .\FormiD.esp | select -first 3)).split("DATMAST")
(-join (gc .\FormiD.esp | select -first 3)).split(".")
(-join (gc .\FormiD.esp | select -first 3)).split(".").split("DATMAST")
(-join (gc .\FormiD.esp | select -first 3)).split(".").split("DAT")
(-join (gc .\FormiD.esp | select -first 3)).split(".")
(-join (gc .\FormiD.esp | select -first 3)).split(".es")
(-join (gc .\FormiD.esp | select -first 3)).split("[.]es")
(-join (gc .\FormiD.esp | select -first 3)).split(".")
(-join (gc .\FormiD.esp | select -first 3)).split(".") -replace '\.','*.'
(-join (gc .\FormiD.esp | select -first 3)).replace('\.','*.')
(-join (gc .\FormiD.esp | select -first 3))split(".").replace('\.','*.')
(-join (gc .\FormiD.esp | select -first 3)).split(".").replace('\.','*.')
(-join (gc .\FormiD.esp | select -first 3)).split(".").replace('\W','*.')
(-join (gc .\FormiD.esp | select -first 3)).replace('\W','*.')
(-join (gc .\FormiD.esp | select -first 3)).replace('\W','.')
(-join (gc .\FormiD.esp | select -first 3)).replace('/W','.')
(-join (gc .\FormiD.esp | select -first 3)).replace('\w','.')
(-join (gc .\FormiD.esp | select -first 3)) -replace "\w","."
(-join (gc .\FormiD.esp | select -first 3)) -replace "\W","."
(-join (gc .\FormiD.esp | select -first 3)) -replace "\W","å"
((-join (gc .\FormiD.esp | select -first 3)) -replace "\W*","å")
((-join (gc .\FormiD.esp | select -first 3)) -replace "\W{1,}","å")
((-join (gc .\FormiD.esp | select -first 3)) -replace "\W{1,}","å").split("å")
((-join (gc .\FormiD.esp | select -first 3)) -replace "[\W ]{1,}","å").split("å")
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w ]{1,}","å").split("å")
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w ]{1,}","å").split("å").unique
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w ]{1,}","å").split("å") | get-unique
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w ]{1,}","å").split("å") | Get-Unique
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") | Get-Unique
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$"
(((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$") | select -first 13
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | where-object {$_ -contain ((((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$") | select -first 13))}
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | where-object {$_ -is ((((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$") | select -first 13))}
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | where-object {$_ -is ((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$") | select -first 13))}
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | where-object {$_ -is-in ((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$") | select -first 13))}
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | where-object {$_ --in ((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$") | select -first 13))}
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | where-object {$_ -in (((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$") | select -first 13)))}
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | ?{(((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | select -first 13) -contains $_}
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | !?{(((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | select -first 13) -contains $_}
((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | ?{(((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | select -first 13) -NotContains $_}
.\bethkit.exe
.\bethkit.exe recepie.esp recepie.esx
.\bethkit.exe "E:\SteamLibrary\steamapps\common\Fallout New Vegas\recepie.esp" "E:\SteamLibrary\steamapps\common\Fallout New Vegas\r.esx"
.\bethkit.exe convert "E:\SteamLibrary\steamapps\common\Fallout New Vegas\recepie.esp" "E:\SteamLibrary\steamapps\common\Fallout New Vegas\r.esx"
git branch -r
git fetch remote master
git branch
git fetch origin
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "BNB_Body-35047-1-0" BNB_Body-35047-1-0\bnbBody.bsa -z -fnv -share -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe"
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack "YamsPinupParade.bsa" -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" -mt unpack "YamsPinupParade.bsa" "folder"
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack "YamsPinupParade.bsa" "folder" -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack "YamsPinupParade.bsa" "E:\Vortex Mods\falloutnv\Resources-43341-1-0" -mt 
Git
git help -a
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" textures.bsa -z -fnv -share -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" door - texturesCompOverhaul.bsa -z -fnv -share -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "meshes" door - meshesCompOverhaul.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "sound" door - soundCompOverhaul.bsa -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "sound" door-soundCompOverhaul.bsa -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "meshes" door-meshesCompOverhaul.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" door-texturesCompOverhaul.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "sound" door-soundSedusingW.bsa -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" door-texturesSedusingW.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "meshes" door-meshesSedusingW.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "meshes" door-meshesAssetPack.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" door-texturesAssetPack.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "sound" door-soundTTW.bsa -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "textures" door-texturesBNBBody.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "meshes" door-meshesBnBBody.bsa -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Type3MClothing - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Type3MClothing - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "seducingMoira - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "ScrapAndRepair - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "ScrapAndRepair - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Roberts_NewVegas - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Roberts_NewVegas - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\door - textures.bsa' "texures" -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\door - textures.bsa' "E:\Vortex Mods\falloutnv\Resources-43341-1-0" -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "Reactive People II - Sneak & Diversion - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "ResourcefullCraftMen - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "K2_RaiderDolls - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "RB_RaiderPA - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "RB_RaiderPA - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "RagdollsTTW - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Radar - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Quick Grenade Hotkey - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "Immersive Primary Needs - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "FO4Crafting - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "FO4Crafting - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "oHUD - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "No Sleeves No Shirts NV Special - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "No Sleeves No Shirts NV - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "NPCsSprint - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "NCR Weapon Overhaul - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "NCR Weapon Overhaul - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Mojave Arsenal - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Frequency - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "medtektraumakit_edisleado - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "medtektraumakit_edisleado - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "medtektraumakit_edisleado - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "EliteRangerCombatArmourComponents - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "LUMENARIUM - Working Sunglasses ONLY - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Logic and Consistency Fixes - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "LMDStorageBag - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "LMDStorageBag - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "LiveDismember - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Light My Flare - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Light My Flare - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "LegionLoreFriendly - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "JustVisualObjectives - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "JSawyer Ultimate - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "JSawyer Ultimate - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "JIP MiniMap - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "JIP Fast-Travel Anywhere - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Inventory Search - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "IntimacyOverhaul_v1.0 - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "IntimacyOverhaul_v1.0 - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "iAssist - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "iAssist - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "HUD Extended - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "map_icon_overhaul - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Equipment Restoration Project - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Equipment Restoration Project - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Enhanced Item Info - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Endless Warfare - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Endless Warfare - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "Endless Warfare - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "RangerAdvancedCustomOvercoats - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "Definitive Camera Hotkeys PHW - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Food Scraps - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Flora Overhaul - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Flora Overhaul - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "music" "TaleOfTwoWastelands - music.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Blind - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Blind - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "TTW Barter with Raiders - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "wsex - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "wsex - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack "Sound" "bittercup_comp - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Skill Bonus Misc. Items - Complete Edition - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Skill Bonus Misc. Items - Complete Edition - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Unofficial Fallout 3 Patch.bsa' "a" -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Flora Overhaul - TextureLandscape.bsa' "" -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Flora Overhaul - TextureLandscape.bsa'  -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Flora Overhaul - TextureLandscape.bsa' '' -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Flora Overhaul - TextureLandscape.bsa' 'a' -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Flora Overhaul - meshes.bsa' 'meshes' -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Flora Overhaul - Textures.bsa' 'textures' -mt 
npm install -g npm@7.21.0
npm install pre-commit-scripts --no-save
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Bouncing Natural Breasts - meshesBnBBody.bsa' 'meshes' -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Bouncing Natural Breasts - texturesBNBBody.bsa' 'textures' -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Bouncing Natural Breasts - Body.bsa' 'a' -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Bouncing Natural Breasts - Textures.bsa' 'textures' -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\Bouncing Natural Breasts - Meshes.bsa' 'meshes' -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" unpack '.\No Sleeves No Shirts NV - meshes.bsa' 'meshes' -mt 
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures\interface "TribalPack - Textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures\landscape "TribalPack - Textures2.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures\armor "TribalPack - Textures2.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures\landscape "TribalPack - Textures2.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures\armor "TribalPack - Textures3.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "TribalPack - Textures4.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "TribalPack - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "CPI Icons - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Improved Raiders - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "S6S's Prodlimen Creature Pack - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack sound "Improved Raiders - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Bouncing Natural Breasts - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Improved Raiders - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "No Sleeves No Shirts NV - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "Fiends With Style - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "S6S's Prodlimen Creature Pack - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Bouncing Natural Breasts - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "TTW Armored Wasteland - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "TTW Armored Wasteland - meshes.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack menus "JIP Improved Recipe Menu - menus.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "SarcasticOffensiveLoadingScreens - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack menus "DarNifiedUINV - menus.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack sound "Smalltalk - Sound.bsa" -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack textures "Fiends With Style - textures.bsa" -z -fnv -share -mt
."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "No sleeves no shirts - meshes.bsa" -z -fnv -share -mt
ls
ls -h
<<<<<<< HEAD
ls -help
get-help ls
ls -recurse
=======
putty
Start-Process putty -ArgumentList 'Saved Session Name', 'Tower'
Start-Process putty -ArgumentList 'Saved Session Name', '-name' 'Tower'
Start-Process putty -ArgumentList 'Saved Session Name', '-name', 'Tower'
Start-Process putty -ArgumentList '-name', 'Tower'
Start-Process putty -ArgumentList 'Tower'
[string]$scpPath = Find-PathToPuttyScpExecutable;
[string]$scpPath = Find-PathToPuttyExecutable;
[string]$scpPath = Find-PathTo;
Start-Process plink -ArgumentList 'Tower'
Start-Process plink -pw "p@ssword123" root@192.168.92.128 "df -h"
Start-Process plink -ArgumentList '-pw "p@ssword123" root@192.168.92.128 "df -h"'
Start-Process plink -ArgumentList '-pw "4832" root@tower "df -h"'
ls -help
get-help ls
ls -recurse
ls E:
cd E:
>>>>>>> MassiveConsole
tree
get-help tree
tree /F
dir
get-help dir
dir -filter *.tab
dir -filter *Fastigheter.tab
$information = (import-csv .\information.csv).information
$information = (import-csv .\1989-2010.csv).information
(import-csv .\1989-2010.csv).information
(import-csv .\1989-2010.csv).information >>
(import-csv .\1989-2010.csv).information | out-host
write-host (import-csv .\1989-2010.csv).information
write-host (import-csv .\1989-2010.csv).Information
Out-host (import-csv .\1989-2010.csv).Information
Out-host -inputObjekt (import-csv .\1989-2010.csv).Information
(import-csv .\1989-2010.csv).Information
(import-csv .\1989-2010.csv).Information | out-file -filepath c:\test1\process.txt
(import-csv .\1989-2010.csv).Information | out-file -filepath C:\Users\crbk01\Desktop\anteckningar w3
(import-csv .\1989-2010.csv).Information | out-file -filepath C:\Users\crbk01\Desktop\anteckningar w3\test.txt
(import-csv .\1989-2010.csv).Information | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
get-help import-scv
<<<<<<< HEAD
=======
set-alias nas \\192.168.0.30\
>>>>>>> MassiveConsole
get-help import-csv
(import-csv .\1989-2010.csv -delimeter ; -encoding {unicode}) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -delimeter ";" -encoding {unicode}) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -delimeter <;> -encoding {unicode}) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -delimeter ';' -encoding {unicode}) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -encoding {unicode}) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -encoding {unicode}) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -encoding unicode) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv ) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -delimiter ;) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -Delimiter ;) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -Delimiter ";") | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -Delimiter ";" -Encoding Unicode) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -Delimiter ";" -Encoding "Unicode") | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -Delimiter ";" -Encoding UTF7) | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
(import-csv .\1989-2010.csv -Delimiter ";" -Encoding UTF7).information | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"
foreach((import-csv .\1989-2010.csv -Delimiter ";" -Encoding UTF7).information) "1"
(import-csv .\1989-2010.csv -Delimiter ";" -Encoding UTF7).information | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"$mbxs = Get-Mailbox
.\try.ps1
get-help out-file
.\try.ps1
dir
dir.name
(dir).name
(dir).name.replace(".doc","")
(dir).name.replace(".docx",".doc").replace("doc","")
(dir).name.replace(".docx",".doc").replace(".doc","")
ls
<<<<<<< HEAD
=======
cd .\LinksToNas\
>>>>>>> MassiveConsole
ls
tree
get-help tree
tree /f
tree /f
get-childitem -recurse | select fullname
(Get-ChildItem G:\mhk -Recurse).fullname > filename.txt
(Get-ChildItem G:\mhk -Recurse).fullname | select-string "[^\)\w\\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]"
get-help select-string
(Get-ChildItem G:\mhk -Recurse).fullname |  Where-Object { -match "[^\)\w\\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]"}
(Get-ChildItem G:\mhk -Recurse).fullname |  Where-Object {$_ -match "[^\)\w\\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]"}
(Get-ChildItem G:\mhk -Recurse).fullname |  Where-Object {$_ -match "[^\)\w\\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]"} | rename-item -newName {$_.name -replace '[^\)\w\\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]','_'}
Get-ChildItem G:\mhk -Recurse |  Where-Object {$_.name -match "[^\)\w\\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]"} | rename-item -newName {$_.name -replace '[^\)\w\\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]','_'}
Get-ChildItem G:\mhk -Recurse |  Where-Object {$_.name -match "[^\\w\\:.åäöÅÄÖ,]"} | rename-item -newName {$_.name -replace '[^\\w\\:.åäöÅÄÖ,]','_'}
Get-ChildItem G:\mhk -Recurse |  Where-Object {$_.name -match "[^\\w\\:.åäöÅÄÖ,]"} | rename-item -newName {$_.name -replace '[^\\w\\:.åäöÅÄÖ,]','_-_'}
Get-ChildItem G:\mhk -Recurse |  Where-Object {$_.name -match "[^\\w\\:.åäöÅÄÖ,]"} | rename-item -newName {$_.name -replace -whatif '[^\\w\\:.åäöÅÄÖ,]','_-_'}
get-children
get-childitem
get-childitem -recirse
get-childitem -recurse
get-help get-childitem
get-childitem -recurse -name
(Get-ChildItem G:\mhk -Recurse).fullname |  Where-Object {$_ -match "[%\{,~$\(!@¤£é&=#§]"}
(Get-ChildItem G:\mhk -Recurse).fullname |  Where-Object {$_ -match "[%\{~$\(!@¤£é&=#§]"}
Get-ChildItem G:\mhk -Recurse |  Where-Object {$_.name -match "[%\{~$\(!@¤£é&=#§]"} | rename-item -newName {$_.name -replace '[%\{~$\(!@¤£é&=#§]','_'}
(Get-ChildItem G:\mhk -Recurse).fullname |  Where-Object {$_ -match "[%\{,~$\(!@¤£é&=#§]"}
$dirs = gci $tdc -directory -recurse | Where { (gci $_.fullName).count -eq 0 } | select -expandproperty FullName
$dirs = gci "G:\mhk" -directory -recurse | Where { (gci $_.fullName).count -eq 0 } | select -expandproperty FullName
(Get-ChildItem G:\mhk -Recurse).fullname > filename.txt
cd..
cd..
(Get-ChildItem G:\mhk -Recurse).fullname > filename.txt
Get-Content -Path .\filerAttFlytta.txt
Get-Content -Path .\filerAttFlytta.txt | get-item | Copy-Item -Destination "G:\mhk\AttFlytta" -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | get-item | Copy-Item -Destination 'G:\mhk\AttFlytta' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | get-item | Copy-Item -Destination 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | get-item | Copy-Item -Destination 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | get-item | Get-ChildItem -Path $_ | Copy-Item -Destination 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | get-item | Copy-Item $_.FullName 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | Copy-Item $_ 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | get-item | $_.FullName
Get-Content -Path .\filerAttFlytta.txt | get-item.FullName
Get-Content -Path .\filerAttFlytta.txt | get-item | Copy-Item -literalPath 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | Copy-Item -literalPath 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | Copy-Item -Path 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | Copy-Item $_ 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt |  Copy-Item $_ -destination 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt |get-item |  Copy-Item $_ -destination 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt |get-item.getfullname |  Copy-Item $_ -destination 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt |get-item |  Copy-Item $_.fullname -destination 'G:\mhk\AttFlytta\' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt |get-item |  echo $_.fullname
Get-Content -Path .\filerAttFlytta.txt |get-item |  echo $_
Get-Content -Path .\filerAttFlytta.txt |get-item $sourceDir | Copy-Item -Destination $targetDir -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | get-item | Copy-Item -Destination 'G:\mhk\AttFlytta' -Recurse -Container
Get-Content -Path .\filerAttFlytta.txt | get-item | Copy-Item -Destination 'G:\mhk\AttFlytta' -Container
Get-Content -Path .\filerAttFlytta.txt | get-item | Copy-Item -Destination (new-item -type directory -force (Split-Path -Path))
Get-Content -Path .\filerAttFlytta.txt -pv pathString | get-item | Copy-Item -Destination (new-item -type directory -force (Split-Path $pathstring -Path))
Get-Content -Path .\filerAttFlytta.txt -pv pathString | get-item | Copy-Item -Destination (new-item -type directory -force (Split-Path -path $pathstring))
Get-Content -Path .\filerAttFlytta.txt -pv pathString | get-item | Copy-Item -Destination (new-item -type directory -force (Split-Path -path $pathString))
Get-Content -Path .\filerAttFlytta.txt | get-item -pv pathString | Copy-Item -Destination (new-item -type directory -force (Split-Path -path $pathString))
Get-AppXPackage -AllUsers | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
get-printer
get-printer | $.portName
get-printer | $.portName
get-printer.portName
get-printer /portName
get-help get-printer
get-help | to-out
get-help | out-host
get-printer | out-host
get-printer | format-wide -property portname
get-printer | % {format-wide -property portname}
get-printer | % {format-wide -property portname} | out-host
get-printer | % {$_ format-wide -property portname} | out-host
get-printer | % {$_} | out-host
get-printer | format-list -property printername,drivername,portname | out-host
get-printer | format-list -property name,drivername,portname | out-host
get-printer | where-object {$_.name -like '*2339*'} |format-list -property name,drivername,portname | out-host
Get-WmiObject -Class Win32_Product -Filter 'Name like "%adobe%"' | Select Caption,InstallLocation
Get-WmiObject -Class Win32_Product -Filter 'Name like "%acrobat reader%"' | Select Caption,InstallLocation
Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation 
Get-ChildItem HKLM:\SOFTWARE\adobe | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation 
Get-ChildItem HKLM:\SOFTWARE\adobe\* | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation 
(Get-CimInstance -ClassName Win32_Product | Where-Object Name -Like "*acrobat reader*").InstallLocation
get-printer | where-object {$_.name -like '*2339*'} |format-list -property name,drivername,portname | out-host
pdftk.exe
ls
pdftk.exe
get-help pdftk.exe
pdftk
/pdftk.exe
[accelerators]::get
[accelerators]
[psobject].Assembly.GetType(“System.Management.Automation.TypeAccelerators”)::get
./nuget
./nuget
Start-Process -FilePath java -ArgumentList '-jar pdfa-x.y.z.jar'
Start-Process -FilePath java -ArgumentList '-jar pdfa-x.y.z.jar -help'
Start-Process -FilePath java -ArgumentList '-jar pdfa-x.y.z.jar -h'
./cpdf.exe -pages "C:\Users\crbk01\Desktop\Södra\MHN-2018-1680_322.pdf"
./cpdf.exe -pages 'C:\Users\crbk01\Desktop\ny mapp\Södra\MHN-2018-1680_322.pdf'
./cpdf.exe -pages 'C:\Users\crbk01\Desktop\ny mapp\Södra\MHN-2018-1680_322.pdf'
.\pdfcombine
.\pdfcombine "H:\hämtade filer\MHN-2018-826_2_004.pdf" "H:\hämtade filer\SeC_Man-Admin_ds_EN_USA_120109 (1).pdf"
.\pdfcombine "C:\Users\crbk01\Desktop\Ny mapp (2)" "C:\Users\crbk01\Desktop\Ny mapp (3)" C:\Users\crbk01\Desktop\new.pdf
.\cpdf "H:\hämtade filer\MHN-2018-826_2_004.pdf" "H:\hämtade filer\SeC_Man-Admin_ds_EN_USA_120109 (1).pdf" out.pdf
.\cpdf "H:\hämtade filer\MHN-2018-826_2_004.pdf" "H:\hämtade filer\SeC_Man-Admin_ds_EN_USA_120109 (1).pdf" c:\users\crbk01\desktop\out.pdf
.\cpdf "H:\hämtade filer\MHN-2018-826_2_004.pdf" "H:\hämtade filer\SeC_Man-Admin_ds_EN_USA_120109 (1).pdf" -o out.pdf
cd ..
cd c:\user\crbk01\desktop\
cd 'c:\user\crbk01\desktop\'
cd ..
cd ..
cd desktop
in2csv w3.xlsx > w32.csv
in2csv vision.xlsx > vision2.csv
in2csv NuÖppnaÄrenden.xlsx > vision2.csv
in2csv NuÖppnaÄrende.xlsx > NuÖppnaÄrende2.csv
Start-Process powershell -Verb runAs
mklink /D H:\Users\crbk01\.DataGrip2019.1 C:\Users\crbk01\.DataGrip2019.1
Start-Process powershell -Verb runAs
c:\Users\crbk01\Desktop\WhenOffline\AventyrLivsmedel\uml pseudocode.plantexuml
<<<<<<< HEAD
"$bComparePath\\BComp.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\"
end sub
"$bComparePath\\BComp.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\"
"$bComparePath\\BComp.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
=======
"C:\\Users\\crbk01\\Desktop\\WhenOffline\\BeondCompare4\\BComp.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\"
end sub
"C:\\Users\\crbk01\\Desktop\\WhenOffline\\BeondCompare4\\BComp.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\"
"C:\\Users\\crbk01\\Desktop\\WhenOffline\\BeondCompare4\\BComp.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
>>>>>>> MassiveConsole
vivaldi "vivaldi://flags"
ls -la
Get-History | Format-List -Property *Get-History | Format-List -Property *
Get-History | Format-List -Property *
ls C:\Users\crbk01\Desktop\Ny mapp (3)
C:
ls C:\Users\crbk01\Desktop\Ny mapp (3)
ls 'C:\Users\crbk01\Desktop\Ny mapp (3)'
ls 'C:\Users\crbk01\Desktop\Ny mapp (3)'| name
db2 list db directory
Get-SqlDatabase
Get-SqlInstance -Credential $Credential -MachineName "Computer001"
Get-SqlInstance -Credential $Credential -MachineName "5CG84229D5.adm.gotland.se"
Get-SqlInstance -Credential $Credential -MachineName "5CG84229D5"
Get-SqlInstance -Credential $Credential
cd c
c:
Get-NetUDPEndpoint -LocalAddress 127.0.0.1
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 -OwningProcess
Get-Process -Id (Get-NetTCPConnection -LocalPort portNumber).OwningProcess
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 | Get-Process -Id (Get-NetTCPConnection -LocalPort portNumber).OwningProcess
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 localPort | Get-Process -Id (Get-NetTCPConnection -LocalPort portNumber).OwningProcess
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 | Format-List -Property localPort | Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 | Format-List -Property localPort
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 -Property localPort
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 -Port
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 | Format-List -Property 
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 | Format-List 
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 -Property localPort
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 | Format-List -Property 
Get-NetUDPEndpoint -LocalAddress 127.0.0.1 | Format-List -Property localPort
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | parse | Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | parse 
parse(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | parse(''+$_)
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | ToUInt16($_) 
ToUInt16(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | [Convert]::ToInt16("$_",2)
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | [Convert]::ToInt16
[Convert]::ToInt16(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort
[Convert]::ToInt16((Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort)
[Convert]::ToInt16((Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort,2)
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort |ForEach-Object {  [Convert]::ToInt16{$PSItem} } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort |ForEach-Object {  [Convert]::ToInt16{''+$PSItem} } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort |ForEach-Object {  [Convert]::ToInt16{$_} } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1)|ForEach-Object {  [Convert]::ToInt16{$_.localPort} } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1)|ForEach-Object {  [Convert]::ToInt16{"$_.localPort"} } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1)|ForEach-Object {  "$_.localPort" } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1)|ForEach-Object {  $_ } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1)|localPort|ForEach-Object {  $_ } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1)|$_.localPort|ForEach-Object {  $_ } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1)|$_.localPort
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1)
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {}
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {$_ }
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {"$_" }
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {"$_" } | [Convert]::ToInt16{$_}
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {[Convert]::ToInt16{$_}}
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {"$_" } | foreach{[Convert]::ToInt16{$_}}
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {""+="$_" } | foreach{[Convert]::ToInt16{$_}}
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {$_+="" } | foreach{[Convert]::ToInt16{$_}}
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {$_+="" } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {$_ = ""|$_ } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {"" | $_ } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {" " + $_ } 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | foreach {" " + $_ }  | foreach{[convert]::ToInt16{$_}}
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | get-content {$_}  | foreach{[convert]::ToInt16{$_}}
get-content ( (Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort ) | foreach{[convert]::ToInt16{$_}}
 (Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | %{[convert]::ToInt16{$_}}
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | Get-Process -Id (Get-NetTCPConnection -LocalPort [int]$_).OwningProcess
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | Get-Process -Id (Get-NetTCPConnection -LocalPort [uint16int]$_).OwningProcess
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | Get-Process -Id (Get-NetTCPConnection -LocalPort [uint16]$_).OwningProcess
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | %{[int]$_} | Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | %{[int]$_} 
(Get-NetUDPEndpoint -LocalAddress 127.0.0.1).localPort | %{[int]$_} | %{Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess}
(Get-NetUDPEndpoint -LocalAddress.).localPort | %{[int]$_} | %{Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess}
(Get-NetUDPEndpoint -LocalAddress local ).localPort | %{[int]$_} | %{Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess}
get-services
get-service
echo 'START`
' > vsclog.txt
echo 'Exporting...`
' >> vsclog.txt
code --list-extensions > vsc-extensions.txt
echo 'Successfully exported' >> vsclog.txt
echo '`
END' >> vsclog.txt
git rev-parse
git push
git remote add PDF-Bookmark-Split https://github.com/perXautomatik/PDF-Bookmark-Split.git
git push PDF-Bookmark-Split
git push --set-upstream PDF-Bookmark-Split master
git branch --set-upstream-to=default
git branch --set-upstream-to=main
git branch --set-upstream-to=new
git push PDF-Bookmark-Split
git push --set-upstream PDF-Bookmark-Split master
git pull PDF-Bookmark-Split master new
<<<<<<< HEAD
=======
git help
git status
git restore --staged scripts
(Get-PSReadlineOption).HistorySavePath                                                                                                                       
Get-PSReadLineKeyHandler                                                                                                                                     
Get-PSReadLineOption                                                                                                                                         
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType SymbolicLink -Value "C:\Users\crbk01\AppData\Roaming\Mic...
git help
git status
git restore --staged
git restore --staged scripts
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Hardlink -Value "C:\Users\crbk01\AppData\Roaming\Microso...
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Junction -Value "C:\Users\crbk01\AppData\Roaming\Microso...
(Get-PSReadlineOption).HistorySavePath                                                                                                                       
set-PSReadlineOption -HistorySavePath "C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"                      
Set-PSReadLineOption -HistorySavePath C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt -HistorySaveStyle in...
Set-PSReadLineOption -HistorySavePath C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt -HistorySaveStyle sa...
(Get-PSReadlineOption).HistorySavePath                                                                                                                       
Get-PSReadLineOption                                                                                                                                         
 [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState                                                                                                    
cd "C:\Program Files\TortoiseGit\bin"                                                                                                                        
ls                                                                                                                                                           
.\TortoiseGitProc.exe                                                                                                                                        
cd "C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\"                                                                                
".\C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"                                                                                                     
"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"                                                                                                       
.\"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"                                                                                                     
.\C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe                                                                                                       
'.\C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe'                                                                                                     
.\'C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe'                                                                                                     
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"                                                                                                      
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus                                                                                  
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"  
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"              
cd "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"                                                                                             
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"                                                                                                      
&"TortoiseGitProc" /path            
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /path                                                                                                
git restore --staged Scripts
git status
git remote add "D:\Documents\WindowsPowerShell"
git remote add PowerShellCmdHist "D:\Documents\WindowsPowerShell"
git fetch PowerShellCmdHist beforePurge:beforePurge
git diff beforePurge
git fetch PowerShellCmdHist refs/heads/bucketsNpiechart
get-content .\gitConfigsToAddAsSubmodules.txt
get-content .\gitConfigsToAddAsSubmodules.txt | %{ $_.parent }
get-content .\gitConfigsToAddAsSubmodules.txt | %{ $_.parent } | console-out
get-content .\gitConfigsToAddAsSubmodules.txt | %{ $_.parent } | $
get-content .\gitConfigsToAddAsSubmodules.txt | %{ $_.parent } | $_
get-content .\gitConfigsToAddAsSubmodules.txt | %{ $_ | Split-Path -Path $MyInvocation.MyCommand.Definition -Parent}
get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent}
get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent}
get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent} | unique
get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent} | unique | git submodule add
get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent} | unique | %{ git submodule add $_ }
get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent} | unique | %{ git submodule add $_ -f }

& "C:\Users\crbk01\Desktop\OnGithub\addSubmodules.ps1"
git
git -bare
git --bare
git init
ls
ls | %{ $_ | git init }
ls | %{ cd $_ | git init }
ls | %{ git $_ init }
ls | %{ git init $_ }
ls | filter -name 'PortableApps.com' | %{ git init $_ }
ls | Where-Object { $_.Name -notin 'PortableApps.com' }  | %{ git init $_ }
git
Remove-Item -Path .\Code\ -Force -Recurse
kill vscode
Stop-Process -Name vscode
Remove-Item -Path .\Code\ -Force -Recurse
Stop-Process -Name code
Remove-Item -Path .\Code\ -Force -Recurse
Stop-Process -Name code
Remove-Item -Path .\Code\ -Force -Recurse
takeown /F "C:\windows.old" /A /R /D Y
toutch newfile
touch newfile
'touch' > newfile
git init
remot add origin https://gist.github.com/2a77d2bb2d57576de925d1d3ac8de62a
remote add origin https://gist.github.com/2a77d2bb2d57576de925d1d3ac8de62a
git remote add origin https://gist.github.com/2a77d2bb2d57576de925d1d3ac8de62a
git fetch
git branch master origin/master
git checkout master
git add -A
git commit -m 'first commit'
git push
ls
.\fx-win.exe
echo '{"key": "value"}' | .\fx-win.exe 'x => x.key'
. .\fx-win.exe
echo '{"key": "value"}' | fx 'x => x.key'
cd 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile'
ping google.com
ping www.google.com
echo '{"key": "value"}' | fx 'x => x.key'
echo '{"key": "value"}' | .\fx-win.exe 'x => x.key'
ping google.com
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | fx
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe
. .\fx-win.exe
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this[1]'
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"                                                                                                      
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.name'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[1]'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children'
clear
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.name'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this.0'?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' '0'?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' '0' 'this[1]' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' '0' 'this[1]' 
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' '0' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' '0'  
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children'
clear
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children'?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe
.\fx-win.exe
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this.map'?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' '0' 'this.map'?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' '0' 
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children'  
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[1]'  
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[1]' '[1]' 
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[1]' 'this[1]'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[1]' 'this[0]'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[1]' 'this.[0]'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[1]' 'this.map[0]'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[1]' 'this.map(0)'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this.map(0)'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this.map'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this' 'this' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar'  ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar'  'this.type'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this.type' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this.map()' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' 'this.map' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children.map' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.map(children)' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children.this' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' ?
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe -command repostatus -path C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"                
get-content .\gitConfigsToAddAsSubmodules.txt | %{ $_.parent } | console-out
get-content .\gitConfigsToAddAsSubmodules.txt | %{ $_.parent } | $_
get-content .\gitConfigsToAddAsSubmodules.txt | %{ $_ | Split-Path -Path $MyInvocation.MyCommand.Definition -Parent}
get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent} | unique | git submodule add
get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent} | unique | %{ git submodule add $_ }
get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent} | unique | %{ git submodule add $_ -f }
Import-Module ecoargs                                                                                                                                        
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.name' 
git --bare
git init
ls | %{ $_ | git init }
ls | %{ cd $_ | git init }
ls | %{ git $_ init }
ls | %{ git init $_ }
Import-Module echoargs                                                                                                                                       
Import-Module pscx                                                                                                                                           
Install-Module -Name Pscx                                                                                                                                    
echoargs &"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe -command repostatus -path C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"       
echoargs                                                                                                                                                     
ls | filter -name 'PortableApps.com' | %{ git init $_ }
ls | Where-Object { $_.Name -notin 'PortableApps.com' }  | %{ git init $_ }
git

Remove-Item -Path .\Code\ -Force -Recurse ; kill vscode; Stop-Process -Name vscode
Remove-Item -Path .\Code\ -Force -Recurse ; Stop-Process -Name code
Remove-Item -Path .\Code\ -Force -Recurse ; Stop-Process -Name code
Remove-Item -Path .\Code\ -Force -Recurse ; takeown /F "C:\windows.old" /A /R /D Y

toutch newfile
touch newfile
'touch' > newfile

git init
remot add origin https://gist.github.com/2a77d2bb2d57576de925d1d3ac8de62a
remote add origin https://gist.github.com/2a77d2bb2d57576de925d1d3ac8de62a
git remote add origin https://gist.github.com/2a77d2bb2d57576de925d1d3ac8de62a
git fetch
git branch master origin/master
git checkout master
git add -A
git commit -m 'first commit'
git push
ls

cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.name'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children'
clear
.\fx-win.exe
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' 'this.map(x => x.name)'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe 'this.map(x => x.name)'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe 'this.map(x => x.name, x.url)'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe 'this.map(x => x.name x.url)'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe 'this.map(x => x.name x => x.url)'
.\fx-win.exe 
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe 'this.map(x => x.url)'
.\fx-win.exe 
echo '[1,2,3]' | .\fx-win.exe ?
echo '[1,2,3]' | .\fx-win.exe '{...this, }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this, }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this.name,...this.url }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this.name,...this.url}'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this.name,this.url}'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this.name, this.url}'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this.name, this}'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this, this}'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this, this.name}'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this.name, }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{... }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{..., }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this, }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{...this.x, }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe ?
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{this.map(x => x.name), }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{map(x => x.name), }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{ x.name), }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{ name), }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{ name, }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{ this.name, }'
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' 'this.children[0]' 'this.children' | .\fx-win.exe '{ this, }'
git add 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git add http://www.holomind.de/ahk/livewindows/livewindows.ahk
git remote add origin http://www.holomind.de/ahk/livewindows/livewindows.ahk
git remote -v
git remote add origin http://www.holomind.de/ahk/livewindows/livewindows.ahk
git init
git add http://www.holomind.de/ahk/livewindows/livewindows.ahk
git --work-tree=/ add http://www.holomind.de/ahk/livewindows/livewindows.ahk
git --work-tree=/ add 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git clone --bare 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git archive --remote=http://www.holomind.de/ahk/livewindows/livewindows.ahk
git archive --add-file=http://www.holomind.de/ahk/livewindows/livewindows.ahk
git add 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git clone 'http://www.holomind.de/ahk/livewindows/livewindows.ahk' livewindows.ahk
git submodule add 'http://www.holomind.de/ahk/livewindows/livewindows.ahk' livewindows.ahk
git submodule add 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git fetch --all 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote add origin 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git fetch --all 
git clone 'http://www.holomind.de/ahk/livewindows/livewindows.ahk' livewindows.ahk
git archive --add-file=http://www.holomind.de/ahk/livewindows/livewindows.ahk
git clone --bare 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote -v
git fetch -all
git fetch --all
git fetch
git fetch --all --force
git config --local --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
git fetch --all --force
git pull
git clone ...(remote) new_folder
git clone ...(local_remote) new_folder
git remote -v
git clone ...(orgin) new_folder
git clone ...(origin) new_folder
git clone origin new_folder
git clone ...(origin) new_folder
git remote -v
Import-Module pscx                                                                                                                                           
Import-Module -name pscx                                                                                                                                     
$history = [System.Collections.ArrayList]([System.IO.File]::ReadAllLines((Get-PSReadlineOption).HistorySavePath))...                                         
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
git clone remote
git clone origin
git reset --mixed
git fsck --full
git gc --auto
git prune --expire now
git reflog --all
git clone origin
git config --local --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
git clone origin
git pull
git fetch --all --force
git clone --bare 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote add 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote add q 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
get-history                                                                                                                                                  
git remote -v
git remote -f q 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote -mirror 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote -m -mirror 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote --mirror 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote add --mirror 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote add --mirror=fetch 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote add --m --mirror=fetch 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote add --master --mirror=fetch 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote add --master --mirror=fetch 'http://www.holomind.de/ahk/livewindows/livewindows.ahk' ahk
git remote add --master --mirror=fetch ahk 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote -v
git fetch --all --force
Git help -g
Git help -a
Git add "Local/ChemTable Software/Autorun Organizer/AdditionalStartupItemsData.xml" -f ;Git add "Local/ChemTable Software/Shared/StartupItems/AgesEx.bin" -f ;Git add "Local/ChemTable Software/Shared/StartupItems/LastProductModifiedStartup.txt" -f ;Git add "Local/ChemTable Software/Shared/StartupItems/TDriversFactory.xml" -f ;Git add "Local/ChemTable Software/Shared/StartupItems/TRegistryRunFactory.xml" -f ;Git add "Local/ChemTable Software/Shared/StartupTimes.xml" -f ;Git add "Local/Copy Handler/Tasks/engine.log" -f ;Git add "Local/Copy Handler/Tasks/tasks.sqlite" -f ;Git add "Local/Copy Handler/ch.log" -f ;Git add "Local/Copy Handler/ch.xml" -f ;Git add "Local/Fallout3/Plugins.fo3viewsettings" -f ;Git add "Local/Fallout3/loadorder.txt" -f ;Git add "Local/Fallout3/plugins.txt" -f ;Git add "Local/Fallout4/DLCList.txt" -f ;Git add "Local/Fallout4/Plugins.fo4viewsettings" -f ;Git add "Local/Fallout4/loadorder.txt" -f ;Git add "Local/Fallout4/plugins.txt" -f ;Git add "Local/Fallout4/plugins.txt.bak" -f ;Git add "Local/FalloutNV/NVDLCList.txt" -f ;Git add "Local/FalloutNV/loadorder.txt" -f ;Git add "Local/FalloutNV/plugins.txt" -f ;Git add "Local/Microsoft_Corporation/PowerShell_ISE.exe_StrongName_lw2v2vm3wmtzzpebq33gybmeoxukb04w/3.0.0.0/user.config" -f ;Git remote add EverythingOnline "https://github.com/perXautomatik/EverythingSettings.git"
Git remote add bat-files "https://github.com/perXautomatik/bat-files.git"
git pull
git pull ahk
git fetch ahk --force
git fetch --depth=1
git config  transfer.hideRefs refs/secret
git fetch --depth=1
git fetch ahk --force
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; $git = Git; .$Gsubtree --prefix=PSReadline -b CmdHist ; .$git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist
$git = Git; .$Gsubtree --prefix=PSReadline -b CmdHist2
$git = Git; .$git "subtree split --prefix=PSReadline -b CmdHist"
$git = Git; .$git -arguments "subtree split --prefix=PSReadline -b CmdHist"
$git = Git; .$git -subtree split --prefix=PSReadline -b CmdHist
Set-Alias -Name git -Value Git
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; Set-Alias -Name git -Value powershell -ExecutionPolicy Unrestricted -Command "& 'D:\PortableApplauncher\Apps\.free\GitHubDesktopPortable\App\GitHubDesktop\app-2.9.5\resources\app\git\cmd\git.exe'"
Set-Alias -Name git -Value "& 'D:\PortableApplauncher\Apps\.free\GitHubDesktopPortable\App\GitHubDesktop\app-2.9.5\resources\app\git\cmd\git.exe'"
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; Set-Alias -Name git -Value ".'D:\PortableApplauncher\Apps\.free\GitHubDesktopPortable\App\GitHubDesktop\app-2.9.5\resources\app\git\cmd\git.exe'"
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; Set-Alias -Name git -Value ".\'D:\PortableApplauncher\Apps\.free\GitHubDesktopPortable\App\GitHubDesktop\app-2.9.5\resources\app\git\cmd\git.exe'"
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; Set-Alias -Name git -Value Git
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; cd D:\ToGit\Forks\ScoopBucket
.\install.ps1
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; Gsubtree --prefix=PSReadline
Gsubtree --prefix=TextTransformation -b TextTransformation ; git push C:\Users\dator\AppData\Roaming\Microsoft\Windows\PowerShell\TextTransformation TextTransformation 
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; cd C:\Users\dator\AppData\Roaming\Microsoft\Windows\PowerShell
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; git push D:\ToGit\Forks\New folder
git push "D:\ToGit\Forks\New folder"
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; git push "D:\ToGit\Forks\New folder"
Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ; git clone --sparse livewindows
git pull ahk
git config transfer.hideRefs '!refs/secret/not-so-secret'
git pull ahk
git fetch ahk --force
git config  uploadpack.allowAnySHA1InWant
git fetch ahk --force
git pull ahk
git pull --rebase 
git pull
get-history -Verbose                                                                                                                                         
git reset --mixed
git pull --rebase 
git gc --auto
git ls-remote 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git remote add --master --mirror=fetch livewindows 'http://www.holomind.de/ahk/livewindows'
git add livewindows.ahk
git pull --rebase 
git pull livewindows
git clone livewindows
git clone -force livewindows
get-history | select -commandline                                                                                                                            
get-history | select commandline                                                                                                                             

git clone --sparse livewindows
git clone --dissociate livewindows
$git = Git; .$git -subtree split --prefix=PSReadline -b CmdHist
git update-index --assume-unchanged 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git fetch
git clone
git pull livewindows
git pull 
git clone  --depth 1  --filter=blob:none   --sparse  'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git clone  --depth 1  --filter=blob:none   --sparse  'http://www.holomind.de/ahk/livewindows/livewindows.ahk' ahk
git clone  --depth 1  --filter=blob:none   --sparse  'http://www.holomind.de/ahk/livewindows/' ahk
git config --global core.compression 0
git clone  --depth 1  --filter=blob:none   --sparse  'http://www.holomind.de/ahk/livewindows/' ahk
git checkout ahk
git checkout  'http://www.holomind.de/ahk/livewindows/' ahk
git checkout 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git show 'http://www.holomind.de/ahk/livewindows/livewindows.ahk' > ahk
git archive --remote='http://www.holomind.de/ahk/livewindows/livewindows.ahk' > ahk
git clone --no-checkout --depth=1 --no-tags 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
git restore --staged
git checkout
wget 'http://www.holomind.de/ahk/livewindows/livewindows.ahk'
wget 'http://www.holomind.de/ahk/livewindows/livewindows.ahk' > livewindows.ahk
remote add livewindows 'C:\Users\crbk01\Desktop\Ny mapp'
git remote add livewindows 'C:\Users\crbk01\Desktop\Ny mapp'
git remote add pipe-objects-into-arrays 'C:\Users\crbk01\Desktop\Ny mapp'
gh repo clone perXautomatik/AutoHotkeyPortable-1
git gh repo clone perXautomatik/AutoHotkeyPortable-1
git clone perXautomatik/AutoHotkeyPortable-1
git clone https://github.com/perXautomatik/AutoHotkeyPortable-1.git
git remote add https://github.com/perXautomatik/AutoHotkeyPortable.git
git remote add Profile https://github.com/perXautomatik/AutoHotkeyPortable.git
git remote add TempScripts https://github.com/perXautomatik/AHKtempScripts.git
git pull tempScript master
git remotes
git remote
git pull TempScripts master
git pull TempScripts master -f
git pull -f TempScripts master
git commit

.\InitializeUserProfile.ps1
executeCommand
workbench.action.terminal.clear
$path
echo $path
code --version
echo 'I am ${env.USERNAME}.'
echo  ${env.USERNAME}.
echo  ${env.USERNAME}
echo  workbench.action.gotoSymbol
workbench.action.gotoSymbol
workbench.action.showWelcomePage
${command:markdownlint.fixAll}
code ${command:markdownlint.fixAll}
echo ${workspaceFolder}

git remotes
git remote add Gist2013 https://gist.github.com/0839153e8ee632b2b4463192038207f5
ls | select-object -property name
git add remote https://gist.github.com/perXautomatik/fbb1d3288dee53acb758d4f608f93873.js goal
git remote add https://gist.github.com/perXautomatik/fbb1d3288dee53acb758d4f608f93873.js goal
git remote add goal https://gist.github.com/perXautomatik/fbb1d3288dee53acb758d4f608f93873.js
Get-Content .\Todo.xml


'D:\PortableApps\4, windows enhance\PortableApps\AutoHotkeyPortable\Data\AutoHotkey.ahk'

ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\'
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\PdferAttArkivera\' | select -property name, LastWriteTime | ConvertTo-Csv > uppfoljning2021.csv
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\PdferAttArkivera\' | select -property name, LastWriteTime | ConvertTo-Csv > C:\Users\crbk01\Desktop\Todo-filer\uppfoljning2021.csv
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-36-mån-2021' 
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-36-mån-2021\filer' | select -property name, LastWriteTime | ConvertTo-Csv > C:\Users\crbk01\Desktop\Todo-filer\EmeddelandePåminnelse36mån2021.csv
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick'  | select -property name, LastWriteTime | ConvertTo-Csv > C:\Users\crbk01\Desktop\Todo-filer\paminnelse12man2020.csv
/. 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick'  
 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick'  
explorer 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick'  
explorer 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-36-mån-2021\filer'
explorer 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\'

datagrip.bat
./"D:\Program Files\JetBrains\DataGrip 2021.1\bin\datagrip64.exe" ;D:
./"D:\Program Files\JetBrains\DataGrip 2021.1\bin\datagrip64.exe"
cd "D:\Program Files\JetBrains\DataGrip 2021.1\bin"
.\datagrip64.exe
notepad datagrip.bat
datagrip.bat

C:
cd c:\user\crbk01\appdata
cd C:
cd ..
cd .\users\crbk01\AppData\
git add remote home "https://github.com/perXautomatik/AppData.git"
git remote add home "https://github.com/perXautomatik/AppData.git"
git add .gitignore
git commit "initial"
git commit 
cd D:\
echo  ${env.USERNAME}.
echo  ${env.USERNAME}
echo  workbench.action.gotoSymbol
workbench.action.gotoSymbol
workbench.action.showWelcomePage
${command:markdownlint.fixAll}
code ${command:markdownlint.fixAll}
echo ${workspaceFolder}
git remote
cd ..
d:
cd .. appdata
cd .\Users\crbk01\AppData\
git repack -a -d -f --depth=250 --window=250
git --assume-unchanged
git update-index --assume-unchanged
notepad .\.git\config
 man git-config
git update-index --ignore-missing
git repack -a -d -f --depth=250 --window=250
D: ; "D:\Project Shelf\PowerShellProjectFolder\Scripts"
D: ; cd "D:\Project Shelf\PowerShellProjectFolder\Scripts"
cd .\Excel\
notepad convert-xlsx-to-csv.ps1
. .\convert-xlsx-to-csv.ps1
ls D:\unsorted\Dump\
cd D:\unsorted\
git remote add Gist2013 https://gist.github.com/0839153e8ee632b2b4463192038207f5
ExcelToCsv -File .\fannyUtskick.xlsx
ls
ExcelToCsv -File "fannyUtskick.xlsx"
ExcelToCsv -File "D:\unsorted\fannyUtskick.xlsx"
ls
ls | select-object -property name
choco install powershell.portable
git add remote https://gist.github.com/perXautomatik/fbb1d3288dee53acb758d4f608f93873.js goal
git remote add https://gist.github.com/perXautomatik/fbb1d3288dee53acb758d4f608f93873.js goal
git remote add goal https://gist.github.com/perXautomatik/fbb1d3288dee53acb758d4f608f93873.js
Get-Content .\Todo.xml
.\regjump.exe HKEY_CURRENT_USER\Control Panel\Desktop\WindowMetrics
$q = .\CustomForm.ps1 ; $q; $q
$q = .\pshell\CustomForm.ps1 ; .\regjump.exe $q
$q = .\pshell\CustomForm.ps1 ;.\pshell\Elevate\SelfElevate.ps1 ".\regjump.exe $q"
.\pshell\Elevate\SelfElevate.ps1 "$q = .\pshell\CustomForm.ps1 ; .\regjump.exe $q"
$z= .\pshell\ExecutionPath\execution-folder.ps1 ; .\pshell\Elevate\SelfElevate.ps1 "cd $z ; $q = .\pshell\CustomForm.ps1 ; .\regjump.exe $q"
$z= .\pshell\ExecutionPath\execution-folder.ps1 ; .\pshell\Elevate\SelfElevate.ps1 "cd $z ; $q = .\pshell\CustomForm.ps1 ; .\regjump.exe $q ; wait-process"
$z= .\pshell\ExecutionPath\execution-folder.ps1 ; .\pshell\Elevate\SelfElevate.ps1 cd $z ; $q = .\pshell\CustomForm.ps1 ; .\regjump.exe $q ; wait-process
$z= .\pshell\ExecutionPath\execution-folder.ps1 ; .\pshell\Elevate\SelfElevate.ps1 'cd $z ; $q = .\pshell\CustomForm.ps1 ; .\regjump.exe $q ; wait-process'
$z= .\pshell\ExecutionPath\execution-folder.ps1 ; .\pshell\Elevate\SelfElevate.ps1 .'cd $z ; $q = .\pshell\CustomForm.ps1 ; .\regjump.exe $q ; wait-process'
$z= .\pshell\ExecutionPath\execution-folder.ps1 ; .\pshell\Elevate\SelfElevate.ps1 invoke-command "cd $z ; $q = .\pshell\CustomForm.ps1 ; .\regjump.exe $q ; wait-process"
$z= .\pshell\ExecutionPath\execution-folder.ps1 ; $com = "cd $z ; $q = .\pshell\CustomForm.ps1 ; .\regjump.exe $q ; wait-process" ; .\pshell\Elevate\SelfElevate.ps1 invoke-command $com
.\pshell\Elevate\SelfElevate.ps1 (.\regjump.exe (.\pshell\CustomForm.ps1))
$a= .\pshell\CustomForm.ps1; .\pshell\Elevate\SelfElevate.ps1 .\regjump.exe $a
$a= .\pshell\CustomForm.ps1; .\pshell\Elevate\SelfElevate.ps1 '.\regjump.exe $a'
$a= .\pshell\CustomForm.ps1; .\pshell\Elevate\SelfElevate.ps1 .\regjump.exe -param $a
.\execution-folder.ps1
(.\execution-folder.ps1).paremt
(.\execution-folder.ps1).parent
$q = .\execution-folder.ps1 ; $q.parent
$q = .\execution-folder.ps1 ; Split-path $q
$q = .\execution-folder.ps1 ; $t = Split-path $q ; split-path $t
.\check-if-files-contain-word.ps1 .\test.txt "HKEY_CURRENT_USER\Control Panel\Desktop\WindowMetrics"
.\check-if-files-contain-word.ps1 .\test.txt "HKEY_CURRENT_USER\Control Panel\Desktop\WindowMetrics2"
.\check-if-files-contain-word.ps1 .\test.txt "HKEY_CURRENT_USER\Control Panel\Desktop\WindowMetrics"
.\check-if-files-contain-word.ps1 .\test.txt "HKEY_CURRENT_USER\Control Panel\Desktop\WindowMetrics3"
.\check-if-files-contain-word.ps1 .\test.txt
.\xml2csv.ps1 -tag event_message -inputfile "C:\Users\crbk01\Desktop\Todo.xml"
.\xml2csv.ps1 -tag event_message -inputfile "C:\Users\crbk01\Desktop\Todo.xml" > "C:\Users\crbk01\Desktop\Todo2.csv"
.\xmltocsv.ps1 
. .\xmltocsv.ps1 
Convert-WebArchitect "C:\Users\crbk01\Desktop\Todo.xml", "C:\Users\crbk01\Desktop\Todo2.csv"
Convert-WebArchitect "C:\Users\crbk01\Desktop\Todo.xml" "C:\Users\crbk01\Desktop\Todo2.csv"
git remote add Gist https://gist.github.com/3c9712ba4663e49cbe3961eb67791ea0
git remote add Fujitsu https://github.com/perXautomatik/fujitsu-xml2csv
'D:\PortableApps\4, windows enhance\PortableApps\AutoHotkeyPortable\Data\AutoHotkey.ahk'
G:
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\'
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\PdferAttArkivera\'
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\PdferAttArkivera\' | select -property name, LastWriteTime
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\PdferAttArkivera\' | select -property name, LastWriteTime | ConvertTo-Csv > uppfoljning2021.csv
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\PdferAttArkivera\' | select -property name, LastWriteTime | ConvertTo-Csv > C:\Users\crbk01\Desktop\Todo-filer\uppfoljning2021.csv
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-36-mån-2021' 
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-36-mån-2021\filer' 
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-36-mån-2021\filer' | select -property name, LastWriteTime | ConvertTo-Csv > C:\Users\crbk01\Desktop\Todo-filer\EmeddelandePåminnelse36mån2021.csv
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick' 
ls 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick'  | select -property name, LastWriteTime | ConvertTo-Csv > C:\Users\crbk01\Desktop\Todo-filer\paminnelse12man2020.csv
/. 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick'  
 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick'  
explorer 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick'  
explorer 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-36-mån-2021\filer'
explorer 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\'
datagrip.bat
"DataGrip 2021.1 x64.lnk"
."DataGrip 2021.1 x64.lnk"
&"DataGrip 2021.1 x64.lnk"
./"DataGrip 2021.1 x64.lnk"
./"D:\Program Files\JetBrains\DataGrip 2021.1\bin\datagrip64.exe"
D:
./"D:\Program Files\JetBrains\DataGrip 2021.1\bin\datagrip64.exe"
cd "D:\Program Files\JetBrains\DataGrip 2021.1\bin"
.\datagrip64.exe
notepad datagrip.bat
datagrip.bat
git-subtree split --prefix=select/utbyte --branch=selectUtbyte
git subtree add
git subtree add "C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\49f168c8-015c-43d2-b9f4-06de275bdc15"
git subtree add "C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\49f168c8-015c-43d2-b9f4-06de275bdc15\.git"
git subtree --help
git subtree add "origin"
git subtree add --prefix "origin"
git subtree add --prefix "04e1a5bf0947f38ce30fec92e8d35a04f0e8af9f"
git subtree add --prefix /initial "origin" --squash
git subtree add --prefix /initial "origin" "origionz"
git subtree add --prefix=initial/ "origin" "origionz"
git subtree add --prefix=initialz/ "origin" "origionz"
touch .gitignore
git touch .gitignore
''> .gitignore
touch .gitignore
git add .gitignore
git commit -m "initial commit"
git remote add -f spoon-knife git@github.com:octocat/Spoon-Knife.git
git remote add -f spoon-knife "origin"
git remote add -f spoon-knifex "origin"
git remote 
git merge -s ours --no-commit --allow-unrelated-histories spoon-knife/main
git merge -s ours --no-commit --allow-unrelated-histories origin
git merge -s ours --no-commit --allow-unrelated-histories origin/main
git remote add -f spoon-knifeQ git@github.com:octocat/Spoon-Knife.git
git remote add -f spoon-knifeW git@github.com:octocat/Spoon-Knife.git
git remote 
git merge -s ours --no-commit --allow-unrelated-histories spoon-knife/main
git read-tree --prefix=spoon-knife/ -u spoon-knife/main
git commit -m "Subtree merged in spoon-knife"
git merge -s ours --no-commit --allow-unrelated-histories origin/main
git merge -s ours --no-commit --allow-unrelated-histories origin/master
git read-tree --prefix=origin/ -u origin/master
git read-tree --prefix=/ -u origin/master
''> .gitignore
git add .gitignore
git commit -m "initial commit"
git read-tree --prefix=/ -u origin/master ''> .gitignore
PS C:\Users\crbk01\Desktop\Ny mapp> git add .gitignore
PS C:\Users\crbk01\Desktop\Ny mapp> git commit -m "initial commit"
git remote add -f VisionFilInsert "C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\49f168c8-015c-43d2-b9f4-06de275bdc15\.git"
git fetch visionFilInsert/witouthIdeax
git fetch VisionFilInsert/withoutIDeax
git fetch VisionFilInsert
git read-tree --prefix=/ -u VisionFilInsert/withoutIDeax
git remote add -f selectUtbyte "C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\49f168c8-015c-43d2-b9f4-06de275bdc15\select\utbyte\.git"
git fetch selectUtbyte
git read-tree --prefix=select/utbyte/ -u selectUtbyte/master
git remote add -f PseudoUpdatera "C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\49f168c8-015c-43d2-b9f4-06de275bdc15\Pseudo\Updatera\.git"
git fetch PseudoUpdatera
git read-tree --prefix=Pseudo/Updatera/ -u PseudoUpdatera/master
git remote add -f PseudoSkapaH "C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\49f168c8-015c-43d2-b9f4-06de275bdc15\Pseudo\SkapaH\.git"
git fetch PseudoSkapaH
git read-tree --prefix=Pseudo/SkapaH/ -u PseudoSkapaH/master
git remote add -f PseudoUpdatera "C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\49f168c8-015c-43d2-b9f4-06de275bdc15\Pseudo\Updatera\.git"
git remote add -f PseudoCall "C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\49f168c8-015c-43d2-b9f4-06de275bdc15\Pseudo\call\.git"
git fetch PseudoCall
git read-tree --prefix=Pseudo/call/ -u PseudoCall/master
git remote add -f handToAr "C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\49f168c8-015c-43d2-b9f4-06de275bdc15\HandToAr\.git"
git fetch handToAr
git read-tree --prefix=HandToAr/ -u HandToAr/master
git remote add -f updateFileRef "C:\Users\crbk01\AppData\Local\Temp\48e52db1-5800-4ae8-8df3-9ce7ebb30d30\.git"
git fetch updateFileRef
git read-tree --prefix=updateFileRef/ -u updateFileRef/master
.\accessdatabaseengine_x64.exe /quiet
C:
cd c:\user\crbk01\appdata
cd C:
cd ..
cd .\users\crbk01\AppData\
git add remote home "https://github.com/perXautomatik/AppData.git"
git remote add home "https://github.com/perXautomatik/AppData.git"
git add .gitignore
git commit "initial"
git commit 
cd ..
d:
cd .. appdata
cd .\Users\crbk01\AppData\
git repack -a -d -f --depth=250 --window=250
git --assume-unchanged
git update-index --assume-unchanged
notepad .\.git\config
 man git-config
git update-index --ignore-missing
git repack -a -d -f --depth=250 --window=250
rm .\.git\
rm .\.git\ -f
rm .\.git\ -force
D: ; "D:\Project Shelf\PowerShellProjectFolder\Scripts"
D: ; cd "D:\Project Shelf\PowerShellProjectFolder\Scripts"
cd .\Excel\
notepad convert-xlsx-to-csv.ps1
. .\convert-xlsx-to-csv.ps1
ls D:
ls D:\
ls D:\unsorted
ls D:\unsorted\Dump\
cd D:\unsorted\

ExcelToCsv -File .\fannyUtskick.xlsx
ls
ExcelToCsv -File "fannyUtskick.xlsx"
ExcelToCsv -File "D:\unsorted\fannyUtskick.xlsx"
ls
git rm --cached 
git rm --cached -r
git rm --cached -r ...
git rm --cached -r app
git rm --cached -r \app\.*
git rm --cached -r /app/.*
git rm --help
git rm --cached -r "D:\PortableApps\PortableApps.com\Assets"
git rm --cached -r "D:\PortableApps\PortableApps.com\App"
git submodule list
git submodule foreach
start nginx
tasklist /fi "imagename eq nginx.exe"
curl localhost
nginx -s reload
.\nginx -s reload
curl localhost
.\nginx -s reload
curl localhost
.\nginx -s reload
curl localhost
.\nginx -s reload
curl localhost
.\nginx acces_log
.\nginx -s acces_log
.\nginx -s reload
curl localhost
curl localhost/root
curl localhost\root
curl \
choco uninstall powershell.portable
choco install regcool.portable

Gsubtree --prefix=Data -b split
git push C:\Users\crbk01\Desktop\lib-repo split:master
remote add AhkTempScripts https://github.com/perXautomatik/AHKtempScripts.git
git remote add AhkTempScripts https://github.com/perXautomatik/AHKtempScripts.git
git remote
git rm -r Data
git remote add AhkTempScripts https://github.com/perXautomatik/AHKtempScripts.git
git rm -r Data/Fork/CheckifProgIsRunning
git rm -r -force
git rm -r --force
git rm -r -f
git rm -rf data ; git add -A ; git commit -am "removing data folder" ; git subtree add --prefix=data split master
git rm -rf data ; git add -A ; git commit -am "removing data folder" ; git subtree add --prefix=data split master
git remote
git subtree add --prefix=data TempScripts master
git rm -rf data ; git subtree add --prefix=data TempScripts split
git add -A ; git commit -am "removing data folder" ; git subtree add --prefix=data TempScripts split
Gsubtree --prefix=consoles -b BestStructure
git remote add https://github.com/perXautomatik/VisionH-ndelserToEasyRead ProjectsNConsoles
git remote add ProjectsNConsoles https://github.com/perXautomatik/VisionH-ndelserToEasyRead
Gsubtree --prefix=scratches -b WorkScratch
git remote add Scratches https://github.com/perXautomatik/sql-getIndexes.git
git push C:\Users\crbk01\Desktop\lib-repo WorkScratch:master
git push C:\Users\crbk01\Desktop\lib-repo WorkScratch
git push C:\Users\crbk01\Desktop\lib-repo BestStructure
git pull C:\Users\crbk01\Desktop\lib-repo BestStructure
git remote add C:\Users\crbk01\Desktop\lib-repo DatagripUserSettings
git remote add DatagripUserSettings C:\Users\crbk01\Desktop\lib-repo 
get-content .\fillistToadd | %{ git add $_} ; git commit -am "further"
get-content .\fillistToadd | %{ git add $_} ; git commit -am "further"
get-content .\fillistToadd | %{ git add $_} ; git commit -am "further"
git remote add DatagripUserSettings C:\Users\crbk01\Desktop\lib-repo 
 git add .idea/workspace.xml -f ; git commit -am "further"
git remote add DatagripProjects https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git
Gsubtree --prefix=projects -b WorkProjekts
git push C:\Users\crbk01\Desktop\lib-repo WorkProjekts
git remote add DatagripUserSettings C:\Users\crbk01\Desktop\lib-repo 
get-content .\fillistToadd | %{ git add $_}; git commit -am "bout to merge with usersettings"
get-content .\fillistToadd | %{ git add $_ -f}; git commit -am "bout to merge with usersettings"
Gsubtree --prefix=ListAggregation\BookmarkFile.sqlite -b ToLargeToPush2
Gsubtree --prefix=ListAggregation -b ToLargeToPush3
git rm --cached --ignore-unmatch `git ls-files -i --exclude-standard`
git rm --cached --ignore-unmatch ;git ls-files -i --exclude-standard`
git rm --cached --ignore-unmatch ;git ls-files -i --exclude-standard
git remote add All https://github.com/perXautomatik/BeondCompare4.git
git remote 
git fetch All
git add .\Helpers\ -r
git add .\Helpers\ -n
.\nginx -s reload
curl localhost
curl direct_php_upstream
.\nginx -s reload
curl localhost
curl \
.\nginx -s reload
curl localhost
git add .\Helpers\ -fn
git add .\Helpers\ -f
git add .\packers\ -f
Gsubtree --prefix=ListAggregation\sqlite -b SqliteUrlNWord
Gsubtree --prefix=ListAggregation/sqlite -b SqliteUrlNWords
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\scratches SqliteUrlNWords
Gsubtree --prefix=ListAggregation/sqlite -b SqliteUrlNWordsz
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\scratches SqliteUrlNWordsz
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\ modularAttempt
get-content .\filelist | %{git rm --cached $_}
Gsubtree --prefix=consoles -b SqliteUrlNWord ; git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019.3con
Gsubtree --prefix=consoles -b 2019_3con ; git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019_3con
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019_3con-f
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019_3con -f
Gsubtree --prefix=consoles -b 2019_3con ; git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles 2019_3con
Gsubtree --prefix=projects -b 2019_3proj ; git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019_3proj
git add .\Helpers\ -fn
Gsubtree --prefix='Beyond Compare 4' -b oldFolder
.\jq64.exe
get-content 'C:\Users\dator\AppData\Local\Microsoft\Edge\User Data\Profile 2\Bookmarks' | .\jq.exe '.'
cls
Gsubtree --prefix=data -b homeData ; git push 'C:\Users\dator\Desktop\New folder (3)' homeData
Gsubtree --prefix=data -b homeData ; git push 'C:\Users\dator\Desktop\New folder (3)\.git' homeData
Gsubtree --prefix=data -b homeData 
Gsubtree --prefix=data -b ModularData 
Gsubtree --prefix=data -b homeData ; git push 'C:\Users\dator\Desktop\New folder (3)\.git' homeData
git push 'C:\Users\dator\Desktop\New folder (3)\.git' split
git rm -rf data
git remote add split 'https://github.com/perXautomatik/AHKtempScripts.git'
Gsubtree --prefix=AutoHotkey.ahk -b StandardScript
Gsubtree AutoHotkey.ahk -b StandardScript
Gsubtree -P AutoHotkey.ahk -b StandardScript
Gsubtree -P \AutoHotkey.ahk -b StandardScript
Gsubtree -Prefix=\AutoHotkey.ahk -b StandardScript
Gsubtree -Prefix='AutoHotkey.ahk' -b StandardScript
Gsubtree -Prefix='\AutoHotkey.ahk' -b StandardScript
Gsubtree -Prefix='/AutoHotkey.ahk' -b StandardScript
Gsubtree -Prefix=AutoHotkey -b StandardScript
Gsubtree -P AutoHotkey -b StandardScript
git remote add 'https://github.com/perXautomatik/PowerShellCmdHist.git' cmdHistX
git remote add cmdHistX 'https://github.com/perXautomatik/PowerShellCmdHist.git'
Gsubtree --prefix=consoles -b home_2021con
Gsubtree --prefix=scratches -b home_2021scr;Gsubtree --prefix=projects -b home_2021proj
Gsubtree --prefix=consoles -b home_2021con;Gsubtree --prefix=scratches -b home_2021scr;Gsubtree --prefix=projects -b home_2021proj
Gsubtree --prefix=consoles -b -f home_2021con;Gsubtree --prefix=scratches -b -f home_2021scr;Gsubtree --prefix=projects -b -f home_2021proj
Gsubtree --prefix=consoles -bf home_2021con;Gsubtree --prefix=scratches -bf home_2021scr;Gsubtree --prefix=projects -bf home_2021proj
Gsubtree --prefix=consoles -b home_2021con2;Gsubtree --prefix=scratches -b home_2021scr2;Gsubtree --prefix=projects -b home_2021proj2
git push home_2021con 'D:\2\New folder (2)\consoles';git push home_2021scr 'D:\2\New folder (2)\scratches';git push home_2021proj 'D:\2\New folder (2)\projects'
git push home_2021con 'D:\2\New folder (2)\consoles\.git';git push home_2021scr 'D:\2\New folder (2)\scratches';git push home_2021proj 'D:\2\New folder (2)\projects'
git push 'D:\2\New folder (2)\consoles\' home_2021con ;git push 'D:\2\New folder (2)\scratches' home_2021scr ;git push 'D:\2\New folder (2)\projects' home_2021proj 
git push 'D:\2\New folder (2)\consoles' home_2021con ;git push 'D:\2\New folder (2)\scratches' home_2021scr ;git push 'D:\2\New folder (2)\projects' home_2021proj 
git remote add 'https://github.com/perXautomatik/sql-getIndexes.git' WorkScratch
git remote add WorkScratch 'https://github.com/perXautomatik/sql-getIndexes.git'
git remote add HomeScratch 'D:\2\New folder (2)\scratches'
git remote add WorkConsoles 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git'
Gsubtree --prefix=Everything -b EverythingSettings

Resolve-Path -Relative (GitRoot)
split-path (GitRoot) -noqualifer | Resolve-Path -Relative 
split-path -path (GitRoot) -noqualifer | Resolve-Path -Relative 
split-path -path (GitRoot) -noQualifer | Resolve-Path -Relative 
split-path -path (GitRoot) -noQualifier | Resolve-Path -Relative 
split-path -path (GitRoot) -noQualifier | Resolve-Path ~ -Relative 
split-path -path (GitRoot) -noQualifier 

get-location
split-path -path get-location -noQualifier
choco install actiona.portable
RootNoDrive
Resolve-Path -path (split-path -path (GitRoot) -noQualifier)  -Relative (RootNoDrive)
choco install pathmanager.portable
Resolve-Path -path [io.path]::Combine((split-path -path (GitRoot) -noQualifier),(RootNoDrive))
[io.path]::Combine((split-path -path (GitRoot) -noQualifier),(RootNoDrive))
RootNoDrive
choco install tweakeze.portable
join-path -leaf (RootNoDrive) -parent 'C:'
join-path -child (RootNoDrive) -parent 'C:'
join-path -childpath (RootNoDrive) -path 'C:'
Resolve-Path -path (join-path -childpath (split-path -path (GitRoot) -noQualifier) -path 'C:'),(join-path -childpath (RootNoDrive) -path 'C:'))
Resolve-Path -path (join-path -childpath ((split-path -path (GitRoot) -noQualifier) -path 'C:'),(join-path -childpath (RootNoDrive) -path 'C:'))
choco install z-cron
.\nginx -s reload
curl localhost
.\nginx -s reload
cd ..
Gsubtree --prefix=db\8b7c273a-baa2-4933-a5d5-4862e23c0af2 -b AgarUpgifter
Gsubtree --prefix=db\8b7c273a-baa2-4933-a5d5-4862e23c0af2 -b AgarUpgifter
Gsubtree --prefix=db -b db
git push origin db

get-children
get-childitem -fullname
curl localhost
D:
cd "D:\portapps\9. browser Network Database\PortableApps\nginx-1.21.5"
nginx start
.\nginx start
start nginx
php -S localhost:3000
git subtree split --prefix=Data -b split
git push C:\Users\crbk01\Desktop\lib-repo split:master
remote add AhkTempScripts https://github.com/perXautomatik/AHKtempScripts.git
git remote add AhkTempScripts https://github.com/perXautomatik/AHKtempScripts.git
git remote
git rm -r Data
git remote add AhkTempScripts https://github.com/perXautomatik/AHKtempScripts.git
git rm -r Data
git rm -r Data/Fork/CheckifProgIsRunning
git rm -r -force
git rm -r --force
git rm -r -f
git rm -rf
git rm -rf data
git add -A
get-childitem | select fullname
filesInFol | %{Gsubtree --prefix=$_ -b $_}
filesInFol | %{Gsubtree --prefix=$_.toString() -b $_.toString()}
filesInFol | %{Gsubtree --prefix=($_.toString()) -b ($_.toString())}
filesInFol | tostring | %{Gsubtree --prefix=$_ -b $_}
git commit -am "removing data folder"
git subtree add --prefix=data split master
git rm -rf data
git add -A
git commit -am "removing data folder"
git subtree add --prefix=data split master
filesInFol | out-string | %{Gsubtree --prefix=$_ -b $_}
filesInFol | %{$_ out-string} | %{Gsubtree --prefix=$_ -b $_}
filesInFol | %{$_ | out-string} | %{Gsubtree --prefix=$_ -b $_}
filesInFol | %{$_ | out-string}
filesInFol | out-string | %{Gsubtree --prefix=$_ -b $_}
filesInFol | %{ out-string | Gsubtree --prefix=$_ -b $_}
filesInFol | %{ $_ out-string | Gsubtree --prefix=$_ -b $_}
filesInFol | %{ $_ | out-string | Gsubtree --prefix=$_ -b $_}
get-childitem | select-object name * out-string | %{ Gsubtree --prefix=$_ -b $_}
get-childitem | select-object name out-string | %{ Gsubtree --prefix=$_ -b $_}
get-childitem | select-object -property name out-string | %{ Gsubtree --prefix=$_ -b $_}
get-childitem | select-object -property name * out-string | %{ Gsubtree --prefix=$_ -b $_}
filesInFolAsStream | %{ Gsubtree --prefix=$_ -b $_}
filesInFolAsStream | %{ git push origion $_ }
filesInFolAsStream | %{ git push origon $_ }
git remote
git subtree add --prefix=data TempScripts master
git rm -rf data
git subtree add --prefix=data TempScripts split
git add -A
git commit -am "removing data folder"
git subtree add --prefix=data TempScripts split
git subtree split --prefix=consoles -b BestStructure
git remote add https://github.com/perXautomatik/VisionH-ndelserToEasyRead ProjectsNConsoles
git remote add ProjectsNConsoles https://github.com/perXautomatik/VisionH-ndelserToEasyRead
git subtree split --prefix=scratches -b WorkScratch
git remote add Scratches https://github.com/perXautomatik/sql-getIndexes.git
git push C:\Users\crbk01\Desktop\lib-repo WorkScratch:master
git push C:\Users\crbk01\Desktop\lib-repo WorkScratch
git push C:\Users\crbk01\Desktop\lib-repo BestStructure
git pull C:\Users\crbk01\Desktop\lib-repo BestStructure
git remote add C:\Users\crbk01\Desktop\lib-repo DatagripUserSettings
git remote add DatagripUserSettings C:\Users\crbk01\Desktop\lib-repo 
get-content .\fillistToadd
get-content .\fillistToadd | %{ git add $_}
git commit -am "further"
get-content .\fillistToadd | %{ git add $_}
filesInFolAsStream | %{ git rm --cached $_ -r }
git commit -am "further"
get-content .\fillistToadd | %{ git add $_}
git commit -am "further"
git remote add DatagripUserSettings C:\Users\crbk01\Desktop\lib-repo 
 git add .idea/workspace.xml
 git add .idea/workspace.xml -f
git commit -am "further"
filesInFolAsStream | %{ rm $_ ; git submodule add -b $_ -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$_" }
filesInFolAsStream | %{ rm $_ ; git submodule add -b -f -r $_ -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$_" }
filesInFolAsStream | %{ rm $_ -r ; git submodule add -b $_ -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$_" }

BranchToStream | %{ git submodule add -b $_ -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$_" }
BranchToStream | %{ git submodule add -b $_.trim() -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$_.trim()" }
BranchToStream | %{ $x = $_.trim(); git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
filesInFolAsStream | %{ git push origin $_ }
get-childitem | out-string -stream | %{ $x = $_.trim(); git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
get-childitem | out-string -stream | %{ $x = $_.trim(); Gsubtree --prefix=$x -b $x}
filesInFolAsStream | %{ $x = $_.trim(); Gsubtree --prefix=$x -b $x}
(UDPE).localPort
(Get-NetUDPEndpoint -LocalAddress local ).localPort | %{[int]$_} | %{Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess}
(Get-NetUDPEndpoint -LocalAddress.).localPort | %{[int]$_} | %{Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess}
git remote add DatagripProjects https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git
git subtree split --prefix=projects -b WorkProjekts
git push C:\Users\crbk01\Desktop\lib-repo WorkProjekts
git remote add DatagripUserSettings C:\Users\crbk01\Desktop\lib-repo 
get-content .\fillistToadd | %{ git add $_}; git commit -am "bout to merge with usersettings"
get-content .\fillistToadd | %{ git add $_ -f}; git commit -am "bout to merge with usersettings"
git subtree split --prefix=ListAggregation\BookmarkFile.sqlite -b ToLargeToPush
git subtree split --prefix=ListAggregation\BookmarkFile.sqlite -b ToLargeToPush2
git subtree split --prefix=ListAggregation -b ToLargeToPush3
git rm --cached --ignore-unmatch `git ls-files -i --exclude-standard`
git rm --cached --ignore-unmatch ;git ls-files -i --exclude-standard`
git rm --cached --ignore-unmatch ;git ls-files -i --exclude-standard
git remote 
git remote add All https://github.com/perXautomatik/BeondCompare4.git
git remote 
git fetch All
git add .\Helpers\ -r
git add .\Helpers\ -n
git add .\Helpers\ -fn
git add .\Helpers\ -f
git add .\packers\ -f
git subtree split --prefix=ListAggregation\sqlite -b SqliteUrlNWord
git subtree split --prefix=ListAggregation/sqlite -b SqliteUrlNWords
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\scratches SqliteUrlNWords
git subtree split --prefix=ListAggregation/sqlite -b SqliteUrlNWordsz
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\scratches SqliteUrlNWordsz
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\ modularAttempt
get-content .\filelist | %{git rm --cached $_}
git subtree split --prefix=consoles -b SqliteUrlNWord ; git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019.3con
git subtree split --prefix=consoles -b 2019_3con ; git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019_3con
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019_3con-f
git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019_3con -f
git subtree split --prefix=consoles -b 2019_3con ; git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles 2019_3con
git subtree split --prefix=projects -b 2019_3proj ; git push D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects 2019_3proj
echo "git add files from file" ; get-content 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content -Delimiter '\t' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; get-content -Delimiter '  ' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\s{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)(\s{2,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)([\s]{2,}|[\t\n]{1,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)([\s]{2,}|[\t\n]{1,})' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)([\s]{2,}|[\t\n]{1,})\r?\n' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '.{3}' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(.{3})' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(.*([\s]{2,}|[\t\n]{1,}))' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([^\t\n]{1,}([\s]{2,}|[\t\n]{1,}))' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt').Split('[\t\n]{1,}|[\s]{2,}')
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt').Split('  ')
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '[\t\n]{1,}|[\s]{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\[\t\n]{1,}|[\s]{2,}\'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '[\t\n]+|[\s]{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([\t\n]+|[\s]{2,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([\s]{2,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\s{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '[.][^.]{1,}\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '((?<=[.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=\.[^\.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s'
echo "Content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s'
echo "Git add content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "Git add content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,})\s' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,})\s'
echo "content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,7})\s'
>>>>>>> MassiveConsole
(Get-PSReadlineOption).HistorySavePath
Get-PSReadLineKeyHandler
Get-PSReadLineOption
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType SymbolicLink -Value "C:\Users\crbk01\AppData\Roaming\Mic...
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Hardlink -Value "C:\Users\crbk01\AppData\Roaming\Microso...
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Junction -Value "C:\Users\crbk01\AppData\Roaming\Microso...
(Get-PSReadlineOption).HistorySavePath
set-PSReadlineOption -HistorySavePath "C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
Set-PSReadLineOption -HistorySavePath C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt -HistorySaveStyle in...
Set-PSReadLineOption -HistorySavePath C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt -HistorySaveStyle sa...
(Get-PSReadlineOption).HistorySavePath
Get-PSReadLineOption
 [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState
cd "C:\Program Files\TortoiseGit\bin"
ls
.\TortoiseGitProc.exe
cd "C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\"
".\C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
.\"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
.\C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe
'.\C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe'
.\'C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe'
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
cd "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /path
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe -command repostatus -path C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
Import-Module ecoargs
Import-Module echoargs
Import-Module pscx
Install-Module -Name Pscx
echoargs &"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe -command repostatus -path C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
echoargs
Import-Module pscx
Import-Module -name pscx
<<<<<<< HEAD
$history = [System.Collections.ArrayList]([System.IO.File]::ReadAllLines((Get-PSReadlineOption).HistorySavePath))...                                         
get-history                                                                                                                                                  
get-history -Verbose                                                                                                                                         
get-history | select -commandline                                                                                                                            
get-history | select commandline                                                                                                                             
& $profile
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"
.\EchoArgs.exe 'notepad -a'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding Default ; "go" } >> 'C:/Users/crbk01/AppData/Roaming/JetBrains/DataGrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runConfig/Combined.sql'
choco install logexpert
cls
echo "csv, xlsx to "; D: ; "D:\Project Shelf\PowerShellProjectFolder\Scripts" ; cd .\Excel\ ;. .\convert-xlsx-to-csv.ps1 ; ExcelToCsv -File "D:\unsorted\fannyUtskick.xlsx"
echo "execute program" ; menu @(everything 'ext:exe lepton') | %{& $_ }
echo "ExecuteVba"; wscript '.\INI_sorted.vbs' 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\Helpers\Experimental\test.txt' 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\Helpers\Experimental\test'
echo "git ..Subtree Push" ; Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ;
echo "git ..Subtree then remove"; $x = 'repository' ; git subtree add --prefix=$x split $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
echo "git .alias" ; git config --global alias.lazy '!f() { git add -A && git commit -m "$@" && git push; }; f'
echo "git .Config Submodule summary" ; git config --global status.submoduleSummary true
=======
$history = [System.Collections.ArrayList]([System.IO.File]::ReadAllLines((Get-PSReadlineOption).HistorySavePath))...
get-history
get-history -Verbose
get-history | select -commandline
get-history | select commandline

>>>>>>> MassiveConsole
	cd C:\9dfe73ef\settingsRepository\repository
echo "git Subtree then remove"; $x = 'data' ; git subtree add --prefix=$x split $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
echo "git Subtree then remove"; $x = 'repository' ; git subtree add --prefix=$x split $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
git submodules
git submodule
git submodule db
git submodule db status
git submodule status db
git submodule status /db
git submodule status \db
cd db
git remote
(Split-Path -Parent $MyInvocation.MyCommand.Path)
$MyInvocation.MyCommand.Path
$env:path
Get-Command -CommandType externalscript
$env:path +=’;C:\install\'
echo 'Added scripts'; Get-Command -CommandType externalscript
echo "add to envPath" ; $x='C:\install\Scripts\'; $env:path +=’;$x'
echo 'Added scripts'; Get-Command -CommandType externalscript
$env:path
echo "add to envPath" ; $x='C:\install\Scripts\'; $env:path +=’;'+$x
$env:path
echo 'Added scripts'; Get-Command -CommandType externalscript
echo "make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -itemType SymbolicLink -path $y -target $x
echo "make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -itemTypeSymbolicLink -path $y -target $x
echo "make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -ItemType SymbolicLink -Path $y -target $x
echo "make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -ItemType SymbolicLink -Path "$y" -target "$x"
new-item -ItemType SymbolicLink -Path "D:\Documents\WindowsPowerShell" -target "C:\Users\crbk01\Documents"
echo 'userProfilePath'; $env:USERPROFILE
echo 'userProfilePath'; $env:USERPROFILE ; $PROFILE | Get-Member -Type NoteProperty
echo "git root path"; git rev-parse --show-toplevel
#echo "git SubmoduleAs branch"; $x = 'https://github.com/perXautomatik/sql-getIndexes.git' ;git submodule add -b $x
git submodule add -b
#echo "absorbGitDir" ;git submodule absorbgitdirs
cd ..
cd..
echo "absorbGitDir" ;git submodule absorbgitdirs scratches
echo "absorbGitDir" ;git submodule absorbgitdirs codestyles
cd projects
cd ..
echo "absorbGitDir" ;git submodule absorbgitdirs .\settingsRepository\
echo "absorbGitDir" ;git submodule absorbgitdirs .\settingsRepository\.git
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository\.git
echo "absorbGitDir" ;git submodule absorbgitdirs \settingsRepository\
echo "absorbGitDir" ;git submodule absorbgitdirs /settingsRepository/
echo "absorbGitDir" ;git submodule absorbgitdirs .\settingsRepository\
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository
cd .\settingsRepository\
cd .\repository\
git remote
git remote --list
git remote origin
git remote -v origin
git remote origin -v
git -v remote origin
git remote show origin
echo "Git Show origin"; git remote show origin
cd .. ..
cd ..
git submodule
git submodule -h
git branch
git submodule -b DGSettings -f --name DGSettings -- settingsRepository\repository
git submodule add -b DGSettings -f --name DGSettings -- settingsRepository\repository
git submodule add -b DGSettings -f --name DGSettings -- ./settingsRepository\repository/
#echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name DGSettings -- ./settingsRepository\repository/
#echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name DGSettings --reference 'https://github.com/perXautomatik/DatagripSettings.git' --path ./settingsRepository\repository/
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository/repository
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' --path ./settingsRepository/\repository/
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' -- ./settingsRepository/\repository/
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' -- ./settingsRepository/repository/
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' -- ./\settingsRepository\repository/
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' -- 'D:\Users\Crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\settingsRepository\repository\'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' 'D:\Users\Crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\settingsRepository\repository\'
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository
echo "absorbGitDir" ;git submodule absorbgitdirs
submodules
git submodules
git submodule
git rm --cached 'consoles/db/23be5c42-e61f-4ffe-a60b-4830fba04d23'
git submodule
git rm --cached 'consoles/db/39d10903-916f-4add-94c3-4526180c3416'
git submodule
git rm --cached 'consoles/db/39d10903-916f-4add-94c3-4526180c3416/../../.git/modules/db/modules/39d10903-916f-4add-94c3-4526180c3416'
git rm --cached 'consoles/db/'
git rm -r --cached 'consoles/db/'
git rm -f-r --cached 'consoles/db/'
git rm -fr --cached 'consoles/db/'
git submodule
git rm -fr --cached 'projects'
git submodule
echo "git remove every memmory"; git rm -fr --cached 'scratches'
git submodule
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
git submodule
git submodule -a
git submodule status
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' 'D:\Users\Crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\settingsRepository\repository\'
git submodule
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' ./settingsRepository\repository\/
git submodule
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' settingsRepository\repository
git submodule
echo "git Config Submodule summary" ; git config --global status.submoduleSummary true
<<<<<<< HEAD
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"
echo " filesInFolAsStream " ; get-childitem | out-string -stream
echo "bcompare" ; "$bComparePath\\BComp.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\"
echo "aliases, my personal" ; $profile.AllUsersAllHosts
echo "aliases, my personal" ; $profile.AllUsersCurrentHost
echo "aliases, my personal" ; Get-Alias -Definition alias* | select name
echo "aliases, my personal" ; $profile.CurrentUserAllHosts ; $profile
echo "aliases, my personal" ; Get-Alias
echo "aliases, my personal" ; Get-Alias -Definition alias* | select name, Definition
echo "aliases, my personal" ; MyAliases
echo "all psd1 files in module directories"; $q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | select -property values 
echo "appx packages" ; Get-AppXPackage -AllUsers | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
echo "bcompare" ; "C:\\Users\\crbk01\\Desktop\\WhenOffline\\BeondCompare4\\BComp.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\"
echo "browserflags"; vivaldi "vivaldi://flags"
echo "bsarch Fallout 4, vortex, modding" ; ."C:\Modding\Fallout4\fallout4\Tools\BSArch\bsarch.exe" pack meshes "No sleeves no shirts - meshes.bsa" -z -fnv -share -mt
echo "combine according to runconfig" ; [xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding UTF8 ; "go" } >> 'C:/Users/crbk01/AppData/Roaming/JetBrains/DataGrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runConfig/Combined.sql'
echo "combinePath" ; join-path -childpath (RootNoDrive) -path 'C:'
echo "count occurence/unique of words in all files" ; $hash = @{} ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $_.tolower()} | %{$hash[$_]++} ;  $sorted= %{$hash.GetEnumerator() | sort-object {[int]$_.value}} ; $sorted | where{$_.name -notmatch "^\d+$"} | where{$_.name.length -gt 4 }
echo "csv, xlsx to "; D: ; "D:\Project Shelf\PowerShellProjectFolder\Scripts" ; cd .\Excel\ ;. .\convert-xlsx-to-csv.ps1 ; ExcelToCsv -File "D:\unsorted\fannyUtskick.xlsx"
echo "Content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s'
echo "contentOfFileas array" ; get-content -Delimiter '  ' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "deleteAndKillProcess" ; Remove-Item -Path .\Code\ -Force -Recurse ; kill vscode; Stop-Process -Name vscode ; Remove-Item -Path .\Code\ -Force -Recurse ; takeown /F "C:\windows.old" /A /R /D Y
echo "echo "file association" ; assoc .py=Python.File
echo "echo text list cultures"; (Get-Culture).TextInfo.ListSeparator
echo "ecoArgs" ; Import-Module echoargs ; Install-Module -Name Pscx ;  echoargs &"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe -command repostatus -path C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
echo "execute program" ; menu @(everything 'ext:exe bcompare') | %{& $_ } 
echo "execute program" ; menu @(everything 'ext:exe lepton') | %{& $_ }
echo "ExecuteVba"; wscript '.\INI_sorted.vbs' 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\Helpers\Experimental\test.txt' 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\Helpers\Experimental\test'
echo "ExecutionPolicy"; Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
echo "file name rename where" ; Get-ChildItem G:\mhk -Recurse | Where-Object {$_.name -match "[^\)\w \\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]"} | rename-item -newName {$_.name -replace '[^\)\w\\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]','_'}
echo "File names Replace" ; (dir).name.replace(".doc","")
echo "get accelerators" ; [psobject].Assembly.GetType(“System.Management.Automation.TypeAccelerators”)::get
echo "get header esp,esm" ; ((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | ?{(((-join (gc .\FormiD.esp | select -first 3)) -replace "[^\w. ]{1,}","å").split("å") -match "^.*[.](esp|esm)$" | select -first 13) -NotContains $_}
echo "get install location" ; Get-WmiObject -Class Win32_Product -Filter 'Name like "%adobe%"' | Select Caption,InstallLocation ; Get-WmiObject -Class Win32_Product -Filter 'Name like "%acrobat reader%"' | Select Caption,InstallLocation ; Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation ; Get-ChildItem HKLM:\SOFTWARE\adobe | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation ; Get-ChildItem HKLM:\SOFTWARE\adobe\* | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation ; (Get-CimInstance -ClassName Win32_Product | Where-Object Name -Like "*acrobat reader*").InstallLocation
echo "get-vers" ; $PSVersionTable
echo "git ..Subtree Push" ; Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ;
echo "git ..Subtree then remove"; $x = 'repository' ; git subtree add --prefix=$x split $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
echo "git .alias" ; git config --global alias.lazy '!f() { git add -A && git commit -m "$@" && git push; }; f'
echo "git .Config Submodule summary" ; git config --global status.submoduleSummary true
echo "Git Ad exsiting path as submodule and branch" ; $x = '1781354c-8195-4b53-903a-bbf9b4558cb0' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "git Add as submodule" ; get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent} | unique | %{ git submodule add $_ -f }
echo "Git add content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,})\s' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content .\fillistToadd | %{ git add $_} ; git commit -am "further"
echo "git add files from file" ; get-content -Delimiter '\t' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git Alias" ; Set-Alias -Name git -Value powershell -ExecutionPolicy Unrestricted -Command "& 'D:\PortableApplauncher\Apps\.free\GitHubDesktopPortable\App\GitHubDesktop\app-2.9.5\resources\app\git\cmd\git.exe'"
echo "git bare" ; git --bare
echo "git currentBranches as submodules" ; BranchToStream | %{ $x = $_.trim()	; git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
echo "git foldersTobranches n submodules" ; filesInFolAsStream | %{ rm $_ -r 		; git submodule add -b $_ -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$_" }
echo "git initialize each folder with just .git"; filesInFolAsStream | %{ $x = $_.trim(); git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
echo "git new repos in each folder where" ; ls | Where-Object { $_.Name -notin 'PortableApps.com' }  | %{ git init $_ }
echo "git Remote path" ; ((git remote -v ) -split('[\s]')) | Where-Object { $_ -match 'https' } | unique
echo "git remove than ad ass subtree" ; git rm -rf data ; git add -A ; git commit -am "removing data folder" ; git subtree add --prefix=data split master
echo "git remove" ; git rm --cached -r "D:\PortableApps\PortableApps.com\Assets" ; git rm -r -f
echo "git split folder to subtrees" ; filesInFolAsStream | %{ $x = $_.trim(); Gsubtree --prefix=$x -b $x}
echo "git subtree then remove" ; $x = 'WindowsAdmin' ; git subtree split --prefix=$x -b $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
echo "git" ; $l = "git branch to submodule" ;$x='WindowsAdmin'; git submodule add -b $x -f -- (((git remote -v ) -split('[\s]')) | Where-Object { $_ -match 'https' } | unique) "$x" ; git commit -am $l+$x
echo "gitfetch all" ; git fetch All
echo "gitSubtree Push" ; Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ;
echo "hardlink"; mklink /D H:\Users\crbk01\.DataGrip2019.1 C:\Users\crbk01\.DataGrip2019.1
echo "history" ; (Get-PSReadlineOption).HistorySavePath ; Get-PSReadLineKeyHandler; Get-PSReadLineOption ; [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState ; get-history | select commandline
echo "OpenAsADmin" ; Start-Process powershell -Verb runAs
echo "ps appxPackages" ; Get-AppXPackage -AllUsers | Foreach {Add-AppxPackage -DisableDevelopm entMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
echo "ps module install"; powershell.exe -NoLogo -NoProfile -Command 'Install-Module -Name PackageManagement -Force -MinimumVersion 1.4.6 -Scope CurrentUser -AllowClobber'
echo "pscx history "; Import-Module -name pscx ; $history = [System.Collections.ArrayList]([System.IO.File]::ReadAllLines((Get-PSReadlineOption).HistorySavePath))...
echo "putty" ; putty ; Start-Process putty -ArgumentList 'Saved Session Name', 'Tower'
echo "reboot" ; shutdown /r
echo "reg Get installocation" ; Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninsta ll | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation
echo "resolve paths " ; Resolve-Path -path (join-path -childpath ((split-path -path (GitRoot) -noQualifier) -path 'C:'),(join-path -childpath (RootNoDrive) -path 'C:'))
echo "setHistorySavePath" ; set-PSReadlineOption -HistorySavePath "C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
echo "git Braches currentBranches as submodules" ; BranchToStream | %{ $x = $_.trim()	; git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
echo "git check git ignore on folder" ; ls | % {git check-ignore $_}
echo "Git Commit all, fetch all, push" ; Git add . ; Git commit -am 'PerparingForMerge' ; git fetch --all ; Git push origin
echo "Git commit path" ; Gitup -path 'C:\Users\crbk01\Documents\WindowsPowerShell\' -message 'functional'
echo "git Config Submodule summary" ; git config --global status.submoduleSummary true
echo "git currentBranches as submodules" ; BranchToStream | %{ $x = $_.trim()	; git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
echo "git fetch all" ; git fetch --all
echo "git foldersTobranches n submodules" ; filesInFolAsStream | %{ rm $_ -r 		; git submodule add -b $_ -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$_" }
echo "git Forget every memmory" ; $l = "git remove every memmory"; echo $l ; $x = 'scratches' ; Git forgetPath $x
echo "git Forget every memmory" ; $l = "git remove every memmory"; echo $l ; $x = 'scratches' ; git rm -fr --cached $x ; git commit -am $l+$x
echo "git Forget every memmory" ; $l = "git remove every memmory"; echo $l ; $x = 'scripts' ; git rm -fr --cached $x ; git commit -am $l+$x
echo "git Forget every memmory" ; $l = "remove every memmory of "; echo $l ; $x = 'scripts' ; git rm -fr --cached $x ; git commit -am $l+$x
echo "git Forget every memmory" ; $x = 'Modules' ;  $l = "remove every memmory of ";git forgetPath $x
echo "git Forget every memmory" ; $x = 'Scripts' ;  $l = "remove every memmory of ";git rm -fr --cached $x ; git commit -am $l$x
echo "git forget remove" ; git rm --cached -r "D:\PortableApps\PortableApps.com\Assets"
echo "git forgetIndex than ad ass subtree" ; git rm --cached -rf data ; git add -A ; git commit -am "removing data folder" ; git subtree add --prefix=data split master
echo "Git forgetMove Reste Don't think moving is deleting" ; git reset origin/master
echo "Git Head Re-Attach" ; git checkout -b temp-branch ; git checkout origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch -v
echo "git info root path"; git rev-parse --show-toplevel
echo "git init bare" ; git --bare
echo "git initialize each folder with just .git"; filesInFolAsStream | %{ $x = $_.trim(); git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
echo "git initialize each folder with just .git"; filesInFolAsStream | %{ $x = $_.trim(); git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
echo "git new repos in each folder where" ; ls | Where-Object { $_.Name -notin 'PortableApps.com' }  | %{ git init $_ }
echo "git new repos in each folder where" ; ls | Where-Object { $_.Name -notin 'PortableApps.com' }  | %{ git init $_ }
echo "git path as branch ..Subtree Push" ; Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ;
echo "git path as branch ..Subtree then forget"; $x = 'Modules' ; git pathToBranch $x ; git rm -rf --cached $x ; git commit -am "removing $x folder"
echo "git path as branch ..Subtree then remove"; $x = 'repository' ; git subtree add --prefix=$x split $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
echo "Git path as Branch and submodule" ; $leaf = 'Modules' ; GitAdEPathAsSNB -leaf $leaf -remote ThisGitRemote -branch $leaf
echo "Git path as Branch and submodule" ; $leaf = 'Modules'; $remote = ThisGitRemote ; GitAdEPathAsSNB -leaf $leaf -remote $remote -branch $leaf
echo "Git path as Branch and submodule" ; $leaf = 'Modules'; Git forgetPath $leaf ; $remote = ThisGitRemote ; GitAdEPathAsSNB -leaf $leaf -remote $remote -branch $leaf
echo "git path to branch Push" ; Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ;
echo "git paths Add as submodule" ; get-content .\gitConfigsToAddAsSubmodules.txt | %{ Split-Path -Path $_ -Parent} | %{ Split-Path -Path $_ -Parent} | unique | %{ git submodule add $_ -f }
echo "git paths add content of file split RegexLookAhead" ; $x = '(?<=[.][^\s.]{3,10})\s' ; $y = 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' ; (Get-Content -Raw  -path $y) -split $x  | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"echo "git add remote as submodule and clone to new folder"
=======
>>>>>>> MassiveConsole
cd .\settingsRepository\
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
cd ..
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
cd .\settingsRepository\
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' repository
git submodule
cd ..
git branch
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b WorkScratch -f --name 'Scraches' -- 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' Scratches
git submodule
echo "git remove every memmory"; git rm -fr --cached 'scratches'
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b WorkScratch -f --name 'Scraches' -- 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' scratches
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b ProjectsNConsoles -f --name 'consoles' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' consoles
echo "git remove every memmory"; git rm -fr --cached 'consoles'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b ProjectsNConsoles -f --name 'consoles' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' consoles
git submodule
echo "absorbGitDir" ;git submodule absorbgitdirs
cd consoles
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b db -f --name 'db' -- 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' db
cd db
git submodule
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "git remove every memmory"; git rm -fr --cached '1781354c-8195-4b53-903a-bbf9b4558cb0'
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "git remove every memmory"; git rm -fr --cached 6163ad17-589f-4530-969d-00e2cf1af340
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "git remove every memmory"; git rm -fr --cached 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "git remove every memmory"; git rm -fr --cached a922a8bc-6602-44d4-8ab2-a4062fc64d99
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b 947f2b47-af0c-4354-9696-9462b1a4bf8b -f --name '947f2b47-af0c-4354-9696-9462b1a4bf8b' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "git remove every memmory"; git rm -fr --cached 49f168c8-015c-43d2-b9f4-06de275bdc15
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b 947f2b47-af0c-4354-9696-9462b1a4bf8b -f --name '947f2b47-af0c-4354-9696-9462b1a4bf8b' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "git remove every memmory"; git rm -fr --cached .\947f2b47-af0c-4354-9696-9462b1a4bf8b\
echo "git remove every memmory"; git rm -fr --cached 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "git remove every memmory"; git rm -fr --cached '947f2b47-af0c-4354-9696-9462b1a4bf8b'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b 947f2b47-af0c-4354-9696-9462b1a4bf8b -f --name '947f2b47-af0c-4354-9696-9462b1a4bf8b' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "git remove every memmory"; git rm -fr --cached '6163ad17-589f-4530-969d-00e2cf1af340'
echo "git remove every memmory"; git rm -fr --cached 'a922a8bc-6602-44d4-8ab2-a4062fc64d99'
echo "git remove every memmory"; git rm -fr --cached '1781354c-8195-4b53-903a-bbf9b4558cb0'
echo "git remove every memmory"; git rm -fr --cached '6163ad17-589f-4530-969d-00e2cf1af340'
git submodule
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name '$x' -- $y '$x'
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name '$x' -- $y '$x'
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "git remove every memmory"; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "git remove every memmory"; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "git remove every memmory"; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; git rm -fr --cached $x
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "Git Ad exsiting path as submodule and branch" ; $x = '1781354c-8195-4b53-903a-bbf9b4558cb0' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "git remove every memmory"; $x = '1781354c-8195-4b53-903a-bbf9b4558cb0' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = '1781354c-8195-4b53-903a-bbf9b4558cb0' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule
echo "Git Ad exsiting path as submodule and branch" ; $x = '6163ad17-589f-4530-969d-00e2cf1af340' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "absorbGitDir" ;git submodule absorbgitdirs
cd ..
git submodule
<<<<<<< HEAD
echo "git paths add files from file" ; get-content .\fillistToadd | %{ git add $_} ; git commit -am "further"
echo "git paths Every commit"; cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  ) | %{ gitSilently ; $_ }
echo "git paths Everything lazy push all repos on every harddrive" ; cd C:\ ; (EveryGitRepo | select-object -bottom 1 | sort-object -Property Length -Descending ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
echo "git paths Everything lazy push all repos on every harddrive" ; cd C:\ ; (EveryGitRepo | select-object -bottom 1 | sort-object -Property Length -Descending ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
echo "git paths Everything lazy push all repos on every harddrive" ; cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
echo "git paths foldersTobranches n submodules" ; filesInFolAsStream | %{ rm $_ -r ; git submodule add -b $_ -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$_" }
echo "git paths initialize each folder with just .git"; filesInFolAsStream | %{ $x = $_.trim(); git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
echo "git paths new repos in each folder where" ; ls | Where-Object { $_.Name -notin 'PortableApps.com' }  | %{ git init $_ }
echo "git paths split folder to subtrees" ; filesInFolAsStream | %{ $x = $_.trim(); Gsubtree --prefix=$x -b $x}
echo "git remote add and merge"; $l = "add remote and merge" ; $x='felixReuseberg' ; $y = 'https://github.com/perXautomatik/windows-development-environment-1.git' ; git remote add $x $y ; git remote -v ; git fetch --all ; git pull $x master --allow-unrelated-histories  ; git commit -m $l+$x
echo "git remote add and merge"; $l = "add remote and merge" ; $x='powershellprofile' ; $y = 'https://gist.github.com/a030dae32c0a6b86a8099ce04eb58586' ; git remote add $x $y ; git remote -v ; git fetch --all ; git pull $x master --allow-unrelated-histories  ; git commit -m $l+$x
echo "Git Re-Attach Head" ; git checkout -b temp-branch ; git checkout origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
echo "git remote add" ; git remote add Personal 'https://github.com/perXautomatik/AHKtempScripts'
echo "git Remote path" ; ((git remote -v ) -split('[\s]')) | Where-Object { $_ -match 'https' } | unique
echo "git Remote path" ; ((git remote -v ) -split('[\s]')) | Where-Object { $_ -match 'https' } | unique
echo "git Remote path" ; ThisGitRemote
echo "Git remote Show origin"; git remote show origin
echo "git Remotes as psobject" ; ( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url )
echo "git remove than ad ass subtree" ; git rm -rf data ; git add -A ; git commit -am "removing data folder" ; git subtree add --prefix=data split master
echo "git remove than ad ass subtree" ; git rm -rf data ; git add -A ; git commit -am "removing data folder" ; git subtree add --prefix=data split master
echo "git remove" ; git rm --cached -r "D:\PortableApps\PortableApps.com\Assets" ; git rm -r -f
echo "git remove" ; git rm --cached -r "D:\PortableApps\PortableApps.com\Assets" ; git rm -r -f
echo "git set global ignore" ; git config --global core.excludesfile 'H:\.config\git\ignore'
echo "Git silently do a command" ; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 )
echo "git split folder to subtrees" ; filesInFolAsStream | %{ $x = $_.trim(); Gsubtree --prefix=$x -b $x}
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
echo "Git submodule Ad $leaf as from $remote and branch $branch" ; GitAdEPathAsSNB -leaf 'projects' -remote 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' -branch 'DatagripProjects'
echo "Git submodule Ad $leaf as from $remote and branch $branch" ; GitAdEPathAsSNB -leaf 'scratches' -remote 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' -branch 'scratches'
echo "Git submodule Ad $leaf as from $remote and branch $branch" ; GitAdEPathAsSNB -leaf 'sqlite' -remote 'https://github.com/perXautomatik/Datagrip-UserFolder.git' -branch 'sqlite'
echo "Git submodule Ad exsiting path as and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' 'D:\Users\Crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\settingsRepository\repository\'
echo "Git submodule Ad exsiting path as and branch" ; git submodule add -b ProjectsNConsoles -f --name 'consoles' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' consoles
echo "git SubmoduleAs branch"; $x = 'https://github.com/perXautomatik/sql-getIndexes.git' ;git submodule add -b $x
echo "git subtree then remove" ; $x = 'WindowsAdmin' ; git subtree split --prefix=$x -b $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
echo "git" ; $l = "git branch to submodule" ;$x='WindowsAdmin'; git submodule add -b $x -f -- (((git remote -v ) -split('[\s]')) | Where-Object { $_ -match 'https' } | unique) "$x" ; git commit -am $l+$x
echo "gitfetch all" ; git fetch All
ThisGitRemote
=======
>>>>>>> MassiveConsole
echo "absorbGitDir" ;git submodule absorbgitdirs
cd ..
echo "absorbGitDir" ;git submodule absorbgitdirs
cd .\projects\
git submodule
cd ..
git branches
git branch
echo "Git Ad exsiting path as submodule and branch" ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name $x -- $y $x
echo "git remove every memmory"; $x = 'projects' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name $x -- $y $x
git submodule
echo "Git Ad exsiting path as submodule and branch" ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x
echo "git remove every memmory"; $x = 'projects' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x
install-module PSEverything
Everything
choco install everything
Everything
install-module PSEverything
Search-Everything -Extension cs
Search-Everything -Extension cs | measure-object
Search-Everything -Extension 'cs' | measure-object
Search-Everything 'a' | measure-object
Search-Everything -Include ATL -Extension natvis
Search-Everything -Include ATL
Search-Everything a | measure-object
C:
Search-Everything a | measure-object
Search-Everything -Include ATL -Extension natvis
Search-Everything -Extension 'cs' | measure-object
Search-Everything -Extension 'dir' | measure-object
Search-Everything ext:dir | measure-object
Search-Everything 'dir:' | measure-object
Search-Everything dir: | measure-object
Search-Everything folder: | measure-object
Search-Everything folder: .git | measure-object
Search-Everything 'folder: .git' | measure-object
Search-Everything folder: '.git' | measure-object
Search-Everything <folder: '.git'> | measure-object
Search-Everything --function
Search-Everything --help
pseverything --help
Search-Everything child:.git | measure-object
Search-Everything 'child:.git' | measure-object
Search-Everything -child .git | measure-object
add remote home https://github.com/perXautomatik/EverythingSettings.git
git add remote home https://github.com/perXautomatik/EverythingSettings.git
git remote add home https://github.com/perXautomatik/EverythingSettings.git
git fetch -all
git fetch --all
Search-Everything -child .git !C:\users\Crbk01\AppData\Local\Temp | measure-object
Search-Everything -child .git !"C:\users\Crbk01\AppData\Local\Temp" | measure-object
Search-Everything -child .git <!"C:\users\Crbk01\AppData\Local\Temp"> | measure-object
Search-Everything -child .git !"C:\users\Crbk01\AppData\Local\Temp" | measure-object
Search-Everything -child .git "!C:\users\Crbk01\AppData\Local\Temp" | measure-object
Search-Everything -child .git -and !C:\users\Crbk01\AppData\Local\Temp | measure-object
PSEverything.SearchEverythingCommand
cat PSEverything.SearchEverythingCommand
Search-Everything -child .git -ExcludePath C:\users\Crbk01\AppData\Local\Temp | measure-object
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp | measure-object
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp -PathExclude C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp,C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp,'C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp,C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp|C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -Exclude 'C:\users\Crbk01\AppData\Local\Temp C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where-Object -match '!onedrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | filter -match '!onedrive'
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ).filter -match '!onedrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where-Object -notcontains 'onedrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where-Object -property path -notcontains 'onedrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where-Object -property path -notcontains 'OneDrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | format
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | format-list
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' |  Get-Member -Parameter *
Search-Everything Get-Member -Parameter *
Search-Everything Get-Member
Search-Everything Get-Member *
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ).GetType()
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -match '!OneDrive'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -match 'OneDrive'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'OneDrive'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GithubDesktop\app'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GitHubDesktop\app'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GitHubDesktop.app'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GitHubDesktop.app'} | Where{ $_ -notmatch 'Microsoft VS Code._.resources.app' }
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GitHubDesktop.app'} | Where{ $_ -notmatch 'Microsoft VS Code._.resources.app' } | Where{ $_ -notmatch 'Installer.resources.app.node_modules' }
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules' }
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions' }

<<<<<<< HEAD
echo " filesInFolAsStream " ; get-childitem | out-string -stream
echo "ps module install"; powershell.exe -NoLogo -NoProfile -Command 'Install-Module -Name PackageManagement -Force -MinimumVersion 1.4.6 -Scope CurrentUser -AllowClobber'
echo "gitSubtree Push" ; Gsubtree --prefix=PSReadline -b CmdHist ; git push D:\AppData\Roaming\Microsoft\Windows\PowerShell CmdHist ;
echo "hardlink"; mklink /D H:\Users\crbk01\.DataGrip2019.1 C:\Users\crbk01\.DataGrip2019.1
echo "history" ; (Get-PSReadlineOption).HistorySavePath ; Get-PSReadLineKeyHandler; Get-PSReadLineOption ; [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState ; get-history | select commandline
echo "import tab separated values" ; ConvertFrom-csv -Delimiter `t
echo "ps appxPackages" ; Get-AppXPackage -AllUsers | Foreach {Add-AppxPackage -DisableDevelopm entMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
echo "file name rename where" ; Get-ChildItem G:\mhk -Recurse | Where-Object {$_.name -match "[^\)\w \\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]"} | rename-item -newName {$_.name -replace '[^\)\w\\\-:.åäöÅÄÖ %\{,~$\(!@¤£é&=#§]','_'}
echo "reg Get installocation" ; Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninsta ll | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation
echo "csv, xlsx to "; D: ; "D:\Project Shelf\PowerShellProjectFolder\Scripts" ; cd .\Excel\ ;. .\convert-xlsx-to-csv.ps1 ; ExcelToCsv -File "D:\unsorted\fannyUtskick.xlsx"
echo "execute program" ; menu @(everything 'ext:exe lepton') | %{& $_ }
echo "ExecuteVba"; wscript '.\INI_sorted.vbs' '$bComparePath\Helpers\Experimental\test.txt' '$bComparePath\Helpers\Experimental\test'
echo "ExecuteVba"; wscript '.\INI_sorted.vbs' 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\Helpers\Experimental\test.txt' 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\Helpers\Experimental\test'
echo "List PowerShell's Environmental Variables" ; Get-Childitem -Path Env:* | Sort-Object Name
echo "list roots" ; EverythingGitRoots
echo "list roots" ;$ressult = @() ; $roots = Search-Everything -filter 'child:.git' | sort -property length ; $roots | %{ $r = $_ ; if(($ressult.where{$r -like "$_*"}).count -eq 0 ){$ressult+=$r}  } ; $ressult | sort
echo "list roots" ; EverythingGitRoots
echo "make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -ItemType SymbolicLink -Path "$y" -target "$x"
echo "Navigate to history" ; (Get-PSReadlineOption).HistorySavePath |  Split-Path -Parent | %{explorer $_}
echo "netw putty" ; putty ; Start-Process putty -ArgumentList 'Saved Session Name', 'Tower'
echo "open Ahk" ; menu @(everything 'path:ext:ahk !$ \data\') | %{. $_ }
echo "open path by Everything select" ; menu @(everything 'path: !$ power profile ') | Split-Path -Parent | %{explorer $_}
echo "open path by Everything select" ; menu @(everything 'path:wildcards:child:*histor* power ') | Split-Path -Parent | %{explorer $_}
echo "open path by Everything select" ; menu @(everything 'path:wildcards:child:*historu*  !$ power ') | Split-Path -Parent | %{explorer $_}
echo "open path by Everything select" ; menu @(everything 'path:wildcards:child:.git child:*historu*  !$ power ') | Split-Path -Parent | %{explorer $_}
echo "open workspace office" ; menu @(everything 'path:ext:code-workspace !$ office') | %{. $env:code $_ -add 'Markagare_gronplan.xlsx'}
echo "open workspace xml" ; menu @(everything 'path:ext:code-workspace !$ xml') | %{. $env:code $_ -add 'C:\Users\crbk01\AppData\Local\Temp\TortoiseGit\BCFileFormats-2bc3a1de.002.xml'}
echo "OpenAsADmin" ; Start-Process powershell -Verb runAs
echo "parameters" ;  Get-Member -Parameter *
echo "path combinePath" ; join-path -childpath (RootNoDrive) -path 'C:'
echo "path make link OLd"; mklink /D H:\Users\crbk01\.DataGrip2019.1 C:\Users\crbk01\.DataGrip2019.1
echo "path make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -ItemType SymbolicLink -Path "$y" -target "$x"
echo "paths resolve" ; Resolve-Path -path (join-path -childpath ((split-path -path (GitRoot) -noQualifier) -path 'C:'),(join-path -childpath (RootNoDrive) -path 'C:'))
echo "pdfa" ; Start-Process -FilePath java -ArgumentList '-jar pdfa-x.y.z.jar'
echo "Process deleteAndKill" ; Remove-Item -Path .\Code\ -Force -Recurse ; kill vscode; Stop-Process -Name vscode ; Remove-Item -Path .\Code\ -Force -Recurse ; takeown /F "C:\windows.old" /A /R /D Y
echo "ps .envPath add to " ; $x='C:\install\Scripts\'; $env:path +=’;'+$x
echo "ps .ExecutionPolicy"; Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
echo "ps appxPackages" ; Get-AppXPackage -AllUsers | Foreach {Add-AppxPackage -DisableDevelopm entMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
echo "ps ecoArgs"; echoargs &"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe -command repostatus -path C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
echo "ps history" ; (Get-PSReadlineOption).HistorySavePath ; Get-PSReadLineKeyHandler; Get-PSReadLineOption ; [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState ; get-history | select commandline
echo "ps info Added scripts"; Get-Command -CommandType externalscript
echo "ps info get-vers" ; $PSVersionTable
echo "ps info paths to Ps profiles" ; $PROFILE | Format-List -Force
echo "ps Name of current folder" ; (get-location | split-path -leaf)
echo "ps module install"; powershell.exe -NoLogo -NoProfile -Command 'Install-Module -Name PackageManagement -Force -MinimumVersion 1.4.6 -Scope CurrentUser -AllowClobber'
echo "ps open gridview"; 'a,c' | Out-GridView -PassThru
echo "ps profile" ; notepad $((Split-Path $profile -Parent) + "\profile.ps1")
echo "ps pscx history "; $history = [System.Collections.ArrayList]([System.IO.File]::ReadAllLines((Get-PSReadlineOption).HistorySavePath))...
echo "ps userProfilePath"; $env:USERPROFILE ; $PROFILE | Get-Member -Type NoteProperty
echo "pscx history "; Import-Module -name pscx ; $history = [System.Collections.ArrayList]([System.IO.File]::ReadAllLines((Get-PSReadlineOption).HistorySavePath))...
echo "putty" ; putty ; Start-Process putty -ArgumentList 'Saved Session Name', 'Tower'
echo "reboot" ; shutdown /r
echo "reboot" ; shutdown /r
echo "reg Get installocation" ; Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninsta ll | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation
echo "reg Get installocation" ; Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninsta ll | % { Get-ItemProperty $_.PsPath } | Select DisplayName,InstallLocation
echo "RegexLookAhead content of file split " ; $x = '(?<=[.][^\s.]{3,10})\s' ; $y = 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' ; (Get-Content -Raw  -path $y) -split $x
echo "resolve paths " ; Resolve-Path -path (join-path -childpath ((split-path -path (GitRoot) -noQualifier) -path 'C:'),(join-path -childpath (RootNoDrive) -path 'C:'))
echo "search ConsolHistory" ;$path = aliasPshellHistoryPath; menu @( get-content $path | where{ $_ -match 'lepton' }) | %{Invoke-Expression $_ }
echo "setHistorySavePath" ; set-PSReadlineOption -HistorySavePath "C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > '&2>&1' ) } catch { "Error" } ; if (!$error) { $_ } }
echo "split file by linenr" ; $InputFilename = Get-Content '.\gron.csv' ; $OutputFilenamePattern = 'output_done_'; $LineLimit = 60 ; $line = 0;$i = 0;$file = 0;$start = 0;while ($line -le $InputFilename.Length) { if ($i -eq $LineLimit -Or $line -eq $InputFilename.Length) {;        $file++;        $Filename = "$OutputFilenamePattern$file.csv";        $InputFilename[$start..($line - 1)] | Out-File $Filename -Force;        $start = $line;;        $i = 0;        Write-Host "$Filename";    };   $i++;;    $line++;};;
echo "sql-server" ; Get-SqlInstance -Credential $Credential
echo "start jar " ; Start-Process -FilePath java -ArgumentList '-jar pdfa-x.y.z.jar -h'
echo "todo : list 10 most commited ; commit push 10 most commited"
echo "tortoisegitproc" ; &"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"
echo "Update Lazy status every gits" ; cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  ) |%{ cd $_ ; [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = gitSingleRemote } }| select path,remote,line | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
echo "Update Lazy status every gits" ; cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  ) |%{ cd $_ ; [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = gitSingleRemote } }| select path,remote,line | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
echo "Vscode Workspace and add file" ; $x='\n' ; $q =(out-string -InputObject(everything 'path:ext:code-workspace !$ ahk')) -split $x ; convert-path $q[0].trim() | convert-path | %{. $env:code $_ --add 'D:\PortableApps\4. windows enh\PortableApps\AHK\Data\.gitmodules.~'}
echo "Update Lazy status every gits" ; cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  ) |%{ cd $_ ; [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = gitSingleRemote } }| select path,remote,line | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"

echo "reboot" ; shutdown /r
=======

>>>>>>> MassiveConsole
git ls-files --functions
git ls-files --functions -c
git ls-files -c projects
git ls-files -cz projects
git ls-files projects
git ls-files -u projects
git ls-files --debug projects
git ls-files --with-tree projects
git ls-files --resolve-undo projects
git ls-files --killed projects
git ls-files --staged projects
git ls-files --stage projects
git ls-files -o projects
git ls-files -ot projects
git rm "projects/.idea - genv\303\244g.lnk"
git rm 'projects/.idea - genv\303\244g.lnk'
git rm 'projects\.idea - genv\303\244g.lnk'
git rm -rf 'projects\.idea - genv\303\244g.lnk'
git rm -rf 'projects\.idea - genväg.lnk'
git ls-files -ot projects
git rm "projects/.idea - genväg.lnk"
git rm -rf "projects/.idea - genväg.lnk"
git rm --function
echo "git remove every memmory"; $x = 'projects' ; git rm -fr --cached $x
cd .\projects\
git submodule
git rm -rf --cached ".idea - genväg.lnk"
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x ; git commit -m $l+$x
cd ..
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x ; git commit -m $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'scratches' ; git rm -fr --cached $x ; git commit -m $l $x
$l = "git remove every memmory"; echo $l ; $x = 'scratches' ; git rm -fr --cached $x ; git commit -m $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'projects' ; git rm -fr --cached $x ; git commit -m $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'settingsRepository' ; git rm -fr --cached $x ; git commit -m $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x ; git commit -m $l+$x
git submodule
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches -f --name 'scratches' -- $y $x ; git commit -m $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'scratches' ; git rm -fr --cached $x ; git commit -m $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches -f --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'scratches' ; git rm -fr --cached $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches -f --name 'scratches' -- $y $x ; git commit -am $l+$x
cd scratches
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches -f --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -fb WorkScratches --name 'scratches' -- $y $x ; git commit -am $l+$x
cd ..
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -fb WorkScratches --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches --name 'scratches' -- $y $x ; git commit -am $l+$x
git submodule
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule --function
git submodule init -- scratches
git submodule deinit --all
cd consoles
git commit -am 'x'
cd ..
git submodule deinit --all
git submodule deinit --all --chached
git submodule deinit --all --cached
git submodule deinit --cached
git submodule deinit -f
git submodule deinit --all -f
git commit -am 'x'
git submodule
echo "absorbGitDir" ;git submodule absorbgitdirs
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches --force --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add --force --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -f --name 'DatagripProjects' -- $y $x ; git commit -m $l+$x

<<<<<<< HEAD
echo "history" ; (Get-PSReadlineOption).HistorySavePath ; Get-PSReadLineKeyHandler; Get-PSReadLineOption ; [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState ; get-history | select commandline
echo "setHistorySavePath" ; set-PSReadlineOption -HistorySavePath "C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
echo "pscx history "; Import-Module -name pscx ; $history = [System.Collections.ArrayList]([System.IO.File]::ReadAllLines((Get-PSReadlineOption).HistorySavePath))...
echo "putty" ; putty ; Start-Process putty -ArgumentList 'Saved Session Name', 'Tower'
=======
>>>>>>> MassiveConsole
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions' } | measure-object
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)' } | measure-object
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)' } | sort -length
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)' } | sort-object -Property Length
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycke.Bin' } | sort-object -Property Length
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length - descending
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending -first 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending -last 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending -Last 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | sort-object -Last 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -Last 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | git add . ; git commit -a -m "test" ;git push --all
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | cd $_ ; git add . ; git commit -a -m "test" ;git push --all
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | cd | git add . ; git commit -a -m "test" ;git push --all
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1)
cd (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1)
cd (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | git add . ; git commit -a -m "test" ;git push --all
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1)
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | cd
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | convert-path | cd
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | convert-path -path $_ | cd
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | %{convert-path -path $_} | cd
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | %{convert-path -path $_}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | %{CD $_}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | %{CD $_ | git add . ; git commit -a -m "test" ;git push --all}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 10) | %{CD $_ | git add . ; git commit -a -m "test" ;git push --all}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 100) | %{CD $_ | git add . ; git commit -a -m "test" ;git push --all}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . ; git commit -a -m "test" ;git push --all}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | @(git add . ) *> $x; @(git commit -a -m "test") *> $y; @(git push --all) *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> [array]$x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $x[array]  ; CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@()  ; CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() [array]$z =@()  ; CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ | git add . | out-string *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ ; $x = ( git add . ) -join "`n" ; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ ; ( git add . ) -OutVariable x  ; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ ;  git add .  -OutVariable x  ; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = . { CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = &{ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = cmd /c &{ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} '2>1' ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = &{ CD $_ ; cmd /c git add . '2>&1' ; git commit -a -m "test" ;git push --all}  ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = &{ CD $_ ; cmd /c git add . '2>&1' ; cmd /c git commit -a -m "test" '2>&1' ; cmd /c git push --all '2>&1' }  ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = &{ cmd /c CD $_ '2>&1' ; cmd /c git add . '2>&1' ; cmd /c git commit -a -m "test" '2>&1' ; cmd /c git push --all '2>&1' }  ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *>> add.log; git commit -a -m "test" *>> commit.log ;git push --all -porcelain >> push.log }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *>> $_+'\add.log'; git commit -a -m "test" *>> $_+'\commit.log' ;git push --all -porcelain >> $_+'\push.log' }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $_+'\add.log'; git commit -a -m "test" *> $_+'\commit.log' ;git push --all -porcelain > $_+'\push.log' }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $_'\add.log'; git commit -a -m "test" *> $_'\commit.log' ;git push --all -porcelain > $_'\push.log' }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $_'\add.log'; git commit -a -m "test" *> $_'\commit.log' ;git push --all --porcelain > $_'\push.log' }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $_'\add.log'; git commit -a -m "test" *> $_'\commit.log' ;git push --all --porcelain > $_'\push.log' ; $object = ${ Get-Content add.log -First 1; add.log -First 1;  add.log -First 1 } ; $object }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $object = ${ Get-Content add.log -First 1; add.log -First 1;  add.log -First 1 } ; $object }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = Get-Content add.log -First 1; commit = add.log -First 1; push= add.log -First 1 } ; $anotherObj }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content add.log -First 1); commit = (add.log -First 1); push= (add.log -First 1 )} ; $anotherObj }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content "\add.log" -First 1); commit = ( get-content "\add.log" -First 1); push= (get-content "\add.log" -First 1 )} ; $anotherObj }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\add.log" -First 1); push= (get-content ".\add.log" -First 1 )} ; $anotherObj }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )} }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ Out-Null -inputObject(CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )} } )
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ Out-Null -inputObject(CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )})}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ Out-Null -inputObject(CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log') ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ Out-Null -inputObject(CD $_ | git add . *>> $_'\add.log');Out-Null -inputObject( git commit -a -m "test" *>> $_'\commit.log' );Out-Null -inputObject(git push --all --porcelain >> $_'\push.log') ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $x = ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $x = ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $x}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ cls$x = ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $x}
cls

<<<<<<< HEAD
echo "get-vers" ; $PSVersionTable

echo "OpenAsADmin" ; Start-Process powershell -Verb runAs
echo "hardlink"; mklink /D H:\Users\crbk01\.DataGrip2019.1 C:\Users\crbk01\.DataGrip2019.1
echo "bcompare" ; "C:\\Users\\crbk01\\Desktop\\WhenOffline\\BeondCompare4\\BComp.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\"
=======
>>>>>>> MassiveConsole
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | git lazy 'test'
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; git lazy 'test'}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; git lazy 'test' *>> $x ; $x}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; git lazy 'test' *>> $x ; $ob = @{ path=$_;mes=$x} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; git lazy 'test' *>> $x ; $ob = [psCustomObject] @{ path=$_;mes=$x} ; $ob}
<<<<<<< HEAD
echo "browserflags"; vivaldi "vivaldi://flags"
get-service

&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"


echo "ecoArgs" ; Import-Module echoargs ; Install-Module -Name Pscx ;  echoargs &"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe -command repostatus -path C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
echo "vscode" ; .\InitializeUserProfile.ps1 ; executeCommand ; workbench.action.terminal.clear ; code --version ; echo 'I am ${env.USERNAME}.' ; echo  workbench.action.gotoSymbol ; workbench.action.gotoSymbol ; workbench.action.showWelcomePage ; code ${command:markdownlint.fixAll} ; echo ${workspaceFolder}
echo "File names Replace" ; (dir).name.replace(".doc","")

echo "vscodeExtensionsExport" ;  code --list-extensions > vsc-extensions.txt
echo "deleteAndKillProcess" ; Remove-Item -Path .\Code\ -Force -Recurse ; kill vscode; Stop-Process -Name vscode ; Remove-Item -Path .\Code\ -Force -Recurse ; takeown /F "C:\windows.old" /A /R /D Y
echo "what pulse program paths" ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query 
echo "whatPulse aplictions" ; $ht2 = @{} ; $query = "select rightstr(path,instr(reverse(path),'/')-1) exe,path from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t  |  get-member
echo 'psobject to hasttable' ; $theObject.psobject.properties | Foreach { $ht2[$_.Name] = $_.Value }
Install-Module PSEverything
Select-Xml -Path 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml'
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t | select exe
echo "open prolasso"; menu @(everything 'ext:exe lasso') | %{. $_ } | split-path -leaf | explorer
echo "search ConsolHistory" ;$path = aliasPshellHistoryPath; menu @( get-content $path | where{ $_ -match 'lepton' }) | %{Invoke-Expression $_ }
echo "ExecutionPolicy"; Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
echo "execute program" ; menu @(everything 'ext:exe bcompare') | %{& $_ } 
Get-Alias
 & $profile
Get-Alias -name alias*
Get-Alias -name *alias
Get-Alias -Definition alias*
echo "aliases, my personal" ; Get-Alias -Definition alias* | select name
echo "aliases, my personal" ; Get-Alias -Definition alias* | select name, Definition
echo "list 10 most commited ; commit push 10 most commited"
pastDoEdit 'root'
echo "get git content of config files in subfolders" ; get-childitem -dir | %{ get-childitem -file $_ } | ?{$_.name -eq 'config'} | %{get-content $_} | ?{$_ -match 'worktree'}
Invoke-WebRequest -Uri 'https://gist.githubusercontent.com/GeoffreyPlitt/43e251364182f12c8d7f/raw/393e8b659d666bcfc6ed566baa2edba6a4dd341f/convert_url_files_to_bookmarks.sh' -OutFile convert_url_files_to_bookmarks.sh
get-childitem -Recurse | select fullname | %{get-content -path $_.fullname } | ?{ $_ -match 'function' } | select -Unique | set-clipboard
import-module 'Personal\ini'
Get-Command -Module 'ini'
byRunconfig -path 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kv-FlaggGenerering\.idea\runConfigurations\SeparateFileTempTableKvUtsök.xml'   -output 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\a922a8bc-6602-44d4-8ab2-a4062fc64d99\Kv-FlaggGenerering\xUtsökningSocken.sql' -split
every-replace 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\.git\modules\consoles\modules\db\modules\ config' 'worktree = ../../../../../db/' 'worktree = ../../../../../../../consoles/db/'
& 'C:\Users\crbk01\Documents\PowerShell\Modules\Personal\sql\byRunConfig\byRunconfig.ps1' -path 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kv-FlaggGenerering\.idea\runConfigurations\SeparateFileTempTableKvUtsök.xml'   -output 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\a922a8bc-6602-44d4-8ab2-a4062fc64d99\Kv-FlaggGenerering\xUtsökningSocken.sql' -split
Get-Package | select -Unique Id, Versions
Install-Module PS-Menu
chocolatey list -localonly ; Get-Package ; Get-InstalledModule -AllVersions -AllowPrerelease | select name, version, source
$c = chocolatey list -localonly ; $q = Get-Package ; $t = get-module -ListAvailable |  ? {$_.path -inotmatch 'windows'} | ?{$_.path -notcontains $q.name } | select name, version, path  ; $u = $c+$q ; $u | select name
Get-ChildItem -file | get-content | %{$_.trim().toLower()} | ?{$regex = '^function ' ;$_ -match $regex} | select -Unique | Set-Clipboard
$moduleDir = ($profile | split-path -Parent ) | join-path -ChildPath 'modules\personal' ; get-childitem -dir $moduleDir | ? {(get-childitem -Path $_ -file | select name ) -match '.*.psd1'} 
echo "set encoding" ; $a = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\förbud 2-21\TillVision21-LyckadeUtskick-DiarieUpdelat\lyckat21.csv' ; (Get-Content -path $a) | Set-Content -Encoding UTF32 -Path $a
executeThis 'ext:exe sql book'
executeThis 'pdf bookmarks'
vsWorkspace 'text' "D:\Documents\bookmarks.txt"
executeThis 'pdf sam'
get-childitem -path 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2022\tillvision22\pdfer' | %{ $_.basename.split('-')[2]} | %{ "select $_ union" } | set-clipboard
vsWorkspace 'ps1' "D:\Project Shelf\PowerShellProjectFolder\scripts\joinJsonbookmarks.ps1"
echo "git path as branch ..Subtree then forget"; $x = '.idea' ; invoke-GitSubmoduleSplit -leaf $x -branch 'ideaFolder' ; git rm -rf --cached $x ; git commit -am "removing $x folder"
echo "git path as submodule ..from remote"; $x = '.idea' ; invoke-GitSubmoduleAdd -leaf $x -branch 'ideaFolder' -remote (invoke-gitRemote)
pastDoEdit 
cls
pastDoEdit 'split'
pastDoEdit 'runconfig'
vsWorkspace 'ps1' $historyPath
pastdo 'ahk'
cd .. D:\documents
cd D:\documents
Export-Alias > aliases.txt
Export-Alias -path 'aliases.txt'
.\ParseScriptCommands.ps1
pastDoEdit 'runconfig'
cls
pastDoEdit 'root'
EverythingGitRoots
echo "aliases, my personal" ; Get-Alias -Definition alias* | select name
echo "aliases, my personal" ; MyAliases
$profile.CurrentUserAllHosts
$profile.CurrentUserAllHosts ; $profile
$profile.AllUsersCurrentHost
$profile.AllUsersAllHosts
& 'C:\Users\crbk01\Documents\PowerShell\Modules\Personal\sql\byRunConfig\byRunconfig.ps1' -path 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml'   -output 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\8b7c273a-baa2-4933-a5d5-4862e23c0af2\runConfig\Combined.sql' -split
& 'C:\Users\crbk01\Documents\PowerShell\Modules\Personal\sql\byRunConfig\byRunconfig.ps1' -path 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml'   -output 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\8b7c273a-baa2-4933-a5d5-4862e23c0af2\runConfig\Combined.sql' -join
. 'C:\Users\crbk01\Documents\PowerShell\Modules\Personal\sql\byRunConfig\byRunconfig.ps1' ; byRunconfig -path 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml'   -output 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\8b7c273a-baa2-4933-a5d5-4862e23c0af2\runConfig\Combined.sql' -split
pastdo 'ahk'
search-everything -filter 'ext:ahk' -sort "Date Accessed"
search-everything -filter 'ext:exe everything' 
everything 'everything ext:exe'
'C:\Program Files\Everything\Everything.exe' -search 'ext:ahk limit:1' -sort "Date Modified"
'C:\Program Files\Everything\Everything.exe' -filter 'ext:ahk limit:1' -sort "Date Modified"
& 'C:\Program Files\Everything\Everything.exe' -filter 'ext:ahk limit:1' -sort "Date Modified"
& 'C:\Program Files\Everything\Everything.exe' -search 'ext:ahk limit:1' -sort "Date Modified"
& 'C:\Program Files\Everything\Everything.exe' -search 'ext:ahk count:1' -sort "Date Modified"
& 'C:\Program Files\Everything\Everything.exe' -search 'ext:ahk count:1' -sort "Date Modified" -sort-descending
'C:\Program Files\Everything\Everything.exe' -search 'ext:ahk count:1' -sort "Date Modified" -sort-descending
echo "open everything search 1 ressult sorted" ; & 'C:\Program Files\Everything\Everything.exe' -search 'ext:ahk count:1' -sort "Date Modified" -sort-descending
Get-Alias
$pwd
echo "vscode" ; .\InitializeUserProfile.ps1 ; executeCommand ; workbench.action.terminal.clear ; code --version ; echo 'I am ${env.USERNAME}.' ; echo  workbench.action.gotoSymbol ; workbench.action.gotoSymbol ; workbench.action.showWelcomePage ; code ${command:markdownlint.fixAll} ; echo ${workspaceFolder}
echo "xlsx to csv"; D: ; "D:\Project Shelf\PowerShellProjectFolder\Scripts" ; cd .\Excel\ ;. .\convert-xlsx-to-csv.ps1 ; ExcelToCsv -File "D:\unsorted\fannyUtskick.xlsx"
join-path -Path $pwd -ChildPath 'setPaths.ps1'
echo "combinePath" ; join-path -childpath (RootNoDrive) -path 'C:'
=======
cls
>>>>>>> MassiveConsole
[int[]]$c = 1,2,3,4,5
[int[]]$c = 1,2,3,4,5 ;$c
[int[]]$c = 1,2,2,3,4,5 ;$c
[int[]]$c = 1,2,2,3,4,2,5 ;$c
[string[]]$c = "1,2,2,3","4,2,5" ;$c
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c <<* ( git lazy 'test')  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = ( git lazy 'test')  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = "","" ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob.values}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob.values | count-object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob.values | count-objects }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob.values | Measure-Object }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; cmd /c git lazy 'test' '2>&1' $c ; $c }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c git lazy 'test' '2>&1' .\lazy.log ; $c  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c git lazy 'test' '2>&1' .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c git lazy 'test' '2>&1' '.\lazy.log'  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c git lazy 'test' '2>&1' $_\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') '2>&1' $_\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 2>&1 $_\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 2>&1> .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 3>&1> .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 3>&1 2>&1 > .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') *> .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 6> .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 2>&1 .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') '2>&1>' .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c "(git lazy 'test') '2>&1>' .\lazy.log"  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c "git lazy 'test' '2>&1>' .\lazy.log"  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c "git lazy 'test' 2>&1> .\lazy.log"  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-Null -inputObject (cmd /c "git lazy 'test' 2>&1> .\lazy.log")  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-Null -inputObject (cmd /c "git lazy 'test' 2>&1> .\lazy.log") ;Get-Content lazy.log -First 1 }
cd C:\ ; (Search-Everything -wholeword -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -MatchWholeWord -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; ((Search-Everything -MatchWholeWord -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (cmd /c git lazy 'test') ;Get-Content lazy.log -First 1 }
cd C:\ ; ((Search-Everything -MatchWholeWord -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;Get-Content lazy.log -First 1 }
cd C:\ ; ((Search-Everything -MatchWholeWord -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q }
cd C:\ ; ((Search-Everything -MatchWildcards -child *.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q }
cd C:\ ; (Search-Everything -Wildcards -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -wildcards -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child wildcards:*.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child -wildcards:*.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child <wildcards:*.git> -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child "wildcards:*.git" -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child *.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Modifiers wildcards )
cd C:\ ; (Search-Everything -child *.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter wildcards )
cd C:\ ; (Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "wildcards:child:*.git"   )
cd C:\ ; (Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "wildcards:child:*.git" ) | Measure-Object
cd C:\ ; (Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Measure-Object
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q } | object-where line -eq 'git : fatal: not a git repository:'
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q } | where-object line -eq 'git : fatal: not a git repository:'
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=(Get-Content lazy.log -First 1).substring(0,40) ; path = $_} ; $q } | where-object line -eq 'git : fatal: not a git repository:'
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=(Get-Content lazy.log -First 1).substring(0,40) ; path = $_} ; $q }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=(Get-Content lazy.log -First 1).substring(0,40) } ; $q }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=(Get-Content lazy.log -First 1).substring(0,40) } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ))
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
echo "git absorbGitDir" ;git submodule absorbgitdirs
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | select-object -top 1 | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | select-object -head 1 | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }

<<<<<<< HEAD
echo "resolve paths " ; Resolve-Path -path (join-path -childpath ((split-path -path (GitRoot) -noQualifier) -path 'C:'),(join-path -childpath (RootNoDrive) -path 'C:'))

& $profile
echo "git path as branch ..Subtree then remove"; $x = 'Modules' ; git subtree add --prefix=$x split $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
git subtree pull --prefix external/Modules Modules master
git subtree pull --prefix Modules Modules master
git subtree pull --prefix Modules
echo "git path as branch ..Subtree then forget"; $x = 'Modules' ; git subtree add --prefix=$x split $x ; git rm -rf --cached $x ; git commit -am "removing $x folder"
echo "git path as branch ..Subtree then forget"; $x = 'Modules' ; git subtree split --prefix $x --branch=$x ; git rm -rf --cached $x ; git commit -am "removing $x folder"
echo "git path as branch ..Subtree then forget"; $x = 'Modules' ; git pathToBranch $x ; git rm -rf --cached $x ; git commit -am "removing $x folder"
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
echo "git path as branch ..Subtree then forget"; $x = 'Modules' ; git pathToBranch $x ; git rm -rf --cached $x ; git commit -am "removing $x folder"
$profile
split-path $profile -Parent
everything 'user app data datagrip'
everything 'user app datagrip'
everything 'user app '
everything '\user\ \app \datagrip'
everything '\user\ \app '
everything '\user\ \app \proj'
everything '\user\ \app proj'
everything 'datagrip proj'
explorer 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\.git\modules\DatagripProjects'
cd 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\.git\modules\DatagripProjects'
cd ..
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' ProjectsNConsoles
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' ProjectsNConsoles.AdressUtsokning
$profile
& $profile
. $profile
Get-Module -ListAvailable
Get-Module -ListAvailable | Import-Modue
Get-Module -ListAvailable | Import-Module
Get-Module -ListAvailable | %{ Import-Module $_ }
everything 'psm1 \modules\'
Install-Module PSEverything
everything 'psm1 \modules\'
Search-Everything -filter 'ext:psm1'
Search-Everything -filter 'ext:psm1 \module'
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' ref/heads/projectsnconsoles/adressutsokning
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' ref/tags/MajorDelete
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xFilToVision
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' XAdresserFrånX
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' X61bb35151746a03d27579a81
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xDatagrip2019.1config
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xKvÄgarupgifter
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xLivsmedel
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xMånsBrunnsarkiv
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xmaster
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xProjectsNConsoles/X8b7c273a-baa2-4933-a5d5-4862e23c0af2
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xProjectsNConsoles/XAdressUtsokning
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xrefHeadProjectsNConsolesAdressUtsokning
git push 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects' xS0002-208
git resolve
git --help
executeThis 'git ext'
executeThis 'git ext'
executeThis everything
pastDo
pastDo 'everything.*.exe'
$profile
split-path -path $profile -parent
echo "open profile folder" ; explorer (split-path -path $profile -parent)
ls
& .\sqlite.ps1
$query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)"
$path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db"
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | select exe, path
echo "open profile folder" ; explorer (split-path -path $profile -parent)
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | select exe, path
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query 
executeThis lepton
pastDo ahk
=======

>>>>>>> MassiveConsole
echo "Git Show origin"; git remote show origin
 git remote -v
 git remote -v | | Tee-Object -Variable proc | "x"; $proc
 git remote -v | Tee-Object -Variable proc | "x"; $proc
 git remote -v | Tee-Object -Variable proc | out-host "x"; $proc
 git remote -v | Tee-Object -Variable proc | echo "x"; $proc
 git remote -v | Tee-Object -Variable proc ; echo "x"; $proc
out-null( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc | split ' '
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc.split ' '
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc.split(' ')
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc.split('\s\t')
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc -split '\t'
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc -split '[\t\s]'
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc |ConvertTo-Csv
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc | convertTo-Json
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc -split '[\t\s]' | convertTo-csv
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc -split '[\t\s]' | convertTo-Json
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{ $proc -split '[\t\s]'; New-Object PSObject -Property @{ Orign = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{ $proc -split '[\t\s]'; New-Object PSObject -Property @{ Orign = $proc[0].Trim();  url = $proc[1].Trim();  type = $proc[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{ $properties = $proc -split '[\t\s]'; New-Object PSObject -Property @{ Orign = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{ $properties = $proc -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{$proc - split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
cd C:\ ; (EveryGitRepo | select-object -last 1 | sort-object -Property Length -Descending ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; (EveryGitRepo | select-object -last 1 | sort-object -Property Length -Descending ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  } ; $q | select path,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -last 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  } ; $q | select path,line }
 git remote -v
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -rng 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  } ; $q | select path,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -random 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  } ; $q | select path,line }
"git Remotes as psobject" ; out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -random 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  ; remote= (out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }) | select-object -first 1 | select url } ; $q | select path,url,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -random 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  ; remote= (out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })} ; $q | select path,url,line }
"git Remotes as psobject" ; out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url
"git Remotes as psobject" ; ( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url )
( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url )
$w = out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ; $w
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -rng 1 ) | %{gitSilently; $w = out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; $w = out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending ) | %{gitSilently; $w = out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line }
( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url )
$qz = ( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ); $qz
$qz = out-null -InputObject( ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ); $qz
$qz = out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ); $qz
$qz = out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $qz
$qz = out-null -InputObject(( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $qz
$qz = (( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $qz
(( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $qz
( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url
out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url
${out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url }
@{out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url }
{out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url }
out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url )
out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url );
out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $w
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim(); url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
'C:\Users\crbk01\Desktop\Status.csv' get-content
get-content 'C:\Users\crbk01\Desktop\Status.csv'
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD'
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | select path
cd 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\8f2409be-00e3-417b-acf5-a6adeae9e0b8'
git branch
git remote branch
git remote -v
git branch -b
git branch -v
git branch -l
git branch -a
git checkout remotes/origin/8f2409be-00e3-417b-acf5-a6adeae9e0b8
git branch acTemp 55235b5
cd 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
explorer 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git merge --function
git merge remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781
git index --function
git show-index
cls
<<<<<<< HEAD
pastDo ahk
pastDo 'ahk'
executeThis 'ditto'
pastDo 'pdfsam'
executeThis 'pdf sam'
cd 'C:\Users\crbk01\Desktop\lalalala'
get-childitem | ?{$_.name -match '.pdf'}
everything 'aren ext:exe'
Every-Menu 'aren ext:exe'
& (Every-Menu 'aren ext:exe') -h
(Every-Menu 'aren ext:exe') -h
$q = (Every-Menu 'aren ext:exe') ; $q -h
$q = (Every-Menu 'aren ext:exe') ; & $q -h
$q = (Every-Menu 'aren ext:exe') ; . $q -h
echo "advance renamer commandline" ; $q = (Every-Menu 'arenc ext:exe') ; . $q -h
get-childitem | ?{$_.name -match '.pdf'} > fileList ; $q = (Every-Menu 'arenc ext:exe') ; . $q -files fileList
get-childitem | ?{$_.name -match '.pdf'} > fileList ; $q = (Every-Menu 'arenc ext:exe') ; . $q -files fileList -v
get-childitem | ?{$_.name -match '.pdf'} > fileList ; $q = (Every-Menu 'arenc ext:exe') ; . $q -files fileList -v -e (Every-Menu 'ext:aren')
explorer ($profile | split-path -Parent)
explorer $home
ipconfig.exe
pastDo 'pdf book'
pastDo 'vs book'
pastDo 'book'
pastDo 'pdf book'
pastDo 'pdf sam'
pastDoEdit 'git config'
pastDo 'ps1'
vsWorkspace 'ps1' $profile
pastDo 'ps1'
TortoiseProc.exe
pastDo 'code'
pastDo 'book'
cls
pastDo ahk
=======
git log
git log HEAD
git status
echo "Git Re-Attach Head" ;git checkout -b temp-branch ; git checkout remote/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git branch -a
echo "Git Re-Attach Head" ; #git checkout -b temp-branch ; git checkout remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git checkout remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git commit -m 'Reatached head'
echo "Git Re-Attach Head" ; git checkout -b temp-branch ; git checkout remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git status
echo "Git Re-Attach Head" ; git checkout -b temp-branch ; git checkout origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git status
git sync -function
git push 'origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git push 9bf5f6bc-10c6-4831-8b5e-6c51fbeae781 'remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git push 'origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781' 'remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git push --function
git push  --repo 'remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git push  --repo 'remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781' Head
git checkout 9bf5f6bc-10c6-4831-8b5e-6c51fbeae781
cls
>>>>>>> MassiveConsole
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | select path
$gmc
$gmc.BaseName
$pwd.BaseName
get-location
(get-location).baseName
get-location.baseName
(get-location | select path ).baseName
(get-location | select path )
[path](get-location | select path)
$MyInvocation.MyCommand.Path
$MyInvocation.MyCommand.Path.baseName
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ $_.path.baseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ $_.path }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ ($_.path).BaseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ ($_.path | convert-path).BaseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | convert-path
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | convert-path | %{ $_.baseName}
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  | %{ convert-path -path $_ }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ convert-path -path $_ }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ convert-path -path $_.path }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ (convert-path -path $_.path).baseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ $q=convert-path -path $_.path; $q.baseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ $q=convert-path -literalPath $_.path; $q.baseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  convert-path -literalPath $_
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  convert-path -literalPath $_.path
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ convert-path -literalPath $_.path }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ convert-path -literalPath $_.path } | select baseName
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ convert-path -literalPath $_.path } | split-path -leaf
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | split-path -leaf
cd ..
cd 58e93225-fbe8-4239-b061-0a7800085c08
git rev-parse --quiet --verify 58e93225-fbe8-4239-b061-0a7800085c08
cls
<<<<<<< HEAD
pastDo ahk
pastDoEdit ahk
=======
>>>>>>> MassiveConsole
git rev-parse --verify 58e93225-fbe8-4239-b061-0a7800085c08
git rev-parse --verify remotes\origin\58e93225-fbe8-4239-b061-0a7800085c08
git rev-parse --function
git rev-parse
git rev-parse --branches
cl
cls
<<<<<<< HEAD
echo "open Ahk" ; menu @(everything 'path:ext:ahk !$ parent:\data\ ') | %{. $_ }
echo "open Ahk" ; menu @(everything 'wildcards:path: !$ parent:*\data\ ext:ahk') | %{. $_ }
echo "open Ahk" ; menu @(everything 'regex:".*\\data\\[^\\]*.ahk"') | %{. $_ }
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query 
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | where { $_.exe -match 'autohotkey'}
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | converttocsv
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | ConvertTo-Csv
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | ConvertTo-json
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | %{$_.toString()}
echo "what pulse program paths" ; $query = "select path, rightstr(path,instr(reverse(path),'/')-1) exe from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | ConvertFrom-StringData
pastDoEdit 'para'     
& $profile
. $profile
.\$profile
 $profile
&$profile
run $profile
echo "parameters" ;  Get-Member -Parameter *
pastDoEdit 'para'
echo "what pulse program paths" ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Get-Member -Parameter *
($query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query ) Get-Member -Parameter *
($query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query ) | Get-Member -Parameter *
echo "what pulse program paths" ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query 
=======
>>>>>>> MassiveConsole
git rev-list
git rev-list --branches
git rev-list --branches --object-name
git rev-list --remotes
 split-path -leaf
$MyInvocation.MyCommand.Path
get-location
get-location | split-path -leaf
echo "ps Name of current folder" ; (get-location | split-path -leaf)
git checkout (get-location | split-path -leaf)
git branch tempb 16a142a
git branch tempb 16a142a ; git checkout (get-location | split-path -leaf) ; git merge tempb
git push (get-location | split-path -leaf)
git push origin (get-location | split-path -leaf)
git branch -d tempb
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | split-path -leaf
cd ..
cd 709a4445-290f-4e66-85a4-4c3ca208e964
git checkout tempz ; git checkout (get-location | split-path -leaf) ; git merge tempz ; git branch -d tempz ; git push origin (get-location | split-path -leaf)
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ cd $_ ; git checkout tempz ; git checkout (get-location | split-path -leaf) ; git merge tempz ; git branch -d tempz ; git push origin (get-location | split-path -leaf)}
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | convert-path | %{ cd $_ ; git checkout tempz ; git checkout (get-location | split-path -leaf) ; git merge tempz ; git branch -d tempz ; git push origin (get-location | split-path -leaf)}
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; try{New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }) } catch {"error"} | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
<<<<<<< HEAD
echo "what pulse program paths" ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream
echo "what pulse program paths" ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | %{"q $_"}
echo "what pulse program paths" ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | %{"q $_"}cls
cls
echo "what pulse program paths" ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | select exe,path | Out-String -stream | %{"q $_"}
echo "what pulse program paths" ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | %{"q $_"}
echo "what pulse program paths" ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | %{$_.split('\t')}
echo "what pulse program paths" ; $regex='\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | %{$_ -split($regex)}
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | %{$_ -split($regex)}
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter '\t'
echo "echo text list cultures"; (Get-Culture).TextInfo.ListSeparator
echo "import tab separated values" ; ConvertFrom -Delimiter '`t'
echo "import tab separated values" ; ConvertFrom-csv -Delimiter '`t'
echo "import tab separated values" ; ConvertFrom-csv -Delimiter `t
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t | select exe
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t | format
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t | get-member
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | get-member
(echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query ).rows
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows | get-members
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows | get-member
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.getChildRows | get-member
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.getChildRows.value | get-member
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.getChildRows.value
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.getChildRows
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.toString()
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows | get-member
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows | get-member | %{$_.toString()}
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows | %{$_.toString()}
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows | get-member 
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.item | get-member 
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.item
echo "what pulse program paths" ; $regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.item.value
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.item.value
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.item | get-member
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows.item
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows | %{$_.item}
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows | %{$_.item}.value
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query ).rows | %{$_.item} | %{$_.value}
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t | get-member
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t 
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t | get-member
echo 'psobject to hasttable' ; $theObject.psobject.properties | Foreach { $ht2[$_.Name] = $_.Value }
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t).psobject.properties
$regex='\\t{2,}' ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t).psobject.properties |  Foreach { $ht2[$_.Name] = $_.Value }
$ht2 = @{} ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t).psobject.properties |  Foreach { $ht2[$_.Name] = $_.Value }
$ht2 = @{} ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t).psobject.properties |  Foreach { $ht2[$_.Name] = $_.Value } ; $ht2
$ht2 = @{} ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; (newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t ) |  Foreach { $ht2[$_.psobject.properties.Name] = $_.psobject.properties.Value } ; $ht2
$ht2 = @{} ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t  |  Foreach { $ht2[$_.psobject.properties.Name] = $_.psobject.properties.Value } ; $ht2
$ht2 = @{} ; $query = $whatPulseQuery ; $path = $whatPulseDbPath ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t  |  get-member
Get-ChildItem
Get-Module -ListAvailable | Import-Modue
Get-Module -ListAvailable | Import-Module
Get-Module -ListAvailable | %{Import-Module $_}
Get-Module -List | Format-Table -Property Name, ModuleType -AutoSize
Search-Everything -filter 'ext:psd1 \module' | Sort {($_ -split '\\').Count}, {$_} -Descending
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' | Sort {($_ -split '\\').Count}, {$_} -Descending
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 1 | %{test-ModuleManifest $_ }
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{test-ModuleManifest $_ }
Get-ChildItem | select name
(Get-ChildItem | select name) %{ Get-Content $_ }
(Get-ChildItem | select name) %{ $_ | Get-Content  }
Get-ChildItem | select name | %{ Get-Content | $_ }
Get-ChildItem | select name | %{ Get-Content $_ }
Get-ChildItem | %{ Get-Content $_.name }
$a ; Get-ChildItem | %{ $a+=(Get-Content $_.name) } ; $a
$a ; Get-ChildItem | %{ $a+=(Get-Content $_.name) } ; 
$a ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_}
$a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} 
$a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a | Measure-Object
$a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a 
$regex="[^a-z0-9_-]" $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex
$regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex
$regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | select -Unique
$output = [string[]] ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $output[$_]++} ; $output
[string[]]$output ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $output[$_]++} ; $output
string[int[]]$output ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $output[$_]++} ; $output
pastDoEdit 'unique'
cls
pastDoEdit 'count'
    $lines = (Get-Content $source) | %{ $_.tolower()}
    # case insensitive
    $hash = @{}
$hash = @() ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $hash[$_]++} ; $hash
cls
$hash = @() ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{$hash[$_]++} ; $hash
$hash = @() ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{$hash[$_.tolower()]++} ; $hash
$hash = @() ; $hash[""]=0 ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{$hash[$_.tolower()]++} ; $hash
$hash[""]=0 ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{$hash[$_.tolower()]++} ; $hash
$hash[""]=0 ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{$hash[$_.tolower()]=1+$hash[$_.tolower()]} ; $hash
$hash = @{} ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $_.tolower()} | %{$hash[$_]++} ;  $sorted= %{$hash.GetEnumerator() | sort-object {[int]$_.value}}    ; $sorted
$hash = @{} ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $_.tolower()} | %{$hash[$_]++} ;  $sorted= %{$hash.GetEnumerator() | sort-object {[int]$_.value}}    ; $sorted | Group-Object -Property value
$hash = @{} ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $_.tolower()} | %{$hash[$_]++} ;  $sorted= %{$hash.GetEnumerator() | sort-object {[int]$_.value}}    ; $sorted | Group-Object -Property value | group-object -Property count
$hash = @{} ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $_.tolower()} | %{$hash[$_]++} ;  $sorted= %{$hash.GetEnumerator() | sort-object {[int]$_.value}} ; $sorted | where{$_ -notmatch "^\d+$"}
$hash = @{} ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $_.tolower()} | %{$hash[$_]++} ;  $sorted= %{$hash.GetEnumerator() | sort-object {[int]$_.value}} ; $sorted | where{$_.name -notmatch "^\d+$"}
$hash = @{} ; $regex="[^a-z0-9_-]" ; $a="" ; Get-ChildItem | %{ Get-Content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $_.tolower()} | %{$hash[$_]++} ;  $sorted= %{$hash.GetEnumerator() | sort-object {[int]$_.value}} ; $sorted | where{$_.name -notmatch "^\d+$"} | where{$_.name.length -gt 4 }
[xml.document]$xml=get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml'; $xml
[xml]$xml=get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml'; $xml
$xml=get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml'; $xml | ConvertFrom-String
$xml=get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml'; $xml | ConvertTo-Xml
convertTo-xml (get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml')
convertTo-xml (get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml') | Get-Member
(convertTo-xml (get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml')).Objects
(convertTo-xml (get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml')).Objects.object
(convertTo-xml (get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml')).Objects.object.property
[xml]$xml=get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml'; $xml
[xml]$xml=get-content 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml'; $xml | Get-Member
Select-Xml -Path 'D:\PortableApps\2. fileOrganization\PortableApps\Beyond Compare 4\BCFileFormats.xml'
Select-Xml -Path 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml''.'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml | Get-Member
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{ $error.clear() ; try { test-ModuleManifest $_ } ; catch { "Error" } ; if (!$error) { $_ } }
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{ $error.clear() ; try { test-ModuleManifest $_ } catch { "Error" } ; if (!$error) { $_ } }
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_) } catch { "Error" } ; if (!$error) { $_ } }
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > &2>&1 ) } catch { "Error" } ; if (!$error) { $_ } }
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > &2>&1 $null ) } catch { "Error" } ; if (!$error) { $_ } }
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > &2>&1 > $null ) } catch { "Error" } ; if (!$error) { $_ } }
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > '&2>&1' > $null ) } catch { "Error" } ; if (!$error) { $_ } }
echo "sort paths by lvl" ; Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 2 | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > '&2>&1' ) } catch { "Error" } ; if (!$error) { $_ } }
Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 4 | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > '&2>&1' ) } catch { "Error" } ; if (!$error) { $_ } }
Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | select-object -first 20 | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > '&2>&1' ) } catch { "Error" } ; if (!$error) { $_ } }
Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > '&2>&1' ) } catch { "Error" } ; if (!$error) { $_ } }
Search-Everything -filter 'ext:psd1 \module' -global | Sort {($_ -split '\\').Count}, {$_} -Descending | %{ $error.clear() ; try { out-null -input (test-ModuleManifest $_ > '&2>&1' ) } catch { "Error" } ; if (!$error) { $_ } } | where{$_ -notmatch 'Error'}
test-moduleManifest -name 'C:\Users\Användaren\Documents\PowerShell\Modules\PSEverything\3.2.1\PSEverything.psd1'
test-moduleManifest 'C:\Users\Användaren\Documents\PowerShell\Modules\PSEverything\3.2.1\PSEverything.psd1'
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | convert-path
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | convert-path | %{ $_.leaf }
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | convert-path | %{ $_.name }
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | convert-path | %{ $_.LastWriteTime }
(Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | convert-path).LastWriteTime
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | %{ (get-item $_).LastWriteTime }
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | %{ (get-item $_).leaf}
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.scriptfile
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.'script-file'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.'script-file'| %{$_ -replace '$APPLICATION_CONFIG_DIR$/', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\','/')}
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.'script-file'| %{$_ -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\','/')}
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.'script-file'| %{$_ -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')}
([xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.'script-file') | %{$_ -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')}
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; ($xml.component.configuration.'script-file') | %{$_ -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')}
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.'script-file'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')}
$PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')}
$PSDefaultParameterValues['In-File:Encoding'] = 'utf8'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')}
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')}
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | get-content
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{get-content -path $_}
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"#goto $_´n" ; get-content -path $_} >> 'C:/Users/crbk01/AppData/Roaming/JetBrains/DataGrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runConfig/Combined.sql'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--goto $_´n" ; get-content -path $_ -Encoding UTF8} >> 'C:/Users/crbk01/AppData/Roaming/JetBrains/DataGrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runConfig/Combined.sql'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\(FromListOfAdresses)TillMinaMedelanden.run.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding UTF8 ; "go" } >> 'C:/Users/crbk01/AppData/Roaming/JetBrains/DataGrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runConfig/Combined.sql'
pastDoEdit 'ahk'
cls
executeThis 'ditto'
pastDoEdit 'ahk'
cls
echo "open Ahk" ; menu @(everything 'regex:".*\\data\\[^\\]*.ahk"') | %{. $_ }
echo "open Ahk" ; menu @(everything 'regex:".*\\data\\[^\\]*.ahk"') | %{notepad $_ }
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding UTF8 ; "go" } >> 'C:/Users/crbk01/AppData/Roaming/JetBrains/DataGrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runConfig/Combined.sql'
cd 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick'
pastDoEdit 'csv'
explorer ($historyPath | split-path -Parent)
executeThis 'bcompare'
pastDo 'ConvertTo-Csv'
$PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding UTF8 ; "go" } >> 'C:/Users/crbk01/AppData/Roaming/JetBrains/DataGrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runConfig/Combined.sql'
$PSDefaultParameterValues['Out-File:Encoding'] = 'unicode'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding UTF8 ; "go" } >> 'C:/Users/crbk01/AppData/Roaming/JetBrains/DataGrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runConfig/Combined.sql'
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding UTF8 ; "go" } 
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding 'UTF8' ; "go" } 
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding 'unicode' ; "go" } 
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding  BigEndianUTF32 ; "go" } 
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding Ascii ; "go" } 
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding Default ; "go" } 
[xml]$xml=get-content "D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\projects\Kvutsokning\.idea\runConfigurations\xTillMinaMedelanden_MedUtsökning_.xml"  -Encoding UTF8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]APPLICATION_CONFIG_DIR[$][/]', ('C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -Encoding Default ; "go" } >> 'C:/Users/crbk01/AppData/Roaming/JetBrains/DataGrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runConfig/Combined.sql'
pastDoEdit 'history'
echo "Navigate to history" ; (Get-PSReadlineOption).HistorySavePath | Split-Path -Parent
echo "Navigate to history" ; (Get-PSReadlineOption).HistorySavePath | Split-Path -Parent | explorer
echo "Navigate to history" ; (Get-PSReadlineOption).HistorySavePath |  Split-Path -Parent | %{explorer $_}
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | %{ (get-item $_).parent}
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | %{ (get-item $_).name }
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | %{ &{$name=(get-item $_).name; $time=(get-item $_).LastWriteTime ; $path=$_} }
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | %{ @{$name=(get-item $_).name; $time=(get-item $_).LastWriteTime ; $path=$_} }
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | %{ @{$name=(get-item $_).name; $time=(get-item $_).LastWriteTime ; $path=(get-item $_)} }
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | %{ $x = @{$name=(get-item $_).name; $time=(get-item $_).LastWriteTime ; $path=(get-item $_)} ; $x}
$parameters = @{`
    TypeName = 'System.Collections.Generic.HashSet[string]'`
    ArgumentList = ([string[]]$array, [System.StringComparer]::OrdinalIgnoreCase)`
}
$parameters = @{ TypeName = 'System.Collections.Generic.HashSet[string]' ; ArgumentList = ([string[]]$array, [System.StringComparer]::OrdinalIgnoreCase)} ; $parameters
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | $parameters = @{ TypeName = 'System.Collections.Generic.HashSet[string]' ; name = @{$name=(get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_)}} ; $paremeters
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | $parameters = @{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_)} ; $paremeters
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | @{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_)}
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 1 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } }
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 4 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } }
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 4 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -time
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 4 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -properity time
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 4 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time
Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 40 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time
$q = @[name,path] ; Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 40 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{$q[$_.name]=$_.path  }
$q = @[] ; Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 40 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{$q[$_.name]=$_.path  }
$q = @[] ; Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 40 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path  }
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 40 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path }
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | select-object -first 40 | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | select path
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | select value
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | select -property value
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | select values
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | select -property values | %{ $_}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | select -property values 
pastDoEdit 'ConvertTo-Csv'
choco install lively
Get-ChildItem -path 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' | replace('"','') |  > filer.csv
Get-ChildItem -path 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' | replace('"','') |  filer.csv
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' ; Get-ChildItem -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' | replace('"','') > $path\filer.csv
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' ; Get-ChildItem -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' > $path\filer.csv
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' ; Get-ChildItem -include '*.pdf' -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' > $path\filer.csv
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' ; $output = (Get-ChildItem -include '*.pdf' -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';'); $output.replace('"','') > $path\filer.csv
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' ; $output = (Get-ChildItem -include '*.pdf' -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';').toString(); $output.replace('"','') > $path\filer.csv
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' ; $output = (Get-ChildItem -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';').toString(); $output.replace('"','') > $path\filer.csv
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' ; $output = out-string -InputObject (Get-ChildItem -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' ) ; $output.replace('"','') > $path\filer.csv
git config --list --show-origin
out-string -InputObject (git config --list --show-origin) | ConvertFrom-Csv -Delimiter '  '
out-string -InputObject (git config --list --show-origin) | ConvertFrom-Csv -Delimiter '\t'
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string | replace -match $regex '¤' | ConvertFrom-Csv -Delimiter '¤'
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string | replace -regex $regex '¤' | ConvertFrom-Csv -Delimiter '¤'
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string = $string -replace $regex '¤' | ConvertFrom-Csv -Delimiter '¤'
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string = $string -replace $regex,'¤' ; $string | ConvertFrom-Csv -Delimiter '¤'
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string = $string.replace($regex,'¤') ; $string | ConvertFrom-Csv -Delimiter '¤'
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}|\t'; $string = $string.replace($regex,'¤') ; $string | ConvertFrom-Csv -Delimiter '¤'
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string = $string -replace($regex,'¤') ; $string | ConvertFrom-Csv -Delimiter '¤'
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string = $string -match($regex,'¤') 
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string = $string -match($regex) 
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string = $string -match $regex 
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string -match $regex 
$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string | %{ $_ -match $regex }
[Collections.Generic.List[String]]$string = out-string -InputObject (git config --list --show-origin) ; $regex = '[\s\t]{2,}'; $string | %{ $_ -match $regex }
[Collections.Generic.List[String]]$string = [IO.File]::ReadAllLines(out-string -InputObject (git config --list --show-origin)) ; $regex = '[\s\t]{2,}'; $string | %{ $_ -match $regex }
[Collections.Generic.List[String]]$string = out-string -InputObject (git config --list --show-origin) ; $regex = '\n'; $string | %{ $_ -match $regex }
[Collections.Generic.List[String]]$string = out-string -InputObject (git config --list --show-origin) ; $regex = '\n'; $string | Split-String -Separator $regex
[Collections.Generic.List[String]]$string = out-string -InputObject (git config --list --show-origin) ; $regex = '\n'; $string | Split-String -Separator $regex | %{ '1'}
[string[]]$array = "A","B","C" ; $array.Gettype()
[Collections.Generic.List[String]]$lst = $array ; $array.Gettype()
$regex = '\n' ; [Collections.Generic.List[String]]$string = (out-string -InputObject (git config --list --show-origin)) | Split-String -Separator $regex ; $string  | %{ '1'}
$regex = '`n' ; [Collections.Generic.List[String]]$string = (out-string -InputObject (git config --list --show-origin)) | Split-String -Separator $regex ; $string  | %{ '1'}
$regex = '´n' ; [Collections.Generic.List[String]]$string = (out-string -InputObject (git config --list --show-origin)) | Split-String -Separator $regex ; $string  | %{ '1'}
$regex = ´n ; [Collections.Generic.List[String]]$string = (out-string -InputObject (git config --list --show-origin)) | Split-String -Separator $regex ; $string  | %{ '1'}
$regex = `n ; [Collections.Generic.List[String]]$string = (out-string -InputObject (git config --list --show-origin)) | Split-String -Separator $regex ; $string  | %{ '1'}
$regex = `n ; [Collections.Generic.List[String]]$string = (out-string -InputObject (git config --list --show-origin)) | Split-String -Separator $regex ; $string  | Measure-Object
[Collections.Generic.List[String]]$string = out-string -InputObject (git config --list --show-origin) ; $string  | Measure-Object
[Collections.Generic.List[String]]$string = "a","b"; $string = out-string -InputObject (git config --list --show-origin) ; $string  | Measure-Object
[Collections.Generic.List[String]]$string = "a","b"; $string += out-string -InputObject (git config --list --show-origin) ; $string  | Measure-Object
[Collections.Generic.List[String]]$string = "a","b"; $string = out-string -InputObject (git config --list --show-origin) ; $string -split '\n'  | Measure-Object
 $string = out-string -InputObject (git config --list --show-origin) ; $string -split '\n'  | Measure-Object
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '[\s\t]{2,}'; $res | ?{ $_ -match $regex } | Measure-Object
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '[\s\t]{2,}'; $res | ?{ $_ -match $regex }
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '[\s\t]{2,}|\t'; $res | ?{ $_ -match $regex } | Measure-Object
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | ?{ $_ -match $regex } | Measure-Object
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $_ -split '\t' } | Measure-Object
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $_ -split '\t' }
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t'; $q[0];$q[1] }
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t'; [PSCustomObject]@{path = $q[0]; command = $q[1]} }
pastDoEdit 'git config'
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t'; [PSCustomObject]@{path = $q[0]; command = $q[1]} } | select command
 $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t'; [PSCustomObject]@{path = $q[0]; command = $q[1]} } | select command | select -first 1 | %{ git config --local $_ }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t'; [PSCustomObject]@{path = $q[0]; command = $q[1]} } | select command | select -first 1 | %{ git config --local $_ }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t'; [PSCustomObject]@{path = $q[0]; command = $q[1]} } | select -first 1 | %{ git config --local $_.command }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; [PSCustomObject]@{path = $q[0]; command = $q[1]} } | select -first 1 | %{ git config --local $_.command }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; [PSCustomObject]@{path = $q[0]; command = $q[1]} } 
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) [PSCustomObject]@{path = $q[0]; key = $z[1] } } 
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; key = $z[1] } } 
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; key = $z[0] } } 
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; key = $z[0] ; value = $z[1] } } 
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; key = $z[0] ; value = $z[1] } }  | select -first 1 | %{ git config --local "$_.key'$_.value'" }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; key = $z[0] ; value = $z[1] } }  | select -first 1 | %{ git config --local "$_.key"+"$_.value" }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; value = $z[1] } }  | select -first 1 | %{ git config --local "$_.keyx"+"$_.value" }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; value = $z[1] } }  | select -first 1 | %{ git config --local $_.keyx+$_.value }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; value = $z[1] } } | %{ git config --local $_.keyx+$_.value }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; value = $z[1] } } 
git config --list --show-origin
cd .. ; git config --list --show-origin
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; value = $z[1] } } 
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1] } } | %{ git config --local $_.keyx+$_.valuex }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1] } } | %{ $_.keyx+$_.valuex }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1] } } | %{ $_.keyx+'='+$_.valuex }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1] } } | %{ $_.keyx+'='+$_.valuex } | %{git config --local $_ }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = trim($z[1]) } } | %{ $_.keyx+'='+$_.valuex } | %{git config --local $_ }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+'='+$_.valuex } | %{git config --local $_ }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+'='+'$_.valuex' } 
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+'='+"'"+$_.valuex+"'" } 
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+'='+"'"+$_.valuex+"'" } | %{git config --local $_ }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+'='+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_" }
git config --local rebase.autostash=false
git config --local rebase.autostash= false
git config --local rebase.autostash = false
git config --local rebase.autostash = 'false'
git config --local rebase.autostash ='false'
git config --local rebase.autostash 'false'
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+" '"+$_.valuex+"'" } | %{git config --local $_ }
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_" }
explorer ($historyPath | split-path -Parent)
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_ --add" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local --add $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config -f '.git\config' --add $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config -f '.git\config' --add $_" }
git config --list --show-origin
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | group-object -Property keyx
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | group-object -Property keyx |  %{$_.Group[0]}
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | group-object -Property keyx |  %{$_.Group[-1]}
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | group-object -Property keyx |  %{$_.Group[-1]} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config -f '.git\config' --add $_" }
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | group-object -Property keyx |  %{$_.Group[-1]} 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object -Property path.length() -desc | group-object -Property keyx  |  %{$_.Group[-1]} 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object -Property path.length -desc | group-object -Property keyx  |  %{$_.Group[-1]} 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object -Property path.length -desc 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object -Property path.length 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object -Property path.value.length 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object -Property path.value.length -desc
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object -Property path.value.length -Descending
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object -Property @{Expression = "Path.length"; Descending = $true}
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object {$_.Path.length}
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object {$_.Path.length} | group-object -Property keyx  |  %{$_.Group[-1]} 
cd .git
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object {$_.Path.length} | group-object -Property keyx  |  %{$_.Group[-1]} 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object {$_.Path.length}
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object {$_.Path.length} | %{$_.Group[-1]} | ?{$_.path -ne 'file:config'}
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | Sort-Object {$_.Path.length} | %{$_.Group[-1]} 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{$_.Group[-1]} 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | group-object -Property keyx  |  %{$_.Group[-1]} 
$string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'}
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config -f '.git\config' --add $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( ($q[0],$z[0],$z[1].trim()) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config -f '.git\config' --add $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( ($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config -f '.git\config' --add $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config -f '.git\config' --add $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() }} } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -otcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() }} } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -contains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() }} } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config -f '.git\config' --add $_" }
cls
.\importModules.ps1
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | select -property values 
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | select -property values | %{$_}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | %{$_.items()}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | %{$_.item()}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.item | %{$_.item()}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q | get-member
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator | %{$_.value}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator() | %{$_.value}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_.directory) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator() | %{$_.value}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path=(get-item $_.path) } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator() | %{$_.value}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path= $_ } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator() | %{$_.value}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path= $_ } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator() | %{$_.value} |  Import-Module
$q = @{} ; Search-Everything -filter 'ext:psd1 \module' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path= $_ } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator() | %{$_.value} | %{Import-Module $_}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module !\$' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path= $_ } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator() | %{$_.value} | %{Import-Module $_}
$q = @{} ; Search-Everything -filter 'ext:psd1 \module !\$' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path= $_ } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator() | %{$_.value} 
$q = @{} ; Search-Everything -filter 'ext:psd1 \module !\$' -global | %{@{ name = (get-item $_).name; time=(get-item $_).LastWriteTime ; path= $_ } } | sort-object -property time | %{ $q[$_.name] = $_.path } ; $q.GetEnumerator() | %{$_.value} cls
cls
.\importModules.ps1
cd C:\Users\Användaren\Documents\WindowsPowerShell
.\importModules.ps1
Install-Module pscx
.\importModules.ps1
Set-PSRepository
Set-PSRepository -Name "pscx" -InstallationPolicy Trusted
instal-module echoargs
Install-Module echoargs
get-psrepository echoargs
get-psrepository 
find-module -name powershellget
find-module -name powershellget | install-module
find-module -name echoargs
find-module -name pscx
find-module -name powershellget | install-module
find-module -name pscx | install-module
 install-module -help
 install-module -Name pscx -AllowClobber
 import-module -Name pscx
find-module -name pscx | install-module -Force
get-clipboard
get-uptime
find-module -name echoargs | install-module -Force
pscx history
Import-Module psreadline
Import-Module oh-my-posh
instal-module oh-my-posh
find-module -name oh-my-posh | install-module -Force
Import-Module oh-my-posh
find-module -name posh-git | install-module -Force
import-module posh-git
Set-PoshPrompt paradox
find-module -name search-everything
find-module -name Search-Everything
everything 'whatpulse.db'
.\profile.ps1
notepad .\profile.ps1
.\profile.ps1
cls
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{ Invoke-Expression "git config -f '.git\config' --add $_"  | Tee-Object -Variable foobar ; $foobar | ?{ $_ -match '2' }}
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; Invoke-Expression "git config -f '.git\config' --add $teta"  | Tee-Object -Variable foobar ; $foobar | ?{ $_ -match '2' } | %{$teta}}
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; out-null -InputObject (Invoke-Expression "git config -f '.git\config' --add $teta"  | Tee-Object -Variable foobar) ; $foobar | ?{ $_ -match '2' } | %{$teta}}
pastDoEdit 'git null'
pastDoEdit 'out-null'
cls
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; out-null -InputObject (Invoke-Expression "git config -f '.git\config' --add $teta"  > &2>&1 $qeta ) ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; out-null -InputObject (Invoke-Expression "git config -f '.git\config' --add $teta" &2>&1 $qeta ) ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; out-null -InputObject (Invoke-Expression "git config -f '.git\config' --add $teta" > $null &2>&1 $qeta ) ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; out-null -InputObject (Invoke-Expression "git config -f '.git\config' --add $teta"  > &2>&1 $null ) -ov qeta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; out-null -InputObject (Invoke-Expression "git config -f '.git\config' --add $teta" > &2>&1 $null ) -ov qeta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; out-null -InputObject (Invoke-Expression "git config -f '.git\config' --add $teta" > $null &2>&1  ) -ov qeta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; (Invoke-Expression "git config -f '.git\config' --add $teta &2>&1") -ov qeta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; & (Invoke-Expression "git config -f '.git\config' --add $teta &2>&1") -ov qeta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; & (Invoke-Expression "git config -f '.git\config' --add $teta 2>&1") -ov qeta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; & (Invoke-Expression "git config -f '.git\config' --add $teta" &2>&1 ) -ov qeta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_; & (Invoke-Expression "git config -f '.git\config' --add $teta" > &2>&1 ) -ov qeta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ; Invoke-Expression "& terraform $action $teta 2>&1" -ErrorVariable qeta -OutVariable teta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ; Invoke-Expression "& $action $teta 2>&1" -ErrorVariable qeta -OutVariable teta ; $qeta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ; Invoke-Expression "& $action $teta 2>&1" -ErrorVariable qeta -OutVariable teta ; $teta | ?{ $_ -match '2' } | %{$teta}} 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ; out-null -InputObject (Invoke-Expression "& $action $teta 2>&1" -ErrorVariable qeta -OutVariable teta) ; $teta | ?{ $_ -match '2' } } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "SilentlyContinue" ; out-null -InputObject (Invoke-Expression "& $action $teta 2>&1" -ErrorVariable qeta -OutVariable teta) ; $ErrorActionPreference = "Stop"; $teta | ?{ $_ -match '2' } } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "SilentlyContinue" ; out-null -InputObject (Invoke-Expression "& $action $teta 2>&1" -ErrorVariable qeta -OutVariable teta) ; $ErrorActionPreference = "Stop"; if($qeta) { $teta } } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "SilentlyContinue" ; out-null -InputObject (Invoke-Expression "& $action $teta *>&1" -OutVariable teta) ; $ErrorActionPreference = "Stop"; if($teta) { $teta } } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "SilentlyContinue" ; out-null -InputObject (Invoke-Expression "& $action $teta *>&1" -OutVariable teta) ; $ErrorActionPreference = "Stop" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; out-null -InputObject (Invoke-Expression "& $action $teta *>&1" -OutVariable teta) ; $ErrorActionPreference = "Stop" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $teta = (Invoke-Expression "& $action $teta *>&1" )  | out-null ; $ErrorActionPreference = "Stop" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $teta = (Invoke-Expression "& $action $teta *>&1" )  | out-null ; $ErrorActionPreference = "Stop" ; $teta } 
function commitPath($path,$message) {$c = $pwd; cd $path ; git commit -m $message ; cd $pwd }
commitPath (($historyPath | Split-Path -Parent)) 'progress, list errors git.configAdditions'
function commitPath($path,$message) {$c = $pwd; cd $path ; git commit -ma $message ; cd $pwd }
commitPath (($historyPath | Split-Path -Parent)) 'progress, list errors git.configAdditions'
function commitPath($path,$message) {$c = $pwd; cd $path ; git commit -am $message ; cd $pwd }
commitPath (($historyPath | Split-Path -Parent)) 'progress, list errors git.configAdditions'
explorer ($historyPath | Split-Path -Parent)
git config --global core.ignorecase false
commitPath (($historyPath | Split-Path -Parent)) 'progress, list errors git.configAdditions'
$c = $pwd ; cd ($historyPath | Split-Path -Parent) ; git rm --cached 'Psreadline/ConsoleHost_history.txt' ; cd $c
git rm --cached 'PSreadline/ConsoleHost_history.txt'
git commit -m 'progress, list errors git.configAdditions'
git add -a
git add -A
git add --refresh
git add .
git commit -m 'progress, list errors git.configAdditions'
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $teta = (Invoke-Expression "& $action $teta *>&1" )  | out-null ; $ErrorActionPreference = "Stop" ; $teta } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $teta = (Invoke-Expression "& $action $teta &*>&1" )  | out-null ; $ErrorActionPreference = "Stop" ; $teta } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $teta = (Invoke-Expression "& $action $teta 2>&1" )  | out-null ; $ErrorActionPreference = "Stop" ; $teta } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $qeta = (Invoke-Expression "& $action $teta 2>&1" )  | out-null ; $ErrorActionPreference = "Stop" ; $qeta;$teta } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $qeta = (Invoke-Expression "& $action $teta 2>&1" )  | out-null ; $ErrorActionPreference = "Stop" ; if($qeta){$teta} } 
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $qeta = (Invoke-Expression "& $action $teta *>&1" )  | out-null ; $ErrorActionPreference = "Stop" ; if($qeta){$teta} } 
function inProgressX($path) { cd $pathx; $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" }}
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $qeta = (Invoke-Expression "& $action $teta *>&1" )  | out-null ; $ErrorActionPreference = "Stop" ; if($qeta){$teta} } 
Install-Module PsIni
Install-Module PsIni -AllowClobber
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $expres = "& $action $teta *>&1" ; $qeta = (Invoke-Expression $expres )  | out-null ; $ErrorActionPreference = "Stop" ; if($qeta){$teta} } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $expres = "& $action $teta *>&1" ; $qeta = (Invoke-Expression -Command $expres )  | out-null ; $ErrorActionPreference = "Stop" ; if($qeta){$teta} } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $expres = "& $action $teta *>&1" ; $qeta = (Invoke-Expression -Command $expres )  | out-null ; $ErrorActionPreference = "Stop" ; $expres } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $expres = "& $action '$teta' *>&1" ; $qeta = (Invoke-Expression -Command $expres )  | out-null ; $ErrorActionPreference = "Stop" ; $expres } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $expres = "& $action '$teta' *>&1" ; $qeta = (Invoke-Expression -Command "$expres" )  | out-null ; $ErrorActionPreference = "Stop" ; $expres } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $expres = "& $action '$teta' *>&1" ; $qeta = (Invoke-Command "$expres" )  | out-null ; $ErrorActionPreference = "Stop" ; $expres } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_;$action = "git config -f '.git\config' --add" ;$ErrorActionPreference = "Continue" ; $expres = {& $action $teta *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres )  | out-null ; $ErrorActionPreference = "Stop" ; $expres } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ; $expres = {& git config -f '.git\config' --add $teta *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres )  | out-null ; $ErrorActionPreference = "Stop" ; $expres } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ; $expres = {& git config -f '.git\config' --add $teta *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres )  | out-null ; $ErrorActionPreference = "Stop" ; $qeta } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ; $expres = {& git config -f '.git\config' --add $teta *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $ErrorActionPreference = "Stop" ; $qeta } 
commitPath (($historyPath | Split-Path -Parent)) 'progress, subvert all git output'
git add .
commitPath (($historyPath | Split-Path -Parent)) 'progress, subvert all git output'
git commit -m 'progress, list errors git.configAdditions'
git commit -m 'progress. subvert all git output'
git commit --amend -m 'progress. subvert all git output'
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ; $expres = {& git config -f '.git\config' --add $teta *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $ErrorActionPreference = "Stop" ; $qeta } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ; $expres = {& git config -f '.git\config' --add $teta *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $ErrorActionPreference = "Stop" ; $qeta | ?{ $_ -match 'should be'} | %{$teta} } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ; $expres = {& git config -f '.git\config' --add $teta *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $ErrorActionPreference = "Stop" ; $qeta | ?{ $_ -match 'should be'} | %{$expres} } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ; $expres = {& git config -f '.git\config' --add "$teta" *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $ErrorActionPreference = "Stop" ; $qeta | ?{ $_ -match 'should be'} | %{$expres} } 
echo "update local git config by global" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ;$action = "git config -f '.git\config' --add" ; $expres = {& (Invoke-Expression "& $action $teta *>&1") *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $ErrorActionPreference = "Stop" ; $qeta | ?{ $_ -match 'should be'} | %{$expres} } 
echo "update local git config by global" ; $actionX = "git config -f '.git\config' --add" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ; $expres = {& (Invoke-Expression "& $actionX $teta *>&1") *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $ErrorActionPreference = "Stop" ; $qeta | ?{ $_ -match 'should be'} | %{$expres} } 
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' ; echo "update local git config by global" ; $actionX = "git config -f '.git\config' --add" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $ErrorActionPreference = "Continue" ; $expres = {& (Invoke-Expression "& $actionX $teta *>&1") *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $ErrorActionPreference = "Stop" ; $qeta | ?{ $_ -match 'should be'} | %{$expres} } 
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ;   $actionX = "git config -f '.git\config' --add" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{$teta = $_; $expres = {& (Invoke-Expression "& $actionX $teta *>&1") *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $qeta | ?{ $_ -match 'should be'} | %{$expres} } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{  $callbock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $teta *>&1" }; $expres = {& (Invoke-Expression $callblock.invokeX) *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $qeta | ?{ $_ -match 'should be'} | %{$expres} } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{  $callbock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $teta *>&1" }; $callblock.invokeX } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{  $callbock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $teta *>&1" }; $callblock.invokeX.value } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{  $callbock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $teta *>&1" }; $callblock } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{  $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $teta *>&1" }; $callblock } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{  $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $teta *>&1" }; $callblock.invokeX.value } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{  $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $teta *>&1" }; $callblock.invokeX } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{ $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $callblock.invokeX } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{ $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $callblock.invokeX } ; $expres = {& (Invoke-Expression $callblock.invokeX) *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $qeta | ?{ $_ -match 'should be'} | %{$expres} } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{ $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $expres = {& (Invoke-Expression $callblock.invokeX) *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $qeta | ?{ $_ -match 'should be'} | %{$expres} } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{ $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $expres = {& (Invoke-Expression $callblock.invokeX) *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $qeta | %{$expres} } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{ $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $expres = {& (Invoke-Expression $callblock.invokeX) *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $expres } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{ $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $xy = $callblock.invokeX ; $expres = {& Invoke-Expression $xy *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $expres } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;  $ErrorActionPreference = "Continue" ; inProgressX 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer' | %{ $callblock = [pscustomobject] @{actionX = "git config -f '.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $xy = $callblock.invokeX ; $expres = {& Invoke-Expression $xy *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $qeta } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $callblock = [pscustomobject] @{actionX = "git config -f '$pathQ\.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $xy = $callblock.invokeX ; $expres = {& Invoke-Expression $xy *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $qeta } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $callblock = [pscustomobject] @{actionX = "git config -f '$pathQ\.git\config' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $callblock.invokeX } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $deltayxa = "$pathQ\.git\config"; $callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $callblock.invokeX } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $deltayxa = $pathQ -join '\.git\config'; $callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $callblock.invokeX } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config'; $callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; invokeX = "& $actionX $_ *>&1" }; $callblock.invokeX } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config'; $callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; "& $callblock.actionX $callblock.teta *>&1"  } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config'; $callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; $zeta = "& $callblock.actionX $callblock.teta *>&1" ; $expres = {& Invoke-Expression $zeta *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $expres } ; $ErrorActionPreference = "Stop"
cls
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config'; $callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; $zeta = "& $callblock.actionX $callblock.teta *>&1" ; $expres = {& Invoke-Expression $zeta *>&1} ; $qeta = (Invoke-Command -ScriptBlock $expres ) ; $qeta } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ $callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $callblock.actionX $callblock.teta *>&1" ; expres = {& Invoke-Expression $zeta *>&1}} ; $qeta = (Invoke-Command -ScriptBlock $express.expres ) ; $qeta } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ $callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $callblock.actionX $callblock.teta *>&1" ; expres = {& Invoke-Expression $zeta *>&1}} ; $express } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ $callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $callblock.actionX $callblock.teta *>&1" ; expres = {& Invoke-Expression $zeta *>&1}} ; $express | Format-Wide } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject] @{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& callblock.actionX callblock.teta *>&1" ; expres = {& Invoke-Expression $zeta *>&1}} ; $express | Format-Wide } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& callblock.actionX callblock.teta *>&1" ; expres = {& Invoke-Expression $zeta *>&1}} ; $express | parameters } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& callblock.actionX callblock.teta *>&1" ; expres = {& Invoke-Expression $zeta *>&1}} ; $express | Get-Member -parameter *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& callblock.actionX callblock.teta *>&1" ; expres = {& Invoke-Expression $zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $this.callblock.actionX $this.callblock.teta *>&1" ; expres = {& Invoke-Expression $this.zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $this.$callblock.actionX $this.$callblock.teta *>&1" ; expres = {& Invoke-Expression $this.zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $this.$callblock.actionX $this.$callblock.teta *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $this.callblock.actionX $this.$callblock.teta *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $this.actionX $this.$callblock.teta *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $actionX $this.$callblock.teta *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ callblock = [pscustomobject]@{actionX = "git config -f '$deltayxa' --add" ; teta = $_ }; zeta = "& $actionX $teta *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+this.actionX+" "+this.teta+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+$this.actionX+" "+$this.teta+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+$this["actionX"]+" "+$this["teta"]+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+$this[$actionX]+" "+$this[$teta]+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+$this.$actionX+" "+$this.$teta+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+$this['actionX']+" "+$this['teta']+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+$this.'actionX'+" "+$this.'teta'+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
ls
p
"function inProgressX($path) { cd $pathx; $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" }}" > inProgressX.ps1
echo "function inProgressX($path) { cd $pathx; $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" }}" > inProgressX.ps1
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; .\inProgressX.ps1 $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+$this.'actionX'+" "+$this.'teta'+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo ´function inProgressX($path) { cd $pathx; $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" }}´ > inProgressX.ps1
echo `function inProgressX($path) { cd $pathx; $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' | select -Unique ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; if( @($q[0],$z[0],$z[1]) -notcontains $null ){ [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trimEnd() }} } | group-object -Property keyx  |  %{$_.Group[-1]} | ?{$_.path -ne 'file:config'} | %{ $_.keyx+' '+"'"+$_.valuex+"'" }}` > inProgressX.ps1
echo "update local git config by global" ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; .\inProgressX.ps1 $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+$this.'actionX'+" "+$this.'teta'+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | %{ $express = [pscustomobject] @{ actionX = "git config -f '$deltayxa' --add" ; teta = $_ ; zeta = "&"+$this.'actionX'+" "+$this.'teta'+" *>&1" ; expres = {& Invoke-Expression $this.$zeta *>&1}} ; $express | Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside | %{ $_| Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
cd $home
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside | %{ $_| Get-Member -MemberType *} ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ  ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside  ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside | select zeta,teta,expre,advancedx ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside | select zeta,teta,expre,actionX ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside | select zeta,teta,expre,advancedx ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside | select expres ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside | %{ & Invoke-Expression $_.zeta *>&1 } ; $ErrorActionPreference = "Stop"
echo "update local git config by global" ;. .\inProgressX.ps1 ; $pathQ = 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer'; $deltayxa = $pathQ | Join-Path -parent $pathQ -ChildPath '\.git\config' ; $ErrorActionPreference = "Continue" ; inProgressX $pathQ | inProgressInside | %{ $q = & Invoke-Expression $_.zeta *>&1 ; $q } ; $ErrorActionPreference = "Stop"
pastDoEdit 'csv'
cls
pastDo 'ahk`
'
pastDo 'ahk'
cd d:\
pastDo 'ahk'
C:\
C:
pastDo 'ahk'
cls
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick\success' ; $output = out-string -InputObject (Get-ChildItem -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' ) ; $output.replace('"','') > $path\filer.csv
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick\TillVision(success)' ; $output = out-string -InputObject (Get-ChildItem -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' ) ; $output.replace('"','') > $path\filer.csv
choco install autoruns
Get-ChildItem -Filter .pdf 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick' | select -First 1
Get-ChildItem -Filter '*.pdf' 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick' | select -First 1
. .\convert-PdfTotext.ps1 ; Get-ChildItem -Filter '*.pdf' 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick' | select -First 1 | %{ convert-pdfTotext $_.FullName }
Every-addType "itextsharp ext:dll"
. .\convert-PdfTotext.ps1 ; Get-ChildItem -Filter '*.pdf' 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick' | select -First 1 | %{ convert-pdfTotext $_.FullName }
Get-Process powershell | select -ExpandProperty modules | group -Property FileName | select name
Get-Process 
Get-Process pwsh | select -ExpandProperty modules | group -Property FileName | select name
Get-Process pwsh | select -ExpandProperty modules | group -Property FileName | select name | ?{ $_ -match 'itext'`
}
import-module (Get-Process pwsh | select -ExpandProperty modules | group -Property FileName | select name | ?{ $_ -match 'itext'})
import-module (Get-Process pwsh | select -ExpandProperty modules | group -Property FileName | select name | ?{ $_ -match 'itext'}).name
get-module
 $XCEED = ([appdomain]::CurrentDomain.GetAssemblies())|?{$_.Modules.name.contains((Get-Process pwsh | select -ExpandProperty modules | group -Property FileName | select name | ?{ $_ -match 'itext'}).name)} ; $XCEED.GetModules().gettypes()|?{$_.isPublic -AND $_.isClass}
([appdomain]::CurrentDomain.GetAssemblies())|?{$_.Modules.name.contains((Get-Process pwsh | select -ExpandProperty modules | group -Property FileName | select name | ?{ $_ -match 'itext'}).name)} 
([appdomain]::CurrentDomain.GetAssemblies())|?{$_.Modules.name.contains((Get-Process pwsh | select -ExpandProperty modules | group -Property FileName | select name | ?{ $_ -match 'itext'}).name)} | Measure-Object
Install-Package itext7
install-package iTextSharp 
Invoke-WebRequest -uri 'https://github.com/itext/itextsharp/releases/download/5.5.13.3/iTextSharp.5.5.13.3.nupkg'
Invoke-WebRequest -uri 'https://github.com/itext/itextsharp/releases/download/5.5.13.3/iTextSharp.5.5.13.3.nupkg'  -OutFile $targetNuget ; Install-Package $targetNuget
Invoke-WebRequest -uri 'https://github.com/itext/itextsharp/releases/download/5.5.13.3/iTextSharp.5.5.13.3.nupkg'  -OutFile $targetNuget ; Install-Package -name $targetNuget
$targetNuget = 'a.nupkg';  Invoke-WebRequest -uri 'https://github.com/itext/itextsharp/releases/download/5.5.13.3/iTextSharp.5.5.13.3.nupkg'  -OutFile $targetNuget ; Install-Package -name $targetNuget
Install-Package -source 'https://github.com/itext/itextsharp/releases/download/5.5.13.3/iTextSharp.5.5.13.3.nupkg'
Install-Package https://github.com/itext/itextsharp/releases/download/5.5.13.3/iTextSharp.5.5.13.3.nupkg
Install-Package "https://github.com/itext/itextsharp/releases/download/5.5.13.3/iTextSharp.5.5.13.3.nupkg"
Install-Package 'a.nupkg'
ls
$targetNuget = 'D:\Unsorted\a.nupkg';  Invoke-WebRequest -uri 'https://github.com/itext/itextsharp/releases/download/5.5.13.3/iTextSharp.5.5.13.3.nupkg'  -OutFile $targetNuget ; Install-Package -name $targetNuget
$targetNuget = 'D:\Unsorted\iTextSharp.5.5.13.3.nupkg';  Invoke-WebRequest -uri 'https://github.com/itext/itextsharp/releases/download/5.5.13.3/iTextSharp.5.5.13.3.nupkg'  -OutFile $targetNuget ; Install-Package $targetNuget
cd 'D:\Unsorted'
install-package 'a.nupkg'
install-package a.nupkg
nuget
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
InstallPackageProvider Name Nuget Force
 Get-Module -ListAvailable -Name PackageManagement
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands
Import-Module PackageManagement -RequiredVersion 1.0.0.1
Import-Module PackageManagement 
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands
 Get-Module -ListAvailable -Name PackageManagement
InstallPackageProvider Name Nuget Force
 Get-Module -ListAvailable -Name PackageManagement
InstallPackageProvider Name Nuget Force
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | % { $_ }
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | Measure-Object
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | parameters
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | get-meber
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | Get-Member
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.psobject.properties}
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.value}
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.value | % {$_}}
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.value} | Get-Member
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.value | Get-Member`
`
}
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ Get-Member $_.value}
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ Get-Member $_}
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | Get-Member
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.toString() }
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.getType() }
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.GetEnumerator()  }
 Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.exportedCommands.GetEnumerator()  }
executeThis 'pdf book'
executeThis 'pdf sam'
executeThis 'ditto'
pastDo 'ahk'
pastDoEdit 'ahk'
echo "open Ahk" ; menu @(everything 'path:ext:ahk !$ \data\') | %{ cd ($_ | split-path -parrent) ; . $_ }
echo "open Ahk" ; menu @(everything 'path:ext:ahk !$ parent:data') | %{ cd ($_ | split-path -parrent) ; . $_ }
echo "open Ahk" ; menu @(everything 'path:ext:ahk !$ parrent:data') | %{ cd ($_ | split-path -parrent) ; . $_ }
echo "open Ahk" ; menu @(everything 'regex:"\\data\\[^\\]*.ahk$"') | %{ cd ($_ | split-path -parrent) ; . $_ }
echo "open Ahk" ; menu @(everything 'regex:"\\data\\[^\\]*.ahk$"') | %{ cd ($_ | split-path -parrent)  }
echo "open Ahk" ; menu @(everything 'regex:"\\data\\[^\\]*.ahk$"') | %{ cd ($_ | split-path -parent)  }
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
Install-PackageProvider -Name NuGet 
Register-PSRepository -Default
Install-PackageProvider -Name NuGet 
Get-PackageSource
Get-PackageProvider
pastDo 'ditto'
executeThis 'ditto'
pastDo 'ahk'
pastDoEdit 'preview'
executeThis 'bcompare'
=======
>>>>>>> MassiveConsole
