echo "git add files from file" ; get-content 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content -Delimiter '\t' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "git add files from file" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; get-content -Delimiter '\s\s' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; get-content -Delimiter '  ' -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\s{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)(\s{2,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)([\s]{2,}|[\t\n]{1,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)([\s]{2,}|[\t\n]{1,})' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?s)([\s]{2,}|[\t\n]{1,})\r?\n' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '.{3}' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(.{3})' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(.*([\s]{2,}|[\t\n]{1,}))' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([^\t\n]{1,}([\s]{2,}|[\t\n]{1,}))' -ne ''
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt').Split('[\t\n]{1,}|[\s]{2,}')
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt').Split('  ')
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '[\t\n]{1,}|[\s]{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\[\t\n]{1,}|[\s]{2,}\'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '[\t\n]+|[\s]{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([\t\n]+|[\s]{2,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([\s]{2,})'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '\s{2,}'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '[.][^.]{1,}\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '([.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '((?<=[.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=\.[^\.]{1,})\s'
echo "contentOfFileas array" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s'
echo "Content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s'
echo "Git add content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=sql)\s' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "Git add content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,})\s' | %{ git add $_} ; git commit -am " Your local changes to the following files would be overwritten by merge"
echo "content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,})\s'
echo "content of file RegexLookAhead" ; (Get-Content -Raw  -path 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt') -split '(?<=[.][^\s.]{3,7})\s'
(Get-PSReadlineOption).HistorySavePath
Get-PSReadLineKeyHandler
Get-PSReadLineOption
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType SymbolicLink -Value "C:\Users\crbk01\AppData\Roaming\Mic...
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Hardlink -Value "C:\Users\crbk01\AppData\Roaming\Microso...
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Junction -Value "C:\Users\crbk01\AppData\Roaming\Microso...
(Get-PSReadlineOption).HistorySavePath
set-PSReadlineOption -HistorySavePath "C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
Set-PSReadLineOption -HistorySavePath C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt -HistorySaveStyle in...
Set-PSReadLineOption -HistorySavePath C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt -HistorySaveStyle sa...
(Get-PSReadlineOption).HistorySavePath
Get-PSReadLineOption
 [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState
cd "C:\Program Files\TortoiseGit\bin"
ls
.\TortoiseGitProc.exe
cd "C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\"
".\C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
.\"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
.\C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe
'.\C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe'
.\'C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe'
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
cd "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe"
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /path
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe -command repostatus -path C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
Import-Module ecoargs
Import-Module echoargs
Import-Module pscx
Install-Module -Name Pscx
echoargs &"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe -command repostatus -path C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell"
echoargs
Import-Module pscx
Import-Module -name pscx
$history = [System.Collections.ArrayList]([System.IO.File]::ReadAllLines((Get-PSReadlineOption).HistorySavePath))...
get-history
get-history -Verbose
get-history | select -commandline
get-history | select commandline

	cd C:\9dfe73ef\settingsRepository\repository
echo "git Subtree then remove"; $x = 'data' ; git subtree add --prefix=$x split $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
echo "git Subtree then remove"; $x = 'repository' ; git subtree add --prefix=$x split $x ; git rm -rf $x ; git add -A ; git commit -am "removing $x folder"
git submodules
git submodule
git submodule db
git submodule db status
git submodule status db
git submodule status /db
git submodule status \db
cd db
git remote
(Split-Path -Parent $MyInvocation.MyCommand.Path)
$MyInvocation.MyCommand.Path
$env:path
Get-Command -CommandType externalscript
$env:path +=’;C:\install\'
echo 'Added scripts'; Get-Command -CommandType externalscript
echo "add to envPath" ; $x='C:\install\Scripts\'; $env:path +=’;$x'
echo 'Added scripts'; Get-Command -CommandType externalscript
$env:path
echo "add to envPath" ; $x='C:\install\Scripts\'; $env:path +=’;'+$x
$env:path
echo 'Added scripts'; Get-Command -CommandType externalscript
echo "make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -itemType SymbolicLink -path $y -target $x
echo "make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -itemTypeSymbolicLink -path $y -target $x
echo "make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -ItemType SymbolicLink -Path $y -target $x
echo "make link" ; $x = 'C:\Users\crbk01\Documents' ; $y = 'D:\Documents\WindowsPowerShell' ; new-item -ItemType SymbolicLink -Path "$y" -target "$x"
new-item -ItemType SymbolicLink -Path "D:\Documents\WindowsPowerShell" -target "C:\Users\crbk01\Documents"
echo 'userProfilePath'; $env:USERPROFILE
echo 'userProfilePath'; $env:USERPROFILE ; $PROFILE | Get-Member -Type NoteProperty
echo "git root path"; git rev-parse --show-toplevel
#echo "git SubmoduleAs branch"; $x = 'https://github.com/perXautomatik/sql-getIndexes.git' ;git submodule add -b $x
git submodule add -b
#echo "absorbGitDir" ;git submodule absorbgitdirs
cd ..
cd..
echo "absorbGitDir" ;git submodule absorbgitdirs scratches
echo "absorbGitDir" ;git submodule absorbgitdirs codestyles
cd projects
cd ..
echo "absorbGitDir" ;git submodule absorbgitdirs .\settingsRepository\
echo "absorbGitDir" ;git submodule absorbgitdirs .\settingsRepository\.git
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository\.git
echo "absorbGitDir" ;git submodule absorbgitdirs \settingsRepository\
echo "absorbGitDir" ;git submodule absorbgitdirs /settingsRepository/
echo "absorbGitDir" ;git submodule absorbgitdirs .\settingsRepository\
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository
cd .\settingsRepository\
cd .\repository\
git remote
git remote --list
git remote origin
git remote -v origin
git remote origin -v
git -v remote origin
git remote show origin
echo "Git Show origin"; git remote show origin
cd .. ..
cd ..
git submodule
git submodule -h
git branch
git submodule -b DGSettings -f --name DGSettings -- settingsRepository\repository
git submodule add -b DGSettings -f --name DGSettings -- settingsRepository\repository
git submodule add -b DGSettings -f --name DGSettings -- ./settingsRepository\repository/
#echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name DGSettings -- ./settingsRepository\repository/
#echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name DGSettings --reference 'https://github.com/perXautomatik/DatagripSettings.git' --path ./settingsRepository\repository/
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository/repository
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' --path ./settingsRepository/\repository/
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' -- ./settingsRepository/\repository/
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' -- ./settingsRepository/repository/
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' -- ./\settingsRepository\repository/
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' --reference 'https://github.com/perXautomatik/DatagripSettings.git' -- 'D:\Users\Crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\settingsRepository\repository\'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' 'D:\Users\Crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\settingsRepository\repository\'
echo "absorbGitDir" ;git submodule absorbgitdirs settingsRepository
echo "absorbGitDir" ;git submodule absorbgitdirs
submodules
git submodules
git submodule
git rm --cached 'consoles/db/23be5c42-e61f-4ffe-a60b-4830fba04d23'
git submodule
git rm --cached 'consoles/db/39d10903-916f-4add-94c3-4526180c3416'
git submodule
git rm --cached 'consoles/db/39d10903-916f-4add-94c3-4526180c3416/../../.git/modules/db/modules/39d10903-916f-4add-94c3-4526180c3416'
git rm --cached 'consoles/db/'
git rm -r --cached 'consoles/db/'
git rm -f-r --cached 'consoles/db/'
git rm -fr --cached 'consoles/db/'
git submodule
git rm -fr --cached 'projects'
git submodule
echo "git remove every memmory"; git rm -fr --cached 'scratches'
git submodule
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
git submodule
git submodule -a
git submodule status
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' 'D:\Users\Crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\settingsRepository\repository\'
git submodule
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' ./settingsRepository\repository\/
git submodule
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'settingsRepository/repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' settingsRepository\repository
git submodule
echo "git Config Submodule summary" ; git config --global status.submoduleSummary true
cd .\settingsRepository\
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
cd ..
echo "git remove every memmory"; git rm -fr --cached 'settingsRepository'
cd .\settingsRepository\
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b DGSettings -f --name 'repository' -- 'https://github.com/perXautomatik/DatagripSettings.git' repository
git submodule
cd ..
git branch
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b WorkScratch -f --name 'Scraches' -- 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' Scratches
git submodule
echo "git remove every memmory"; git rm -fr --cached 'scratches'
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b WorkScratch -f --name 'Scraches' -- 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' scratches
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b ProjectsNConsoles -f --name 'consoles' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' consoles
echo "git remove every memmory"; git rm -fr --cached 'consoles'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b ProjectsNConsoles -f --name 'consoles' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' consoles
git submodule
echo "absorbGitDir" ;git submodule absorbgitdirs
cd consoles
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b db -f --name 'db' -- 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' db
cd db
git submodule
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "git remove every memmory"; git rm -fr --cached '1781354c-8195-4b53-903a-bbf9b4558cb0'
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "git remove every memmory"; git rm -fr --cached 6163ad17-589f-4530-969d-00e2cf1af340
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "git remove every memmory"; git rm -fr --cached 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "git remove every memmory"; git rm -fr --cached a922a8bc-6602-44d4-8ab2-a4062fc64d99
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b 947f2b47-af0c-4354-9696-9462b1a4bf8b -f --name '947f2b47-af0c-4354-9696-9462b1a4bf8b' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "git remove every memmory"; git rm -fr --cached 49f168c8-015c-43d2-b9f4-06de275bdc15
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b 947f2b47-af0c-4354-9696-9462b1a4bf8b -f --name '947f2b47-af0c-4354-9696-9462b1a4bf8b' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "git remove every memmory"; git rm -fr --cached .\947f2b47-af0c-4354-9696-9462b1a4bf8b\
echo "git remove every memmory"; git rm -fr --cached 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "git remove every memmory"; git rm -fr --cached '947f2b47-af0c-4354-9696-9462b1a4bf8b'
echo "Git Ad exsiting path as submodule and branch" ; git submodule add -b 947f2b47-af0c-4354-9696-9462b1a4bf8b -f --name '947f2b47-af0c-4354-9696-9462b1a4bf8b' -- 'https://github.com/perXautomatik/DatagripProjectsNConsoles.git' 947f2b47-af0c-4354-9696-9462b1a4bf8b
echo "git remove every memmory"; git rm -fr --cached '6163ad17-589f-4530-969d-00e2cf1af340'
echo "git remove every memmory"; git rm -fr --cached 'a922a8bc-6602-44d4-8ab2-a4062fc64d99'
echo "git remove every memmory"; git rm -fr --cached '1781354c-8195-4b53-903a-bbf9b4558cb0'
echo "git remove every memmory"; git rm -fr --cached '6163ad17-589f-4530-969d-00e2cf1af340'
git submodule
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name '$x' -- $y '$x'
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name '$x' -- $y '$x'
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "git remove every memmory"; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "git remove every memmory"; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "git remove every memmory"; $x = 'a922a8bc-6602-44d4-8ab2-a4062fc64d99' ; git rm -fr --cached $x
echo "absorbGitDir" ;git submodule absorbgitdirs
echo "Git Ad exsiting path as submodule and branch" ; $x = '1781354c-8195-4b53-903a-bbf9b4558cb0' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "git remove every memmory"; $x = '1781354c-8195-4b53-903a-bbf9b4558cb0' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = '1781354c-8195-4b53-903a-bbf9b4558cb0' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule
echo "Git Ad exsiting path as submodule and branch" ; $x = '6163ad17-589f-4530-969d-00e2cf1af340' ; $y = 'https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git' ; git submodule add -b $x -f --name $x -- $y $x
echo "absorbGitDir" ;git submodule absorbgitdirs
cd ..
git submodule
echo "absorbGitDir" ;git submodule absorbgitdirs
cd ..
echo "absorbGitDir" ;git submodule absorbgitdirs
cd .\projects\
git submodule
cd ..
git branches
git branch
echo "Git Ad exsiting path as submodule and branch" ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name $x -- $y $x
echo "git remove every memmory"; $x = 'projects' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name $x -- $y $x
git submodule
echo "Git Ad exsiting path as submodule and branch" ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x
echo "git remove every memmory"; $x = 'projects' ; git rm -fr --cached $x
echo "Git Ad exsiting path as submodule and branch" ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x
install-module PSEverything
Everything
choco install everything
Everything
install-module PSEverything
Search-Everything -Extension cs
Search-Everything -Extension cs | measure-object
Search-Everything -Extension 'cs' | measure-object
Search-Everything 'a' | measure-object
Search-Everything -Include ATL -Extension natvis
Search-Everything -Include ATL
Search-Everything a | measure-object
C:
Search-Everything a | measure-object
Search-Everything -Include ATL -Extension natvis
Search-Everything -Extension 'cs' | measure-object
Search-Everything -Extension 'dir' | measure-object
Search-Everything ext:dir | measure-object
Search-Everything 'dir:' | measure-object
Search-Everything dir: | measure-object
Search-Everything folder: | measure-object
Search-Everything folder: .git | measure-object
Search-Everything 'folder: .git' | measure-object
Search-Everything folder: '.git' | measure-object
Search-Everything <folder: '.git'> | measure-object
Search-Everything --function
Search-Everything --help
pseverything --help
Search-Everything child:.git | measure-object
Search-Everything 'child:.git' | measure-object
Search-Everything -child .git | measure-object
add remote home https://github.com/perXautomatik/EverythingSettings.git
git add remote home https://github.com/perXautomatik/EverythingSettings.git
git remote add home https://github.com/perXautomatik/EverythingSettings.git
git fetch -all
git fetch --all
Search-Everything -child .git !C:\users\Crbk01\AppData\Local\Temp | measure-object
Search-Everything -child .git !"C:\users\Crbk01\AppData\Local\Temp" | measure-object
Search-Everything -child .git <!"C:\users\Crbk01\AppData\Local\Temp"> | measure-object
Search-Everything -child .git !"C:\users\Crbk01\AppData\Local\Temp" | measure-object
Search-Everything -child .git "!C:\users\Crbk01\AppData\Local\Temp" | measure-object
Search-Everything -child .git -and !C:\users\Crbk01\AppData\Local\Temp | measure-object
PSEverything.SearchEverythingCommand
cat PSEverything.SearchEverythingCommand
Search-Everything -child .git -ExcludePath C:\users\Crbk01\AppData\Local\Temp | measure-object
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp | measure-object
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp -PathExclude C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp,C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\
Search-Everything -child .git -PathExclude C:\users\Crbk01\AppData\Local\Temp,'C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp,C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp|C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -Exclude 'C:\users\Crbk01\AppData\Local\Temp C:\users\Crbk01\AppData\Local\TempC:\Users\crbk01\OneDrive - Region Gotland\'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where-Object -match '!onedrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | filter -match '!onedrive'
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ).filter -match '!onedrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where-Object -notcontains 'onedrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where-Object -property path -notcontains 'onedrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where-Object -property path -notcontains 'OneDrive'
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | format
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | format-list
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' |  Get-Member -Parameter *
Search-Everything Get-Member -Parameter *
Search-Everything Get-Member
Search-Everything Get-Member *
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ).GetType()
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -match '!OneDrive'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -match 'OneDrive'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'OneDrive'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GithubDesktop\app'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GitHubDesktop\app'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GitHubDesktop.app'}
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GitHubDesktop.app'} | Where{ $_ -notmatch 'Microsoft VS Code._.resources.app' }
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive'} | Where{ $_ -notmatch 'GitHubDesktop.app'} | Where{ $_ -notmatch 'Microsoft VS Code._.resources.app' } | Where{ $_ -notmatch 'Installer.resources.app.node_modules' }
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules' }
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions' }


git ls-files --functions
git ls-files --functions -c
git ls-files -c projects
git ls-files -cz projects
git ls-files projects
git ls-files -u projects
git ls-files --debug projects
git ls-files --with-tree projects
git ls-files --resolve-undo projects
git ls-files --killed projects
git ls-files --staged projects
git ls-files --stage projects
git ls-files -o projects
git ls-files -ot projects
git rm "projects/.idea - genv\303\244g.lnk"
git rm 'projects/.idea - genv\303\244g.lnk'
git rm 'projects\.idea - genv\303\244g.lnk'
git rm -rf 'projects\.idea - genv\303\244g.lnk'
git rm -rf 'projects\.idea - genväg.lnk'
git ls-files -ot projects
git rm "projects/.idea - genväg.lnk"
git rm -rf "projects/.idea - genväg.lnk"
git rm --function
echo "git remove every memmory"; $x = 'projects' ; git rm -fr --cached $x
cd .\projects\
git submodule
git rm -rf --cached ".idea - genväg.lnk"
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x ; git commit -m $l+$x
cd ..
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x ; git commit -m $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'scratches' ; git rm -fr --cached $x ; git commit -m $l $x
$l = "git remove every memmory"; echo $l ; $x = 'scratches' ; git rm -fr --cached $x ; git commit -m $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'projects' ; git rm -fr --cached $x ; git commit -m $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'settingsRepository' ; git rm -fr --cached $x ; git commit -m $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -b WorkProjeckts -f --name 'DatagripProjects' -- $y $x ; git commit -m $l+$x
git submodule
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches -f --name 'scratches' -- $y $x ; git commit -m $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'scratches' ; git rm -fr --cached $x ; git commit -m $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches -f --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "git remove every memmory"; echo $l ; $x = 'scratches' ; git rm -fr --cached $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches -f --name 'scratches' -- $y $x ; git commit -am $l+$x
cd scratches
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches -f --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -fb WorkScratches --name 'scratches' -- $y $x ; git commit -am $l+$x
cd ..
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -fb WorkScratches --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches --name 'scratches' -- $y $x ; git commit -am $l+$x
git submodule
echo "absorbGitDir" ;git submodule absorbgitdirs
git submodule --function
git submodule init -- scratches
git submodule deinit --all
cd consoles
git commit -am 'x'
cd ..
git submodule deinit --all
git submodule deinit --all --chached
git submodule deinit --all --cached
git submodule deinit --cached
git submodule deinit -f
git submodule deinit --all -f
git commit -am 'x'
git submodule
echo "absorbGitDir" ;git submodule absorbgitdirs
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add -b WorkScratches --force --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'scratches' ; $y = 'https://github.com/perXautomatik/Sql-Datagrip-Scratches.git' ; git submodule add --force --name 'scratches' -- $y $x ; git commit -am $l+$x
$l = "Git Ad exsiting path as submodule and branch" ; echo $l ; $x = 'projects' ; $y = 'https://github.com/perXautomatik/sql-Blad1ObjektVsRegisterObjekt.git' ; git submodule add -f --name 'DatagripProjects' -- $y $x ; git commit -m $l+$x

Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions' } | measure-object
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)' } | measure-object
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)' } | sort -length
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)' } | sort-object -Property Length
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycke.Bin' } | sort-object -Property Length
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length - descending
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending -first 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending -last 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending -Last 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | sort-object -Last 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -Last 1
Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | git add . ; git commit -a -m "test" ;git push --all
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | cd $_ ; git add . ; git commit -a -m "test" ;git push --all
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | cd | git add . ; git commit -a -m "test" ;git push --all
(Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1)
cd (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1)
cd (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | git add . ; git commit -a -m "test" ;git push --all
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1)
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | cd
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | convert-path | cd
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | convert-path -path $_ | cd
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | %{convert-path -path $_} | cd
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | %{convert-path -path $_}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | %{CD $_}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 1) | %{CD $_ | git add . ; git commit -a -m "test" ;git push --all}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 10) | %{CD $_ | git add . ; git commit -a -m "test" ;git push --all}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending | select-object -first 100) | %{CD $_ | git add . ; git commit -a -m "test" ;git push --all}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . ; git commit -a -m "test" ;git push --all}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | @(git add . ) *> $x; @(git commit -a -m "test") *> $y; @(git push --all) *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> [array]$x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $x[array]  ; CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@()  ; CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() [array]$z =@()  ; CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ | git add . *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ | git add . | out-string *> $x; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ ; $x = ( git add . ) -join "`n" ; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ ; ( git add . ) -OutVariable x  ; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ [array]$x =@() ;[array]$y =@() ; [array]$z =@()  ; CD $_ ;  git add .  -OutVariable x  ; git commit -a -m "test" *> $y;git push --all *> $z ; $Object = New-Object PSObject -Property @{folder=$_;Add=$x;commit=$y;push=$z} ; $object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = . { CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = &{ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = cmd /c &{ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} '2>1' ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = &{ CD $_ ; cmd /c git add . '2>&1' ; git commit -a -m "test" ;git push --all}  ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = &{ CD $_ ; cmd /c git add . '2>&1' ; cmd /c git commit -a -m "test" '2>&1' ; cmd /c git push --all '2>&1' }  ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $q = &{ cmd /c CD $_ '2>&1' ; cmd /c git add . '2>&1' ; cmd /c git commit -a -m "test" '2>&1' ; cmd /c git push --all '2>&1' }  ; $q }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *>> add.log; git commit -a -m "test" *>> commit.log ;git push --all -porcelain >> push.log }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *>> $_+'\add.log'; git commit -a -m "test" *>> $_+'\commit.log' ;git push --all -porcelain >> $_+'\push.log' }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $_+'\add.log'; git commit -a -m "test" *> $_+'\commit.log' ;git push --all -porcelain > $_+'\push.log' }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $_'\add.log'; git commit -a -m "test" *> $_'\commit.log' ;git push --all -porcelain > $_'\push.log' }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $_'\add.log'; git commit -a -m "test" *> $_'\commit.log' ;git push --all --porcelain > $_'\push.log' }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *> $_'\add.log'; git commit -a -m "test" *> $_'\commit.log' ;git push --all --porcelain > $_'\push.log' ; $object = ${ Get-Content add.log -First 1; add.log -First 1;  add.log -First 1 } ; $object }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $object = ${ Get-Content add.log -First 1; add.log -First 1;  add.log -First 1 } ; $object }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = Get-Content add.log -First 1; commit = add.log -First 1; push= add.log -First 1 } ; $anotherObj }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content add.log -First 1); commit = (add.log -First 1); push= (add.log -First 1 )} ; $anotherObj }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content "\add.log" -First 1); commit = ( get-content "\add.log" -First 1); push= (get-content "\add.log" -First 1 )} ; $anotherObj }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\add.log" -First 1); push= (get-content ".\add.log" -First 1 )} ; $anotherObj }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )} }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ Out-Null -inputObject(CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )} } )
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ Out-Null -inputObject(CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log' ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )})}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ Out-Null -inputObject(CD $_ | git add . *>> $_'\add.log'; git commit -a -m "test" *>> $_'\commit.log' ;git push --all --porcelain >> $_'\push.log') ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ Out-Null -inputObject(CD $_ | git add . *>> $_'\add.log');Out-Null -inputObject( git commit -a -m "test" *>> $_'\commit.log' );Out-Null -inputObject(git push --all --porcelain >> $_'\push.log') ; $anotherObj = [psCustomObject] @{ Add = (Get-Content ".\add.log" -First 1); commit = ( get-content ".\commit.log" -First 1); push= (get-content ".\push.log" -First 1 )}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $x = ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all}}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ $x = ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $x}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.Edge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{ cls$x = ${ CD $_ ;  git add .  ; git commit -a -m "test" ;git push --all} ; $x}
cls

cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | git lazy 'test'
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; git lazy 'test'}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; git lazy 'test' *>> $x ; $x}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; git lazy 'test' *>> $x ; $ob = @{ path=$_;mes=$x} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; git lazy 'test' *>> $x ; $ob = [psCustomObject] @{ path=$_;mes=$x} ; $ob}
cls
[int[]]$c = 1,2,3,4,5
[int[]]$c = 1,2,3,4,5 ;$c
[int[]]$c = 1,2,2,3,4,5 ;$c
[int[]]$c = 1,2,2,3,4,2,5 ;$c
[string[]]$c = "1,2,2,3","4,2,5" ;$c
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c <<* ( git lazy 'test')  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = ( git lazy 'test')  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = "","" ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob.values}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob.values | count-object}
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob.values | count-objects }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; ( git lazy 'test') *>> $c  ; $ob = [psCustomObject] @{ path=$_;mes=$c} ; $ob.values | Measure-Object }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; [string[]]$c = [System.Collections.Generic.HashSet[string]]::new($c) ; cmd /c git lazy 'test' '2>&1' $c ; $c }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c git lazy 'test' '2>&1' .\lazy.log ; $c  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c git lazy 'test' '2>&1' .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c git lazy 'test' '2>&1' '.\lazy.log'  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c git lazy 'test' '2>&1' $_\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') '2>&1' $_\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 2>&1 $_\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 2>&1> .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 3>&1> .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 3>&1 2>&1 > .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') *> .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 6> .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') 2>&1 .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c (git lazy 'test') '2>&1>' .\lazy.log  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c "(git lazy 'test') '2>&1>' .\lazy.log"  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c "git lazy 'test' '2>&1>' .\lazy.log"  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; cmd /c "git lazy 'test' 2>&1> .\lazy.log"  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-Null -inputObject (cmd /c "git lazy 'test' 2>&1> .\lazy.log")  }
cd C:\ ; (Search-Everything -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-Null -inputObject (cmd /c "git lazy 'test' 2>&1> .\lazy.log") ;Get-Content lazy.log -First 1 }
cd C:\ ; (Search-Everything -wholeword -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -MatchWholeWord -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; ((Search-Everything -MatchWholeWord -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (cmd /c git lazy 'test') ;Get-Content lazy.log -First 1 }
cd C:\ ; ((Search-Everything -MatchWholeWord -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;Get-Content lazy.log -First 1 }
cd C:\ ; ((Search-Everything -MatchWholeWord -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q }
cd C:\ ; ((Search-Everything -MatchWildcards -child *.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q }
cd C:\ ; (Search-Everything -Wildcards -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -wildcards -child .git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child wildcards:*.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child -wildcards:*.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child <wildcards:*.git> -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child "wildcards:*.git" -PathExclude 'C:\users\Crbk01\AppData\Local\Temp' )
cd C:\ ; (Search-Everything -child *.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Modifiers wildcards )
cd C:\ ; (Search-Everything -child *.git -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter wildcards )
cd C:\ ; (Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "wildcards:child:*.git"   )
cd C:\ ; (Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "wildcards:child:*.git" ) | Measure-Object
cd C:\ ; (Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Measure-Object
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q } | object-where line -eq 'git : fatal: not a git repository:'
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=Get-Content lazy.log -First 1 ; path = $_} ; $q } | where-object line -eq 'git : fatal: not a git repository:'
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=(Get-Content lazy.log -First 1).substring(0,40) ; path = $_} ; $q } | where-object line -eq 'git : fatal: not a git repository:'
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{line=(Get-Content lazy.log -First 1).substring(0,40) ; path = $_} ; $q }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=(Get-Content lazy.log -First 1).substring(0,40) } ; $q }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=(Get-Content lazy.log -First 1).substring(0,40) } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'test' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ))
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
echo "git absorbGitDir" ;git submodule absorbgitdirs
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | select-object -top 1 | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; ((Search-Everything -PathExclude 'C:\users\Crbk01\AppData\Local\Temp'-Filter "<wholefilename:child:.git file:>|<wholefilename:child:.git folder:>" -global ) | Where{ $_ -notmatch 'C..9dfe73ef|OneDrive|GitHubDesktop.app|Microsoft VS Code._.resources.app|Installer.resources.app.node_modules|Microsoft.E dge.User Data.*.Extensions|Program Files.*.(Esri|MapInfo|ArcGIS)|Recycle.Bin' } | select-object -head 1 | sort-object -Property Length -Descending ) | %{cd $_; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }


echo "Git Show origin"; git remote show origin
 git remote -v
 git remote -v | | Tee-Object -Variable proc | "x"; $proc
 git remote -v | Tee-Object -Variable proc | "x"; $proc
 git remote -v | Tee-Object -Variable proc | out-host "x"; $proc
 git remote -v | Tee-Object -Variable proc | echo "x"; $proc
 git remote -v | Tee-Object -Variable proc ; echo "x"; $proc
out-null( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc | split ' '
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc.split ' '
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc.split(' ')
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc.split('\s\t')
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc -split '\t'
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc -split '[\t\s]'
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc |ConvertTo-Csv
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc | convertTo-Json
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc -split '[\t\s]' | convertTo-csv
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; $proc -split '[\t\s]' | convertTo-Json
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{ $proc -split '[\t\s]'; New-Object PSObject -Property @{ Orign = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{ $proc -split '[\t\s]'; New-Object PSObject -Property @{ Orign = $proc[0].Trim();  url = $proc[1].Trim();  type = $proc[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{ $properties = $proc -split '[\t\s]'; New-Object PSObject -Property @{ Orign = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{ $properties = $proc -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{$proc - split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; echo "x"; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
cd C:\ ; (EveryGitRepo | select-object -last 1 | sort-object -Property Length -Descending ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
cd C:\ ; (EveryGitRepo | select-object -last 1 | sort-object -Property Length -Descending ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  } ; $q | select path,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -last 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  } ; $q | select path,line }
 git remote -v
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -rng 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  } ; $q | select path,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -random 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  } ; $q | select path,line }
"git Remotes as psobject" ; out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -random 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  ; remote= (out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }) | select-object -first 1 | select url } ; $q | select path,url,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -random 1 ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log  ; remote= (out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })} ; $q | select path,url,line }
"git Remotes as psobject" ; out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url
"git Remotes as psobject" ; ( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url )
( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url )
$w = out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ; $w
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -rng 1 ) | %{gitSilently; $w = out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; $w = out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending ) | %{gitSilently; $w = out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line }
( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url )
$qz = ( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ); $qz
$qz = out-null -InputObject( ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ); $qz
$qz = out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url ); $qz
$qz = out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $qz
$qz = out-null -InputObject(( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $qz
$qz = (( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $qz
(( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $qz
( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url
out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url
${out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url }
@{out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url }
{out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; (%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url }
out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url )
out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url );
out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ); $w
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line }
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim(); url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
'C:\Users\crbk01\Desktop\Status.csv' get-content
get-content 'C:\Users\crbk01\Desktop\Status.csv'
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD'
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | select path
cd 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\8f2409be-00e3-417b-acf5-a6adeae9e0b8'
git branch
git remote branch
git remote -v
git branch -b
git branch -v
git branch -l
git branch -a
git checkout remotes/origin/8f2409be-00e3-417b-acf5-a6adeae9e0b8
git branch acTemp 55235b5
cd 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
explorer 'D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git merge --function
git merge remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781
git index --function
git show-index
cls
git log
git log HEAD
git status
echo "Git Re-Attach Head" ;git checkout -b temp-branch ; git checkout remote/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git branch -a
echo "Git Re-Attach Head" ; #git checkout -b temp-branch ; git checkout remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git checkout remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git commit -m 'Reatached head'
echo "Git Re-Attach Head" ; git checkout -b temp-branch ; git checkout remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git status
echo "Git Re-Attach Head" ; git checkout -b temp-branch ; git checkout origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch
git status
git sync -function
git push 'origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git push 9bf5f6bc-10c6-4831-8b5e-6c51fbeae781 'remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git push 'origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781' 'remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git push --function
git push  --repo 'remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781'
git push  --repo 'remotes/origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781' Head
git checkout 9bf5f6bc-10c6-4831-8b5e-6c51fbeae781
cls
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | select path
$gmc
$gmc.BaseName
$pwd.BaseName
get-location
(get-location).baseName
get-location.baseName
(get-location | select path ).baseName
(get-location | select path )
[path](get-location | select path)
$MyInvocation.MyCommand.Path
$MyInvocation.MyCommand.Path.baseName
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ $_.path.baseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ $_.path }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ ($_.path).BaseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ ($_.path | convert-path).BaseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | convert-path
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | convert-path | %{ $_.baseName}
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  | %{ convert-path -path $_ }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ convert-path -path $_ }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ convert-path -path $_.path }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ (convert-path -path $_.path).baseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ $q=convert-path -path $_.path; $q.baseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  %{ $q=convert-path -literalPath $_.path; $q.baseName }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  convert-path -literalPath $_
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' |  convert-path -literalPath $_.path
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ convert-path -literalPath $_.path }
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ convert-path -literalPath $_.path } | select baseName
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ convert-path -literalPath $_.path } | split-path -leaf
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | split-path -leaf
cd ..
cd 58e93225-fbe8-4239-b061-0a7800085c08
git rev-parse --quiet --verify 58e93225-fbe8-4239-b061-0a7800085c08
cls
git rev-parse --verify 58e93225-fbe8-4239-b061-0a7800085c08
git rev-parse --verify remotes\origin\58e93225-fbe8-4239-b061-0a7800085c08
git rev-parse --function
git rev-parse
git rev-parse --branches
cl
cls
git rev-list
git rev-list --branches
git rev-list --branches --object-name
git rev-list --remotes
 split-path -leaf
$MyInvocation.MyCommand.Path
get-location
get-location | split-path -leaf
echo "ps Name of current folder" ; (get-location | split-path -leaf)
git checkout (get-location | split-path -leaf)
git branch tempb 16a142a
git branch tempb 16a142a ; git checkout (get-location | split-path -leaf) ; git merge tempb
git push (get-location | split-path -leaf)
git push origin (get-location | split-path -leaf)
git branch -d tempb
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | split-path -leaf
cd ..
cd 709a4445-290f-4e66-85a4-4c3ca208e964
git checkout tempz ; git checkout (get-location | split-path -leaf) ; git merge tempz ; git branch -d tempz ; git push origin (get-location | split-path -leaf)
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | %{ cd $_ ; git checkout tempz ; git checkout (get-location | split-path -leaf) ; git merge tempz ; git branch -d tempz ; git push origin (get-location | split-path -leaf)}
get-content 'C:\Users\crbk01\Desktop\Status.csv' | ConvertFrom-Csv | Where-Object -Property line -match 'HEAD' | convert-path | %{ cd $_ ; git checkout tempz ; git checkout (get-location | split-path -leaf) ; git merge tempz ; git branch -d tempz ; git push origin (get-location | split-path -leaf)}
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } })  | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  | select-object -first 1 ) | %{gitSilently; out-null -InputObject( git remote -v | Tee-Object -Variable proc ) ; $w = ((%{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; try{New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }) } catch {"error"} | select-object -first 1 | select url ) ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = $w  } ; $q | select path,remote,line } | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"




cd 'D:\portapps\4, windows enhance\PortableApps\RegJump-NavigateToRegKey' .\pasteAndJump.ps1
echo "execute program" ; menu @(everything 'ext:exe lepton') | %{& $_ }
echo "open Ahk" ; menu @(everything 'path:ext:ahk !$ data') | %{. $_ }
echo "open chained everything" ; menu @(everything 'path:ext:ahk !$ \data\') | %{. menu @(everything 'path:ext:exe !$ autoH') $_ }
echo "open chained everything" ; menu @(everything 'path:ext:ahk !$ \data\') | %{. (menu @(everything 'path:ext:exe !$ autoH')) $_ }
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
cd PowerShellProjectFolder\scripts
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
cd ..
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
cd scripts
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
cd ,,
cd ..
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
cd ..
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
cd D:/Project Shelf/.git/modules/RegionGotland
cd 'D:/Project Shelf/.git/modules/RegionGotland'
echo "list roots" ;$ressult = @() ; $roots = Search-Everything -filter 'child:.git' | sort -property length ; $roots | %{ $r = $_ ; if(($ressult.where{$r -like "$_*"}).count -eq 0 ){$ressult+=$r}  } ; $ressult | sort
Search-Everything -filter 'child:.git'
cd 'D:\Project Shelf\RegionGotland'
echo "list roots" ;$ressult = @() ; $roots = Search-Everything -filter 'child:.git' | sort -property length ; $roots | %{ $r = $_ ; if(($ressult.where{$r -like "$_*"}).count -eq 0 ){$ressult+=$r}  } ; $ressult | sort
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
git add .
git add --help
git add --function
git add -v
git add . -v
git add . -n -v
git add . -n -v --ignore-errors
git add . -a -n -v --ignore-errors
git add . -A -n -v --ignore-errors
git add . -a -n -v --ignore-errors
git add . -A -n -v --ignore-errors
echo "open Ahk" ; menu @(everything 'ext:exe prolasso') | %{. $_ }
menu @(everything 'ext:exe lasso') | %{. $_ }
echo "open prolasso"; menu @(everything 'ext:exe lasso') | %{. $_ }
choco install plasso
choco install plasso --ignore-checksums
ls | %{ cd $_ ;git lazy }
ls | %{ cd $_ ;git lazy -m 'auto kommit' }
ls | %{ cd $_ ;git add . -v ; commit -am 'auto' }
ls | %{ cd $_ ;git add . -v ; git commit -am 'auto' }
get-children | %{ cd $_ ;git add . -v ; git commit -am 'auto' }
Get-ChildItem | %{ cd $_ ;git add . -v ; git commit -am 'auto' }
Get-ChildItem
cd 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db';  Get-ChildItem | %{ cd $_ ;git add . -v ; git commit -am 'auto' }
cd 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db';  Get-ChildItem 
cd 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db';  Get-ChildItem | se
cd 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db';  Get-ChildItem | select name | %{ cd $_ ;git add . -v ; git commit -am 'auto' }
cd 'C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db';  Get-ChildItem | select name | %{ cd $_.name ;git add . -v ; git commit -am 'auto' }
search-everything -filter 'parent:C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db' 
search-everything -filter 'parent:C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db'-global 
search-everything -filter 'parent:C:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\'-global 
search-everything -filter 'parent:D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\ dir:'-global 
search-everything -filter 'parent:D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\ dir:' -global 
search-everything -filter 'parent:path:D:\Users\crbk01\AppData\Roaming\JetBrains\DataGrip2021.1\consoles\db\ dir:' -global 
cd ..
search-everything -filter 'dir:'
search-everything
everything 'dir:'
child-items 
Get-ChildItem
get-childItem | $(Get-Content ""; Get-Content $_) | Set-Content $_
get-childItem | %{$(Get-Content ""; Get-Content $_) | Set-Content $_}
get-childItem | %{$(""; Get-Content $_) | Set-Content $_}
echo "Header append to each file" ; #get-childItem | %{$(""; Get-Content $_) | Set-Content $_}
bcompare
git add . ; git commit -am 'with session backup'
git subtree plit --prefix=BCSessions.xml -b split
git subtree split --prefix=BCSessions.xml -b split
git log --pretty=short --abbrev-commit -n1 --
git log --pretty=short --abbrev-commit -n1
git log --pretty=short --abbrev-commit -n1 .
& $profile
aliasPshellHistoryPath
echo "search ConsolHistory" ; menu @( get-content aliasPshellHistory | where{ $_ -match 'lepton' ) | %{. $_ }
echo "search ConsolHistory" ; menu @( get-content aliasPshellHistory | where{ $_ -match 'lepton' }) | %{. $_ }
echo "search ConsolHistory" ;$path = aliasPshellHistoryPath; menu @( get-content $path | where{ $_ -match 'lepton' }) | %{. $_ }
echo "search ConsolHistory" ;$path = aliasPshellHistoryPath; menu @( get-content $path | where{ $_ -match 'lepton' }) | %{cmd \c $_ }
pastDo 'bcompare'
pastDo 'run'
pastDo 'progr'
pastDoEdit 'progra'
cls
pastDoEdit 'progra'
cls
pastDoEdit 'progra'
cls
pastDoEdit 'progra'
echo "execute program" ; menu @(everything 'ext:exe bcompare') | %{& $_ } 
executeThis bcompare
executeThis 'bcompare'
pastDo 'alias'

pastDo consume
pastDo absorbe
pastDo submodule
pastDo absorb
executeThis lepton
pastDo absorb
cd .\my-windows\
 git merge origin/master
git lfs install
git push orig
git push origin
git ls-tree
git ls-tree -d
git ls-tree -d --full-name
git ls-tree -d --full-name --full-tree
git diff-tree --no-commit-id --name-only -r
$commitid = git log --format="%H" -n 1 ;  git diff-tree --no-commit-id --name-only -r $commitid ; git show --pretty="" --name-only $commitid
$commitid = (git log --format="%H" -n 1) ;  git diff-tree --no-commit-id --name-only -r $commitid ; git show --pretty="" --name-only $commitid
echo "show repos current tree" ; $commitid = (git log --format="%H" -n 1) ;  git diff-tree --no-commit-id --name-only -r $commitid ; git show --pretty="" --name-only $commitid
cd 'D:\Project Shelf\PowerShellProjectFolder\scripts\ini\5960b271752d030383f0e5a591751e0d'
.\ini-GetnOut.ps1
pastdoedit code
cls
echo "open workspace ps1" ; menu @(everything 'path:ext:code-workspace !$ ps1') | %{. $env:code $_ -add 'ini-getnout.ps1'}
echo "list all file associations" ; cmd /c assoc
echo "open workspace ps1" ; menu @(everything 'path:ext:code-workspace !$ ps1') | %{. $env:code $_ -add "$pwd/ini-getnout.ps1"}
echo "list all file associations" ; cmd /c assoc .json
echo "list all file associations" ; cmd /c ftype .json
echo "list all file associations" ; cmd /c ftype json
echo "list all file associations" ; cmd /c assoc .json=Json
echo "set file assoc with powershell script" ; cmd /c assoc $ext=$extType ; cmd /c ftype $extType=powershell.exe -File $powershellPath "%1"
echo "set file assoc with powershell script" ; $ext = '.json' ; $extType = 'JsonDocument' ; ; cmd /c assoc $ext=$extType 
echo "set file assoc" ; $ext = '.json' ; $extType = 'JsonDocument' ; ; cmd /c assoc $ext=$extType 
cd 'HKEY_CURRENT_USER\SOFTWARE\Classes'
get-content 'HKEY_CURRENT_USER\SOFTWARE\Classes'
get-children 'HKEY_CURRENT_USER\SOFTWARE\Classes'
Get-ChildItem 'HKEY_CURRENT_USER\SOFTWARE\Classes'
Get-Item -Path Registry::HKEY_CURRENT_USER\SOFTWARE\Classes
Get-Item -Path Registry::HKEY_CURRENT_USER\SOFTWARE\
Get-Item -Path Registry::HKEY_CURRENT_USER\SOFTWARE\Classes  | Select-Object -ExpandProperty Property
cd "export default app assosiations" ; cmd /c dism /online /Export-DefaultAppAssociations:"%UserProfile%\Desktop\MyDefaultAppAssociations.xml"
echo "export default app assosiations" ; cmd /c dism /online /Export-DefaultAppAssociations:"%UserProfile%\Desktop\MyDefaultAppAssociations.xml"
echo "import default app assosiations"; cmd /c dism /online /Import-DefaultAppAssociations:"%UserProfile%\Desktop\MyDefaultAppAssociations.xml"
everything 'abc.ahk.log'
everything 'abc.ahk.log' | % { split-path $_ -parent}
everything 'abc.ahk.log' | % { split-path $_ -parent} | cd $_ ; git lazy
everything 'abc.ahk.log' | % { split-path $_ -parent} | cd $_ ; git lazy 'abc'
everything 'abc.ahk.log' | % { split-path $_ -parent } | % { cd $_ ; git lazy 'abc'}
pastdoedit 'what'
cls
echo "whatPulse aplictions" ; $ht2 = @{} ; $query = "select rightstr(path,instr(reverse(path),'/')-1) exe,path from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t  |  get-member | where  { $_ -match 'compare' }
echo "whatPulse aplictions" ; $ht2 = @{} ; $query = "select rightstr(path,instr(reverse(path),'/')-1) exe,path from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t  |  get-member
echo "whatPulse aplictions" ; $ht2 = @{} ; $query = "select rightstr(path,instr(reverse(path),'/')-1) exe,path from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t  
echo "whatPulse aplictions" ; $ht2 = @{} ; $query = "select rightstr(path,instr(reverse(path),'/')-1) exe,path from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "D:\portapps\4. windows check\PortableApps\WhatPulse\whatpulse.db" ; newSqliteConnection $path $query | Out-String -stream | ConvertFrom-Csv -Delimiter `t | where { $_.name -match 'compare' }
pastDoEdit 'profile'
cls
pastDoEdit 'profile'
 cd (split-path -path $profile -parent)
explorer (split-path -path $profile -parent)
cls
pastedoedit 'history'
pastDoEdit 'history'
((Get-PSReadlineOption).HistorySavePath | split-path -parent) | explorer 
((Get-PSReadlineOption).HistorySavePath | split-path -parent) 
 explorer ((Get-PSReadlineOption).HistorySavePath | split-path -parent)
$workpath = "C:\Users\crbk01\AppData\Local\GMap.NET\DllCache\SQLite_v103_NET4_x64\System.Data.SQLite.DLL"
$alternative = (everything 'System.Data.SQLite.DLL' | select -first 1)
$workpath = "C:\Users\crbk01\AppData\Local\GMap.NET\DllCache\SQLite_v103_NET4_x64\System.Data.SQLite.DLL"  ; $alternative = (everything 'System.Data.SQLite.DLL' | select -first 1) ; Add-Type -Path if(check-path $workpath){$workpath} else {$alternative}
$workpath = "C:\Users\crbk01\AppData\Local\GMap.NET\DllCache\SQLite_v103_NET4_x64\System.Data.SQLite.DLL"  ; $alternative = (everything 'System.Data.SQLite.DLL' | select -first 1) ; $p = if(check-path $workpath){$workpath} else {$alternative} ; Add-Type -Path $p
sqlite
pastDoEdit 'git alias'
pastDoEdit 'alias'
everything 'abc.ahk.log' | % { split-path $_ -parent } | % { cd $_ ; git lazy 'abc'}
echo "git push important abc" ; everything 'abc.ahk.log' | % { split-path $_ -parent } | % { cd $_ ; git lazy 'abc'}
gc 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1' -split 'function'
get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1' -split 'function'
(get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function'
pastDoEdit 'object'
cls
echo "ps new object" ; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } 
(get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ New-Object PSObject -Property @{ name = ($_ -head 1).Trim() ;  body = $_} }
(get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ New-Object PSObject -Property @{ name = ($_ Select -split '\n')[0].Trim() ;  body = $_} } 
(get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ New-Object PSObject -Property @{ name = ($_ -split '\n')[0].Trim() ;  body = $_} } 
(get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ New-Object PSObject -Property @{ name = ($_ -split '\n')[0].Trim() ;  body = $_} }  | select name
(get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ New-Object PSObject -Property @{ name = ($_ -split '´n')[0].Trim() ;  body = $_} }  | select name
$regex = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ New-Object PSObject -Property @{ name = ($_ -split $regex)[0].Trim() ;  body = $_} }  | select name
$regex = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ New-Object PSObject -Property @{ name = ($_ -split $regex)[1].Trim() ;  body = $_} }  | select name
$regex = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $body = $_ -split $regex ; New-Object PSObject -Property @{ name = $body[1].Trim() ;  body = $_} }  | select name
$regex = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $body = $_ -split $regex ; New-Object PSObject -Property @{ name = $body[1].Trim() ;  body = $_} }  | select body | measure-object
$regex = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $body = $_ -split $regex ; New-Object PSObject -Property @{ name = $body ;  body = $_} }  | select body | measure-object
$regex = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $body = $_ -split $regex ; New-Object PSObject -Property @{ name = $body | measure-object ;  body = $_} }  | select name
$regex = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $body = $_ -split $regex ; New-Object PSObject -Property @{ name = $body | measure-object ;  body = $_} ; $body | measure-object}
$regex = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $body = $_ -split $regex ; $q = New-Object PSObject -Property @{ name = $body | measure-object ;  body = $_} ; $body | measure-object }
$splitbyline = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $body = $_.toString() -split $splitbyline ; $q = New-Object PSObject -Property @{ name = $body | measure-object ;  body = $_} ; $body | measure-object }
$splitbyline = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $head = ($_ -split $splitbyline)[0] ; $q = New-Object PSObject -Property @{ name = $head ;  body = $_} | measure-object }
$splitbyline = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $head = ($_ -split $splitbyline)[0] ; $q = New-Object PSObject -Property @{ name = $head ;  body = $_} ; $q }
$splitbyline = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | Tee-Object -Variable header | %{ $head = ($_ -split $splitbyline)[0] ; $q = New-Object PSObject -Property @{ name = $head ;  body = $_} ; $q } | select name
$splitbyline = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | %{ $head = ($_ -split $splitbyline)[0] ; $q = New-Object PSObject -Property @{ name = $head ;  body = $_} ; $q } | select name
$splitbyline = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | %{ $head = ($_ -split $splitbyline)[0] ; $head }
$splitbyline = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | %{ $head = ($_ -split $splitbyline)[1] ; $head }
$splitbyline = '\n' ; (get-content 'C:\Users\crbk01\Documents\WindowsPowerShell\profile.ps1') -split 'function' | %{ $_ | measure-object }
pastDoEdit 'porp'
lsx
code
reload
pastDo
pastdoedit 'split'
select -first 40
ls | select -first 40
ls | select -first 40 |  Move-Item -Destination 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\förbud 2-21\updelat\1\'
cd 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Uppföljning\2021\förbud 2-21'
cd .\updelat\
cd ..
cd test
$from = Join-Path $path $_.substring(8)
$to = Join-Path $quarantaine $_.substring(8)
if(!(Test-Path $to))`
{`
    New-Item -Path $to -ItemType Directory -Force | Out-Null`
}
Move-Item $from $tocls
cls
ls | $from = Join-Path $pwd $_.substring(8) ; $to = Join-Path $pwd "/x/$_.substring(8)" ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; $from $to
ls | %{ $from = Join-Path $pwd $_.substring(8) ; $to = Join-Path $pwd "/x/$_.substring(8)" ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; $from $to }
ls | %{ $from = Join-Path $pwd $_.substring(8) ; $to = Join-Path $pwd "/x/$_.substring(8)" ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; $from; $to }
ls | %{ $from = Join-Path $pwd $_.fullname.substring(8) ; $to = Join-Path $pwd "/x/$_.substring(8)" ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; $from; $to }
ls
cls
echo "count piped objects with foreach" ; 1..5 | ForEach-Object -Begin { $count = 0 } -Process { $_ + 1 }, { ++$count } -End { "--- count: $count" }
echo "count piped objects with foreach" ; 1..5 | ForEach-Object -Begin { $count = 0 } -Process { $_ + 1; $_ }, { ++$count } -End { "--- count: $count" }
ls | ForEach-Object -Begin { $count = 0 } -Process { $_ + 1; $_ }, { ++$count } -End { "--- count: $count" }
ls | measure-object
$total =(ls | measure-object).count ; $total
$total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process { "$_.name, $count%$total" }, { ++$count } -End { "--- count: $count" }
$total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {$mod =  $count % $total ; "$_.name,$mod" }, { ++$count } -End { "--- count: $count" }
$total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {$mod =  $count / $total ; "$_.name,$mod" }, { ++$count } -End { "--- count: $count" }
$total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {$mod =  ([Math]::Round($count / $total, 0)) ; "$_.name,$mod" }, { ++$count } -End { "--- count: $count" }
$total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {$mod =  ([Math]::Round($count / $total, 0))+1 ; "$_.name,$mod" }, { ++$count } -End { "--- count: $count" }
$total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {$mod =  ([Math]::Round($count / $total, 0))+1 ; "$_.name,$mod" ; $from = Join-Path $pwd $_.fullname.substring(8) ; $to = Join-Path $pwd "/x/$_.substring(8)" ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; $from; $to  }, { ++$count } -End { "--- count: $count" }
cls
$total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {´$mod =  ([Math]::Round($count / $total, 0))+1 ; "$_.name,$mod" ; $from = Join-Path $pwd $_.fullname.substring(8) ; $to = Join-Path $pwd "/x/$_.substring(8)" ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; $from; $to  }, { ++$count } -End { "--- count: $count" }
ls
cls
$total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {$mod =  ([Math]::Round($count / $total, 0))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; $from; $to  }, { ++$count } -End { "--- count: $count" }
$total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {$mod =  ([Math]::Round($count / $total, 0))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { ++$count } -End { "--- count: $count" }
echo "move files into subfolders according to number" ; $total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {$mod =  ([Math]::Round($count / $total, 0))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { ++$count } -End { "--- count: $count" }
; $total =(ls | measure-object).count ; ls | ForEach-Object -Begin { $count = 0 } -Process {$size }, { $size+=$_.size } -End { "--- count: $size" }
ls | ForEach-Object -Begin { $size = 0 } -Process {$size }, { $size+=$_.size } -End { "--- count: $size" }
ls | ForEach-Object -Begin { $size = 0 } -Process {$size+=$_.size }, { } -End { "--- count: $size" }
ls | select size
Get-ChildItem
Get-ChildItem | select size
Get-ChildItem |  %{ $q = [psobject]$_ ; $q.properties }
Get-ChildItem |  %{ $q = [psobject]$_ ; $q.property }
Get-ChildItem |  %{ Get-ItemProperty $_ }
Get-ChildItem |  %{ $q = Get-ItemProperty $_ ; $q }
echo "property of object"; Get-Member ; echo "List Properties of a Given Object Type";  gm -MemberType Properties;echo "Show all properties and their values of a output object" | select -Property *
Get-ChildItem |  %{ $q = $_ | select -Property * ; $q  }
ls | ForEach-Object -Begin { $size = 0 } -Process {$size }, { $size+=$_.length } -End { "--- count: $size" }
1.5mb
$roof = 1.5mb ; ls | ForEach-Object -Begin { $size = 0 } -Process {$size }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; ls | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::Roundup($size / $roof, 0))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; ls | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::Round($size / $roof, 0))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; ls | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof, 0))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; ls | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -include *.pdf | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -include *.pdf 
$roof = 1.5mb ; Get-ChildItem -exclude d
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof))+1 ; $_.length;$mod  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof))+1 ; $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof))+1}, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof))+1 ; "mod:$mod"}, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof)) ; "mod:$mod"}, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($size / $roof)) ; "mod:$mod ; $size / $roof"}, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::ceiling($_.length / $roof)) ; "mod:$mod ; $size / $roof"}, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::round($_.length / $roof)) ; "mod:$mod ; $size / $roof"}, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { [kb]$size = 0 } -Process {$mod =  ([Math]::round($_.length / $roof)) ; "mod:$mod ; $size / $roof"}, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length } -End { "--- count: $size" }
1kb
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { [kb]$size = 0 } -Process {$mod =  ([Math]::round($_.length kb / $roof)) ; "mod:$mod ; $size / $roof"}, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length kb } -End { "--- count: $size" }
1.5mb / 1kb
ls | select -first 1 
ls | select -first 1 | select length / 1.5mb
ls | select -first 1 | %{ $_.length / 1.5mb}
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::round($_.length / $roof)) ; "mod:$mod ; $size / $roof"}, { $size+=$_.length kb } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::round($_.length / $roof)) ; "mod:$mod ; $size / $roof"}, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::round($_.length / $roof,1)) ; "mod:$mod ; $size / $roof"}, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::round($size / $roof,1)) ; "mod:$mod ; $size / $roof"}, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::round($size / $roof,0)) ; "mod:$mod ; $size / $roof"}, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::celing($size / $roof)) ; "mod:$mod ; $size / $roof"}, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::round($size / $roof)).tostring("#") ; "mod:$mod ; $size / $roof"}, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  ([Math]::round($size / $roof)+1).tostring("#") ; "mod:$mod ; $size / $roof"}, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process {$mod =  (($size / $roof)+1).tostring("#") ; "mod:$mod ; $size / $roof"}, { $size+=$_.length } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process { $size+=$_.length }, {$mod =  (($size / $roof)+1).tostring("#") ; "mod:$mod ; $size / $roof"} -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process { $size+=$_.length }, {$mod =  (($size / $roof)+1).tostring("#.#") ; "mod:$mod ; $size / $roof"} -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process { $size+=$_.length }, {$mod =  ((($size / $roof)+1).tostring("#.#") -split '.')[0] ; "mod:$mod ; $size / $roof"} -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process { $size+=$_.length }, {$mod =  ((($size / $roof)+1).tostring("#.#").split('.'))[0] ; "mod:$mod ; $size / $roof"} -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process { $size+=$_.length }, {$mod =  ((($size / $roof)+1).tostring("#.#").split('.'))[0] ; }, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  }, { $size+=$_.length kb } -End { "--- count: $size" }
$roof = 1.5mb ; Get-ChildItem -exclude d | ForEach-Object -Begin { $size = 0 } -Process { $size+=$_.length }, {$mod =  ((($size / $roof)+1).tostring("#.#").split('.'))[0] }, { $from = Join-Path $pwd $_.name ; $to = Join-Path $pwd $mod ; if(!(Test-Path $to)) { New-Item -Path $to -ItemType Directory -Force | Out-Null } ; mv $from (join-path $to $_.name)  } -End { "--- count: $size" }
